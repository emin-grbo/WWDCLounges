{
  "name": "coredata",
  "messages": [
    {
      "type": "message",
      "user": "U03V30M0C1K",
      "text": "This content can't be displayed.",
      "ts": "1665434043.990999",
      "pinned_to": [
        "C04305NR6Q2"
      ],
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "raised_hands",
          "count": 6,
          "users": [
            "U046W09K7LG",
            "U045VN0MS3Y",
            "U045ZD12PK7",
            "U046U96DJQ2",
            "U0463AA946N",
            "U0465MRJBFW"
          ]
        },
        {
          "name": "wave",
          "count": 4,
          "users": [
            "U0464MDV42G",
            "U04640E3KAP",
            "U0465MRJBFW",
            "U04742GGNQY"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "header",
          "text": {
            "type": "plain_text",
            "text": "Welcome to Ask Apple",
            "emoji": true
          },
          "block_id": "o/y"
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "We're excited to be hosting you in the Core Data channel this week! You can find the full schedule of Q\u0026amp;As for Core Data by visiting the \u003chttps://apps.apple.com/us/app/apple-developer/id640199958 | Apple Developer app\u003e and \u003chttps://developer.apple.com/events/ask-apple/questions-and-answers/ | website\u003e."
          },
          "block_id": "1CDN"
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "If you haven’t already, please take a moment to familiarize yourself with \u003chttps://developer.apple.com/news/?id=vpbyzfg4 | how Q\u0026amp;As will work\u003e."
          },
          "block_id": "BC2Q"
        },
        {
          "type": "header",
          "text": {
            "type": "plain_text",
            "text": "Attendance Policy",
            "emoji": true
          },
          "block_id": "EKg"
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "We want to make sure these spaces are helpful and welcoming for everyone — developers and Apple employees alike. Please review and follow the \u003chttps://developer.apple.com/events/policy/online-event-attendance-policy/ | attendance policy\u003e."
          },
          "block_id": "QFh/"
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U03V30M0C1K\u003e added a workflow to this channel: *Ask Apple - coredata*.",
      "ts": "1666019082.679099",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Rv/Rv",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U03V30M0C1K"
                },
                {
                  "type": "text",
                  "text": " added a workflow to this channel: "
                },
                {
                  "type": "text",
                  "text": "Ask Apple - coredata",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "4755314e-c2d5-4036-a756-23f46ea78ce1",
      "type": "message",
      "user": "U0455R18DT2",
      "text": "Hello everyone and welcome to Ask Apple! The *Q\u0026amp;A: Core Data* activity will begin right here, at *10am PDT*! Check out the following resources while we prepare for takeoff:\n• \u003chttps://developer.apple.com/videos/play/wwdc2022/10120/|WWDC22 — Evolve your Core Data schema\u003e\n• \u003chttps://developer.apple.com/videos/play/wwdc2022/10119/|WWDC22 — Optimize your use of Core Data and CloudKit\u003e\n• \u003chttps://developer.apple.com/documentation/coredata|Core Data documentation\u003e\nWe’ll start answering your questions at *10am PDT* sharp. Select the :heavy_plus_sign: icon in the text field and use the “Ask a question” workflow to submit your Core Data questions now! Apple experts will answer as many of them as they can during the scheduled Q\u0026amp;A.",
      "ts": "1666111035.622909",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "rocket",
          "count": 2,
          "users": [
            "U0463PJJB34",
            "U03V30M0C1K"
          ]
        },
        {
          "name": "airplane",
          "count": 1,
          "users": [
            "U0455R18DT2"
          ]
        },
        {
          "name": "floppy_disk",
          "count": 1,
          "users": [
            "U04742GGNQY"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "/U4s",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "Hello everyone and welcome to Ask Apple! The "
                },
                {
                  "type": "text",
                  "text": "Q\u0026A: Core Data",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": " activity will begin right here, at "
                },
                {
                  "type": "text",
                  "text": "10am PDT",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": "! Check out the following resources while we prepare for takeoff:\n"
                }
              ]
            },
            {
              "Type": "rich_text_list",
              "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/videos\\/play\\/wwdc2022\\/10120\\/\",\"text\":\"WWDC22 \\u2014 Evolve your Core Data schema\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/videos\\/play\\/wwdc2022\\/10119\\/\",\"text\":\"WWDC22 \\u2014 Optimize your use of Core Data and CloudKit\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/documentation\\/coredata\",\"text\":\"Core Data documentation\"}]}],\"style\":\"bullet\",\"indent\":0,\"border\":0}"
            },
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "\nWe’ll start answering your questions at "
                },
                {
                  "type": "text",
                  "text": "10am PDT ",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": "sharp. Select the "
                },
                {
                  "type": "emoji",
                  "name": "heavy_plus_sign",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " icon in the text field and use the “Ask a question” workflow to submit your Core Data questions now! Apple experts will answer as many of them as they can during the scheduled Q\u0026A."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "232fc242-5b76-4c28-9d48-0cfcb9cd414f",
      "type": "message",
      "user": "U0455R18DT2",
      "text": "\u003c!here\u003e Hello there folks, and welcome to *Q\u0026amp;A: Core Data*! This Q\u0026amp;A has been cleared for takeoff! :airplane_departure:\n\nIt’s time to get started answering your questions! Select the :heavy_plus_sign: icon from the lower left, and use the “Ask a question” workflow to submit a question for our experts to answer. We’ll wrap things up in 60 minutes, so ask away!",
      "ts": "1666112438.167569",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "seat",
          "count": 1,
          "users": [
            "U03V30M0C1K"
          ]
        },
        {
          "name": "+1",
          "count": 1,
          "users": [
            "U04742GGNQY"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "cw/gc",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "broadcast",
                  "range": "here"
                },
                {
                  "type": "text",
                  "text": " Hello there folks, and welcome to "
                },
                {
                  "type": "text",
                  "text": "Q\u0026A: Core Data",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": "! This Q\u0026A has been cleared for takeoff! "
                },
                {
                  "type": "emoji",
                  "name": "airplane_departure",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": "\n\nIt’s time to get started answering your questions! Select the "
                },
                {
                  "type": "emoji",
                  "name": "heavy_plus_sign",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " icon from the lower left, and use the “Ask a question” workflow to submit a question for our experts to answer. We’ll wrap things up in 60 minutes, so ask away!"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046JND8CKB\u003e asked\n\u0026gt; Hi, I've seen some sites suggest Core Data shouldn't be used for saving photos, but maybe they missed 'use external storage option'? I'm working on an app where the user is likely to take a photo once a week or so. Is Core Data a good option for this or would you recommend saving to the directory? I don't want to save to the photo library as they may not want others seeing the photos easily.\n\u0026gt; Second Q - is there an option to save directly to the hidden photos folder rather than the standard photo library.",
      "ts": "1666112578.288299",
      "thread_ts": "1666112578.288299",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 7,
      "latest_reply": "1666116497.512469",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "HBdh",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046JND8CKB"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hi, I've seen some sites suggest Core Data shouldn't be used for saving photos, but maybe they missed 'use external storage option'? I'm working on an app where the user is likely to take a photo once a week or so. Is Core Data a good option for this or would you recommend saving to the directory? I don't want to save to the photo library as they may not want others seeing the photos easily.\\nSecond Q - is there an option to save directly to the hidden photos folder rather than the standard photo library.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "e45bf407-15a9-45ff-83b5-3411f5a9211f",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "Using external storage is fine. Alternatively, you can store a URL to your own managed file.",
          "ts": "1666112644.395679",
          "thread_ts": "1666112578.288299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "G4qdG",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Using external storage is fine. Alternatively, you can store a URL to your own managed file."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6518e976-e99b-4f9f-a763-a7342544aa7c",
          "type": "message",
          "user": "U046JND8CKB",
          "text": "Thanks David",
          "ts": "1666112832.824139",
          "thread_ts": "1666112578.288299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YBbV",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks David"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5b8bd370-d3df-4d24-87a2-4dc715f2a9cf",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "If you intend to pass URLs to other frameworks, like a media player, then you'd have to take the alternate",
          "ts": "1666113442.473269",
          "thread_ts": "1666112578.288299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "GwJ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you intend to pass URLs to other frameworks, like a media player, then you'd have to take the alternate"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "76BDC0EA-D715-4D90-AE1D-1D40EE5E9DAB",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "Would you recommend to use Binary Data as a data type for images or use Transformable?",
          "ts": "1666114151.069459",
          "thread_ts": "1666112578.288299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "A72m/",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Would you recommend to use Binary Data "
                    },
                    {
                      "type": "text",
                      "text": "a"
                    },
                    {
                      "type": "text",
                      "text": "s a data type for images or use Transformable?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4918C094-8079-4374-AB5B-5CFA0200E437",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "Transformable can’t be used as an external separate storage iirc.",
          "ts": "1666114177.733919",
          "thread_ts": "1666112578.288299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "c5sv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Transformable "
                    },
                    {
                      "type": "text",
                      "text": "can’t"
                    },
                    {
                      "type": "text",
                      "text": " be used as an external "
                    },
                    {
                      "type": "text",
                      "text": "s"
                    },
                    {
                      "type": "text",
                      "text": "eparate storage iirc."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "06e6f488-8d77-4f4e-9e4b-c2d326db7053",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Generally Binary.  Transformable would be more for something in which you wanted to write your own custom NSValueTransformer that did something special",
          "ts": "1666116193.405439",
          "thread_ts": "1666112578.288299",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0465SGRQTG"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2jp",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Generally Binary.  Transformable would be more for something in which you wanted to write your own custom NSValueTransformer that did something special"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ad72fd53-5ca7-4f1f-8bb0-e7c88e5351e9",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "And use custom getter/setter to transform the Data to a UIImage for example?",
          "ts": "1666116497.512469",
          "thread_ts": "1666112578.288299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zwWR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "And use custom getter/setter to transform the Data to a UIImage for example?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04673H2H8C\u003e asked\n\u0026gt; For users who want to disable/enable CloudKit storage, is there a recommended way to allow this from within an App. This is specifically for users who may wish to keep their data on device (for privacy). - Thank you :)",
      "ts": "1666112788.299469",
      "thread_ts": "1666112788.299469",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 8,
      "latest_reply": "1666116246.752809",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "htgiZ",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04673H2H8C"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"For users who want to disable\\/enable CloudKit storage, is there a recommended way to allow this from within an App. This is specifically for users who may wish to keep their data on device (for privacy). - Thank you :)\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "2d8b0f83-7cd6-41e1-b7e6-00a466a923d2",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "No. Users can control their iCloud sync preference from Settings / System Settings for your application.\n\nYou can always create a persistent store without an `NSPersistentCloudKitContainerOptions` on the description, which will not sync, however `NSPersistentCloudKitContainer` enforces a strict binding of data in iCloud to a persistent store file. There is no way to tell it to keep the data around after the account disappears (which is what happens when you disable sync).",
          "ts": "1666112923.249759",
          "thread_ts": "1666112788.299469",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CnAw7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "No. Users can control their iCloud sync preference from Settings / System Settings for your application.\n\nYou can always create a persistent store without an "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainerOptions",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " on the description, which will not sync, however "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " enforces a strict binding of data in iCloud to a persistent store file. There is no way to tell it to keep the data around after the account disappears (which is what happens when you disable sync)."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f822f6bd-be1b-4d21-8b30-e4e3013adcae",
          "type": "message",
          "user": "U0478BJ4UPK",
          "text": "\u0026gt; Users can control their iCloud sync preference from Settings / System Settings for your application\nHow can they do this? I see no option in my app’s settings",
          "ts": "1666113059.804619",
          "thread_ts": "1666112788.299469",
          "edited": {
            "user": "U0478BJ4UPK",
            "ts": "1666113080.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "HD=",
              "elements": [
                {
                  "Type": "rich_text_quote",
                  "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Users can control their iCloud sync preference from Settings \\/ System Settings for your application\"}]}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "How can they do this? I see no option in my app’s settings"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "330abfe0-660a-48dd-8158-873218954975",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "It's in the iCloud settings",
          "ts": "1666113496.567419",
          "thread_ts": "1666112788.299469",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yKeU",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It's in the iCloud settings"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fee04c02-c11b-422c-89e7-73325f48caa3",
          "type": "message",
          "user": "U0478BJ4UPK",
          "text": "Ah. I wish it were in our app settings or somewhere else we could link to from in-app.",
          "ts": "1666113534.236469",
          "thread_ts": "1666112788.299469",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ZSu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ah. I wish it were in our app settings or somewhere else we could link to from in-app."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c13a87c2-8af2-4d23-b0e7-049aee3232f7",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Yeah, that’s worth a feedback report for settings.",
          "ts": "1666113578.262929",
          "thread_ts": "1666112788.299469",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "WvxJv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yeah, that’s worth a feedback report for settings."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "47bed76a-0835-4b1b-9a87-39c51c500990",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "It’s not clear to me if the iCloud Settings pane is linkable from your app",
          "ts": "1666113592.529089",
          "thread_ts": "1666112788.299469",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "QNAp",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It’s not clear to me if the iCloud Settings pane is linkable from your app"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c706f143-c139-4076-bdcd-3c92f93c9470",
          "type": "message",
          "user": "U04673H2H8C",
          "text": "Thanks Nick, I did have a good dig around, and couldn't find it so assumed it was a case of just doing it through Settings. The only other way I could think of was to either store it on CoreData (on device) and then swap to CloudKitController if they chose that.",
          "ts": "1666113834.237249",
          "thread_ts": "1666112788.299469",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "sLiCg",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks Nick, I did have a good dig around, and couldn't find it so assumed it was a case of just doing it through Settings. The only other way I could think of was to either store it on CoreData (on device) and then swap to CloudKitController if they chose that."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d650a4ae-a8c4-487a-a120-d47edc24b798",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "AppleID -\u0026gt; iCloud -\u0026gt; `Apps using iCloud`-\u0026gt; Show All -\u0026gt;",
          "ts": "1666116246.752809",
          "thread_ts": "1666112788.299469",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U04673H2H8C"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "hxd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "AppleID -\u003e iCloud -\u003e "
                    },
                    {
                      "type": "text",
                      "text": "Apps using iCloud",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "-\u003e Show All -\u003e"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045VKS3MTQ\u003e asked\n\u0026gt; What is the way to deal gracefully with errors in the container.loadPersistentStores closure? The Apple template has a fatalError, and spceifies it should not be used in production, but my users cannot really do anything with my app (a recipe manager) if my Core Data stack is not properly instantiated.",
      "ts": "1666112931.001349",
      "thread_ts": "1666112931.001349",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 6,
      "latest_reply": "1666113569.087729",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "lkd/a",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045VKS3MTQ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What is the way to deal gracefully with errors in the container.loadPersistentStores closure? The Apple template has a fatalError, and spceifies it should not be used in production, but my users cannot really do anything with my app (a recipe manager) if my Core Data stack is not properly instantiated.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "1173b9f2-dea3-41e0-ab58-460bda6ac6fe",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "If the app is unusable without the ability to persist locally, than an user experience that allows for recovery steps to get the app in a usable state again should replace the fatalError. An alternative, is to show UI to the user that there is a problem and a reset needs to occur.",
          "ts": "1666113049.637229",
          "thread_ts": "1666112931.001349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "BtrH",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If the app is unusable without the ability to persist locally, than an user experience that allows for recovery steps to get the app in a usable state again should replace the fatalError. An alternative, is to show UI to the user that there is a problem and a reset needs to occur."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fada8cc0-80dc-43ce-ab64-4ae5b3cf9c67",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Our app template can't make a good UI for your app, and that's pretty much what needs to happen here",
          "ts": "1666113534.849989",
          "thread_ts": "1666112931.001349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6pPj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Our app template can't make a good UI for your app, and that's pretty much what needs to happen here"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "66430b4e-c9ec-4ab7-a73e-388e8b2d450e",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "the most common issues are:",
          "ts": "1666113549.176789",
          "thread_ts": "1666112931.001349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2kDfj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "the most common issues are:"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d4501d59-59f5-4a85-ab12-2697b50b1fb6",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "(1) a schema migration you didn't test",
          "ts": "1666113555.529109",
          "thread_ts": "1666112931.001349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "KBd6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "(1) a schema migration you didn't test"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "bf2c64ed-d668-4ce2-b5cb-ccd6d7c10502",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "(2) the wrong file protection class",
          "ts": "1666113565.246609",
          "thread_ts": "1666112931.001349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "8hTH",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "(2) the wrong file protection class"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "df535792-0d15-432e-965a-1b29925ef3b5",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "(3) out of disk space",
          "ts": "1666113569.087729",
          "thread_ts": "1666112931.001349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "rrvLt",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "(3) out of disk space"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046S5LNEFJ\u003e asked\n\u0026gt; My question is about using Core Data with CloudKit. I have great success using NSPersistentCloudKitContainer to allow a user to sync data across devices but much less luck with sharing between users.\n\u0026gt; \n\u0026gt; I've looked at both of the related sample projects and I can get things going to the point where I can create new shares but any attempts to manage existing shares (i.e. add people, etc...) seems to consistently fail. I see cryptic messages in the console such as \"Error creating the CFMessagePort needed to communicate with PPT.\"\n\u0026gt; \n\u0026gt; If I say try to share with Messages, if a CKShare does not exist, it works - hooray! But if I share a second time and the CKShare already exists, it just spins in the compose sheet forever.\n\u0026gt; \n\u0026gt; This is with both UICloudSharingController and also using the newer ShareLink/CKShareTransferRepresentation version. Also seeing similar issues in the sample code.\n\u0026gt; \n\u0026gt; My question is - are there known issues with this setup? Anything special to keep in mind?",
      "ts": "1666112976.344069",
      "thread_ts": "1666112976.344069",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 4,
      "latest_reply": "1666285252.638129",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "zYnBj",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046S5LNEFJ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"My question is about using Core Data with CloudKit. I have great success using NSPersistentCloudKitContainer to allow a user to sync data across devices but much less luck with sharing between users.\\n\\nI've looked at both of the related sample projects and I can get things going to the point where I can create new shares but any attempts to manage existing shares (i.e. add people, etc...) seems to consistently fail. I see cryptic messages in the console such as \\\"Error creating the CFMessagePort needed to communicate with PPT.\\\"\\n\\nIf I say try to share with Messages, if a CKShare does not exist, it works - hooray! But if I share a second time and the CKShare already exists, it just spins in the compose sheet forever.\\n\\nThis is with both UICloudSharingController and also using the newer ShareLink\\/CKShareTransferRepresentation version. Also seeing similar issues in the sample code.\\n\\nMy question is - are there known issues with this setup? Anything special to keep in mind?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "128e6de5-d046-40e7-8c8f-89e35949edb9",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "These issues should be reported. Please file feedback reports with a sysdiagnose and the store files from the affected devices.",
          "ts": "1666113014.588359",
          "thread_ts": "1666112976.344069",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5Qj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "These issues should be reported. Please file feedback reports with a sysdiagnose and the store files from the affected devices."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f4b6cced-e140-45f3-854e-1f36311aaa02",
          "type": "message",
          "user": "U04625ZF30T",
          "text": "\u003c@U046S5LNEFJ\u003e You’re not alone. We’ve also had a lot of trouble with CKShare and NSPersistentCloudKitContainer.\n\nFor example sharing a URL-instance from a struct that conforms to `Transferable` doesn’t work at all. The ShareLink just presents an empty pop-up :sweat_smile:",
          "ts": "1666113574.117729",
          "thread_ts": "1666112976.344069",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "QAZPx",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U046S5LNEFJ"
                    },
                    {
                      "type": "text",
                      "text": " You’re not alone. We’ve also had a lot of trouble with CKShare and NSPersistentCloudKitContainer.\n\nFor example sharing a URL-instance from a struct that conforms to "
                    },
                    {
                      "type": "text",
                      "text": "Transferable",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " doesn’t work at all. The ShareLink just presents an empty pop-up "
                    },
                    {
                      "type": "emoji",
                      "name": "sweat_smile",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "cfa97df1-e33f-40d5-8dc8-57a4b2744a9b",
          "type": "message",
          "user": "U046S5LNEFJ",
          "text": "Thanks. I will see about compiling a detailed report - I have a reproducible test case.",
          "ts": "1666115064.610899",
          "thread_ts": "1666112976.344069",
          "edited": {
            "user": "U046S5LNEFJ",
            "ts": "1666115092.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ujK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks. I will see about compiling a detailed report - I have a reproducible test case."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9940a186-2e56-4835-b68a-fa60a45aca5c",
          "type": "message",
          "user": "U046S5LNEFJ",
          "text": "I am traveling this week but did start a Feedback with sysdiagnose related to this: FB11672204",
          "ts": "1666285252.638129",
          "thread_ts": "1666112976.344069",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "NqEn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I am traveling this week but did start a Feedback with sysdiagnose related to this: FB11672204"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04673H2H8C\u003e asked\n\u0026gt; Sorry if I am a little early, but hopefully thats ok. Is there any recommended way to deal with audio file or image file storage when using Core Data in-conjunction with CloudKit. I understand that for larger data it is best to store it outside of CoreData itself. -Thanks :)",
      "ts": "1666113088.329429",
      "thread_ts": "1666113088.329429",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666120460.708889",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "JuXI9",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04673H2H8C"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Sorry if I am a little early, but hopefully thats ok. Is there any recommended way to deal with audio file or image file storage when using Core Data in-conjunction with CloudKit. I understand that for larger data it is best to store it outside of CoreData itself. -Thanks :)\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "62429d46-6d28-4c96-866e-c99ef2a78111",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "That kind of depends on their size.\n\n`NSBinaryDataAttributeType` attributes will scale pretty far with `allowsExternalBinaryStorage` set. Beyond say 100mb though you’ll want to consider managing the file data yourself. Today clients keep a CKAsset record on the side for really large things, with a foreign key in their `NSPersistentCloudKitContainer` synced objects so that they can look that up. That approach scales to limit(device storage) and allows for on-demand downloads.\n\nIf that’s your use case you should also file a feature request for `NSPersistentCloudKitContainer` to make that easier, with some notes about your intended user flow and dataset size.",
          "ts": "1666113223.794159",
          "thread_ts": "1666113088.329429",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 4,
              "users": [
                "U04673H2H8C",
                "U046J102475",
                "U046JDG2Q73",
                "U045QE0SBD5"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "kMSB=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That kind of depends on their size.\n\n"
                    },
                    {
                      "type": "text",
                      "text": "NSBinaryDataAttributeType",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " attributes will scale pretty far with "
                    },
                    {
                      "type": "text",
                      "text": "allowsExternalBinaryStorage",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " set. Beyond say 100mb though you’ll want to consider managing the file data yourself. Today clients keep a CKAsset record on the side for really large things, with a foreign key in their "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " synced objects so that they can look that up. That approach scales to limit(device storage) and allows for on-demand downloads.\n\nIf that’s your use case you should also file a feature request for "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to make that easier, with some notes about your intended user flow and dataset size."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2a829a4f-e7e7-4de2-a17c-ffbfdd974188",
          "type": "message",
          "user": "U04673H2H8C",
          "text": "Thanks Nick, thats exactly the information I was looking for.",
          "ts": "1666113503.334529",
          "thread_ts": "1666113088.329429",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U04673H2H8C"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mjE+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks Nick, thats exactly the information I was looking for."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f709f324-0be8-4365-bd7f-bdbac305845e",
          "type": "message",
          "user": "U046J102475",
          "text": "Thanks!",
          "ts": "1666120460.708889",
          "thread_ts": "1666113088.329429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CNjI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0460BDJDL5\u003e asked\n\u0026gt; Is there a maximum recommended size for CloudKit synced core data bases? I'm trying it in an app that has some entities with 30,000+ records and they never manage to sync from dev Mac to dev iPhone.",
      "ts": "1666113256.817869",
      "thread_ts": "1666113256.817869",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 4,
      "latest_reply": "1666285503.454949",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "=uz1",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0460BDJDL5"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is there a maximum recommended size for CloudKit synced core data bases? I'm trying it in an app that has some entities with 30,000+ records and they never manage to sync from dev Mac to dev iPhone.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "cf06ee17-e187-4b04-bc98-e322bd097ce5",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "It’s difficult to say for certain without more details. That raw number of records isn’t really interesting. `NSPersistentCloudKitContainer` and CloudKit can support at least two orders of magnitude more than that within some constraints (like on device storage).",
          "ts": "1666113309.793249",
          "thread_ts": "1666113256.817869",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "TGQj2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It’s difficult to say for certain without more details. That raw number of records isn’t really interesting. "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and CloudKit can support at least two orders of magnitude more than that within some constraints (like on device storage)."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8232ec26-e04b-4b9c-a1c3-bb16670bcb34",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Do you have a feedback report and sysdiagnose for this?",
          "ts": "1666113330.415099",
          "thread_ts": "1666113256.817869",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0460BDJDL5"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "d94Q",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Do you have a feedback report and sysdiagnose for this?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "27f04897-b5f3-4386-bb4e-9f69f6b6a5a9",
          "type": "message",
          "user": "U0460BDJDL5",
          "text": "Now I do! -\u0026gt; FB11704784 (Core Data sync via CloudKit never finishes)",
          "ts": "1666285362.679059",
          "thread_ts": "1666113256.817869",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jTXj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Now I do! -\u003e FB11704784 (Core Data sync via CloudKit never finishes)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f7344036-4593-4c23-844e-8be63408bdb3",
          "type": "message",
          "user": "U0460BDJDL5",
          "text": "There are a ton of “Failed to find matching objectIDs for…” in the Xcode console output",
          "ts": "1666285503.454949",
          "thread_ts": "1666113256.817869",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "VFr1c",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There are a ton of “Failed to find matching objectIDs for…” in the Xcode console output"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046W0RCYCS\u003e asked\n\u0026gt; Imagine a CoreData `NSPersistentCloudKitContainer` that is working to synchronize my app data for the user across all their devices.  Now imagine that one of the devices has a glitch of some sort that requires that device's data (and only that device's data) to be reset from good data in the cloud.  Is there any way in my app to reset the local cached copy of the data in order to pretend it's a new device and have CoreData just grab all the data from the cloud again?",
      "ts": "1666113392.521769",
      "thread_ts": "1666113392.521769",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666123355.587329",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "cQNL2",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046W0RCYCS"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Imagine a CoreData `NSPersistentCloudKitContainer` that is working to synchronize my app data for the user across all their devices.  Now imagine that one of the devices has a glitch of some sort that requires that device's data (and only that device's data) to be reset from good data in the cloud.  Is there any way in my app to reset the local cached copy of the data in order to pretend it's a new device and have CoreData just grab all the data from the cloud again?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "020f8c26-5e82-4124-b624-b2bf2ea0ff89",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "You seek:\n\n```/* delete or truncate the target persistent store in accordance with the store class's requirements.  It is important to pass similar options as addPersistentStoreWithType: ... SQLite stores will honor file locks, journal files, journaling modes, and other intricacies.  It is not possible to unlink a database file safely out from underneath another thread or process, so this API performs a truncation.  Other stores will default to using NSFileManager.\n */\n- (BOOL)destroyPersistentStoreAtURL:(NSURL *)url withType:(NSString *)storeType options:(nullable NSDictionary *)options error:(NSError**)error API_AVAILABLE(macosx(10.11),ios(9.0));```",
          "ts": "1666113402.370659",
          "thread_ts": "1666113392.521769",
          "edited": {
            "user": "U044D7NJJ3X",
            "ts": "1666113429.000000"
          },
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U046W0RCYCS"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "fRwn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You seek:\n\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"\\/* delete or truncate the target persistent store in accordance with the store class's requirements.  It is important to pass similar options as addPersistentStoreWithType: ... SQLite stores will honor file locks, journal files, journaling modes, and other intricacies.  It is not possible to unlink a database file safely out from underneath another thread or process, so this API performs a truncation.  Other stores will default to using NSFileManager.\\n *\\/\\n- (BOOL)destroyPersistentStoreAtURL:(NSURL *)url withType:(NSString *)storeType options:(nullable NSDictionary *)options error:(NSError**)error API_AVAILABLE(macosx(10.11),ios(9.0));\"}],\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7bc2daf8-ae46-440b-b7c2-0dd5435cf7ee",
          "type": "message",
          "user": "U046W0RCYCS",
          "text": "This is working great.  Thanks very much for the help!",
          "ts": "1666123355.587329",
          "thread_ts": "1666113392.521769",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "J82wE",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This is working great.  Thanks very much for the help!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045VN0MS3Y\u003e asked\n\u0026gt; What is the recommended way to store a Swift `enum` (with or without an associated value) in Core Data?",
      "ts": "1666113464.312639",
      "thread_ts": "1666113464.312639",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666114366.587789",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "BpE",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045VN0MS3Y"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What is the recommended way to store a Swift `enum` (with or without an associated value) in Core Data?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "af1e3b6a-a4c1-45a1-a1f1-ce53b842ab64",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "A possible solution is to store the Enum as a Transformable in order to handle the Associated Value cases. In the non-AssociatedValue the rawValue can be stored in one of the supported CoreData Attribute Types.",
          "ts": "1666113474.668179",
          "thread_ts": "1666113464.312639",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "eakC",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A possible solution is to store the Enum as a Transformable in order to handle the Associated Value cases. In the non-AssociatedValue the rawValue can be stored in one of the supported CoreData Attribute Types."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "11b9e033-ea69-4ef5-a479-55ef33873aea",
          "type": "message",
          "user": "U045VN0MS3Y",
          "text": "Thank you Rishi! I imagine it should be something like the following (assuming we have an `enum BookGradient`)?\n```@NSManaged fileprivate var gradientRawValue: String\n    var gradient: BookGradient {\n        get {\n            BookGradient(rawValue: gradientRawValue) ?? .beach\n        }\n        set {\n            gradientRawValue = newValue.rawValue\n        }\n    }```",
          "ts": "1666113956.639509",
          "thread_ts": "1666113464.312639",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YGOAe",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you Rishi! I imagine it should be something like the following (assuming we have an "
                    },
                    {
                      "type": "text",
                      "text": "enum BookGradient",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ")?\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"@NSManaged fileprivate var gradientRawValue: String\\n    var gradient: BookGradient {\\n        get {\\n            BookGradient(rawValue: gradientRawValue) ?? .beach\\n        }\\n        set {\\n            gradientRawValue = newValue.rawValue\\n        }\\n    }\"}],\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b1f2d2c1-2fb5-4eda-8d7f-4b65767522e5",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "Seems reasonable",
          "ts": "1666114366.587789",
          "thread_ts": "1666113464.312639",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U045VN0MS3Y"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0+YM1",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Seems reasonable"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045NGKNMPH\u003e asked\n\u0026gt; When using NSPersistentCloudKitContainer, is it possible to determine the current sync status or manually trigger a sync?  I would like to be able to show a progress view in the UI, so users launching the app for the first time can see that their data is being downloaded from the cloud, in case this does not happen instantly.  Thanks! :blush:",
      "ts": "1666113477.361919",
      "thread_ts": "1666113477.361919",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 5,
      "latest_reply": "1666113916.907649",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "uUc1u",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045NGKNMPH"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When using NSPersistentCloudKitContainer, is it possible to determine the current sync status or manually trigger a sync?  I would like to be able to show a progress view in the UI, so users launching the app for the first time can see that their data is being downloaded from the cloud, in case this does not happen instantly.  Thanks! \"},{\"type\":\"emoji\",\"name\":\"blush\",\"unicode\":\"1f60a\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "2720b6ee-611e-4bb8-95cb-b2d3e6bbaac2",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "\u003chttps://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainerevent?language=objc\u003e",
          "ts": "1666113481.942009",
          "thread_ts": "1666113477.361919",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=iXAL",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/nspersistentcloudkitcontainerevent?language=objc",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1b7cabb0-4c1a-48cc-93bc-e910b5c76d46",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "`NSPersistentCloudKitContainerEvent` fills this role. You can bind a notification listener to event updates and display status as desired.",
          "ts": "1666113505.316949",
          "thread_ts": "1666113477.361919",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U045NGKNMPH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "QoZ7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainerEvent",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " fills this role. You can bind a notification listener to event updates and display status as desired."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c6391109-5d49-462c-9f59-b952b4f5d5a3",
          "type": "message",
          "user": "U0478BJ4UPK",
          "text": "\u003c@U044D7NJJ3X\u003e That works for status. No way to trigger a sync though, right?",
          "ts": "1666113607.587689",
          "thread_ts": "1666113477.361919",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "eh4uq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U044D7NJJ3X"
                    },
                    {
                      "type": "text",
                      "text": " That works for status. No way to trigger a sync though, right?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "46e4cc03-a91f-49c4-b660-639141c3393b",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "No, if you think we should be syncing at a different cadence you can file feedback reports with specific use cases for us to investigate.",
          "ts": "1666113668.489209",
          "thread_ts": "1666113477.361919",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+ZLDs",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "No, if you think we should be syncing at a different cadence you can file feedback reports with specific use cases for us to investigate."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "51936860-2795-40e4-800c-06d9597af601",
          "type": "message",
          "user": "U045VK8EENS",
          "text": "by the way, there is \u003chttps://github.com/ggruen/CloudKitSyncMonitor\u003e",
          "ts": "1666113916.907649",
          "thread_ts": "1666113477.361919",
          "attachments": [
            {
              "fallback": "GitHub: GitHub - ggruen/CloudKitSyncMonitor: Monitor current state of NSPersistentCloudKitContainer sync",
              "id": 1,
              "title": "GitHub - ggruen/CloudKitSyncMonitor: Monitor current state of NSPersistentCloudKitContainer sync",
              "title_link": "https://github.com/ggruen/CloudKitSyncMonitor",
              "text": "Monitor current state of NSPersistentCloudKitContainer sync - GitHub - ggruen/CloudKitSyncMonitor: Monitor current state of NSPersistentCloudKitContainer sync",
              "image_url": "https://opengraph.githubassets.com/5f8a7bfcf5a1b73eb57972d543cef2623edb7bcdc57b83745a2fdf6ecabc27db/ggruen/CloudKitSyncMonitor",
              "service_name": "GitHub",
              "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
              "from_url": "https://github.com/ggruen/CloudKitSyncMonitor",
              "original_url": "https://github.com/ggruen/CloudKitSyncMonitor",
              "blocks": null
            }
          ],
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U045QE0SBD5"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Ctf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "by the way, there is "
                    },
                    {
                      "type": "link",
                      "url": "https://github.com/ggruen/CloudKitSyncMonitor",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0466QQJSJY\u003e asked\n\u0026gt; When do we need to add a new CoreData model version? I see conflicting advice about if it is needed for lightweight migrations or not, is it just safer to add a new one for every release?",
      "ts": "1666113572.198079",
      "thread_ts": "1666113572.198079",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666113674.329839",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "XENvJ",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0466QQJSJY"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When do we need to add a new CoreData model version? I see conflicting advice about if it is needed for lightweight migrations or not, is it just safer to add a new one for every release?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "2dad22cf-c93d-4f42-bdc1-99bd3f93b122",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "It is safer to add a new Managed Object Model with every release, but if your changes from release to release are _*well tested*_ to show that only Lightweight Inferred Migration is needed, than a single Managed Object Model should suffice.",
          "ts": "1666113596.096119",
          "thread_ts": "1666113572.198079",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jsBl",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It is safer to add a new Managed Object Model with every release, but if your changes from release to release are "
                    },
                    {
                      "type": "text",
                      "text": "well tested",
                      "style": {
                        "bold": true,
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to show that only Lightweight Inferred Migration is needed, than a single Managed Object Model should suffice."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "dedc3535-8edf-4bf3-9f29-e69c41a61814",
          "type": "message",
          "user": "U0466QQJSJY",
          "text": "oh if only everything was well tested enough :troll:",
          "ts": "1666113671.645239",
          "thread_ts": "1666113572.198079",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9Xy",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "oh if only everything was well tested enough "
                    },
                    {
                      "type": "emoji",
                      "name": "troll",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "70e9de58-1eb2-450d-9ba3-b34c9b3d0ce3",
          "type": "message",
          "user": "U0466QQJSJY",
          "text": "thanks :slightly_smiling_face:",
          "ts": "1666113674.329839",
          "thread_ts": "1666113572.198079",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "LV0P",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "thanks "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0462GLRHU3\u003e asked\n\u0026gt; Any best practices or recommendations for utilizing Core Data in a SwiftUI app? Or is it recommended to stick with UIKit if using Core Data extensively.\n\u0026gt; Like, is there a SwiftUI counterpart for FetchedResultsController?",
      "ts": "1666113605.973549",
      "thread_ts": "1666113605.973549",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666113657.413739",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Vxs",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0462GLRHU3"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Any best practices or recommendations for utilizing Core Data in a SwiftUI app? Or is it recommended to stick with UIKit if using Core Data extensively.\\nLike, is there a SwiftUI counterpart for FetchedResultsController?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "22924551-83db-4af6-b5fe-effb9d757536",
          "type": "message",
          "user": "U044G3TBMGB",
          "text": "Utilizing CoreData in a SwiftUI is fine. You can configure your fetched results controller using @FetchRequest (\u003chttps://developer.apple.com/documentation/swiftui/fetchrequest\u003e) to help fetch and retrieve results from the store. Here is a sample app to view best practices - \u003chttps://developer.apple.com/documentation/coredata/loading_and_displaying_a_large_data_feed\u003e and a handy WWDC21 video to go along with it \u003chttps://developer.apple.com/videos/play/wwdc2021/10017/\u003e",
          "ts": "1666113621.021609",
          "thread_ts": "1666113605.973549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "kdXDu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Utilizing CoreData in a SwiftUI is fine. You can configure your fetched results controller using @FetchRequest ("
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/fetchrequest",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": ") to help fetch and retrieve results from the store. Here is a sample app to view best practices - "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/loading_and_displaying_a_large_data_feed",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": " and a handy WWDC21 video to go along with it "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/videos/play/wwdc2021/10017/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ca147fd8-9579-4461-a5f3-fff40350d604",
          "type": "message",
          "user": "U0462GLRHU3",
          "text": ":gratitude-thank-you:",
          "ts": "1666113657.413739",
          "thread_ts": "1666113605.973549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jrUyI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "emoji",
                      "name": "gratitude-thank-you",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045VK8EENS\u003e asked\n\u0026gt; When working with CoreData with CloudKit: if I edit stores in the Core Data stack (e.g. add a new store for shared objects), without touching the Entities and their attributes, should I run initializeCloudKitSchema()?",
      "ts": "1666113710.099939",
      "thread_ts": "1666113710.099939",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666113757.058039",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "VOE",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045VK8EENS"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When working with CoreData with CloudKit: if I edit stores in the Core Data stack (e.g. add a new store for shared objects), without touching the Entities and their attributes, should I run initializeCloudKitSchema()?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "211e287e-0f5f-40d5-8178-c0d8c747c05b",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "`initializeCloudKitSchema` is only required for changes to your managed object model. Once it has been run against a CKContainer all databases in that container will have the same schema (Public / Private / Shared).",
          "ts": "1666113757.058039",
          "thread_ts": "1666113710.099939",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CbV",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "initializeCloudKitSchema",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " is only required for changes to your managed object model. Once it has been run against a CKContainer all databases in that container will have the same schema (Public / Private / Shared)."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045NKLC6SK\u003e asked\n\u0026gt; What are the best practices on debugging multithreading and core data access errors/crashes? I have been using `-com.apple.CoreData.Logging.stderr 1` and `-com.apple.CoreData.ConcurrencyDebug 1` arguments to help. Any other tips?",
      "ts": "1666113718.663739",
      "thread_ts": "1666113718.663739",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666113844.811069",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "lnmEs",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045NKLC6SK"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What are the best practices on debugging multithreading and core data access errors\\/crashes? I have been using `-com.apple.CoreData.Logging.stderr 1` and `-com.apple.CoreData.ConcurrencyDebug 1` arguments to help. Any other tips?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "f95fce65-1722-43a2-8f72-88aa91066572",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "In addition to:\n\u0026gt; com.apple.CoreData.ConcurrencyDebug\nASAN will help catch memory bugs introduced by concurrency issues as well",
          "ts": "1666113756.323259",
          "thread_ts": "1666113718.663739",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Q3Je",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In addition to:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_quote",
                  "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"com.apple.CoreData.ConcurrencyDebug\"}]}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "\nASAN will help catch memory bugs introduced by concurrency issues as well"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "29b86632-3d46-4d04-8a96-623f2844d634",
          "type": "message",
          "user": "U045NKLC6SK",
          "text": "awesome, thanks :slightly_smiling_face:",
          "ts": "1666113844.811069",
          "thread_ts": "1666113718.663739",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Opmz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "awesome, thanks "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045NGKNMPH\u003e asked\n\u0026gt; When committing changes to the store via an app extension (e.g., SiriKit/AppIntents), what is the best way to guarantee changes are instantly reflected in the main app which may already be running (and vice versa)?  \n\u0026gt; \n\u0026gt; Is it safe/recommended to use NSPersistentContainer's viewContext within both app and extension at the same time or is this a job for background contexts?  In my setup, the store is saved to an app group directory to allow access from both app and extension, so I think each process will utilise its own unique container to access this.  Thank you very much!",
      "ts": "1666113806.470319",
      "thread_ts": "1666113806.470319",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666113812.324329",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "1v72",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045NGKNMPH"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When committing changes to the store via an app extension (e.g., SiriKit\\/AppIntents), what is the best way to guarantee changes are instantly reflected in the main app which may already be running (and vice versa)?  \\n\\nIs it safe\\/recommended to use NSPersistentContainer's viewContext within both app and extension at the same time or is this a job for background contexts?  In my setup, the store is saved to an app group directory to allow access from both app and extension, so I think each process will utilise its own unique container to access this.  Thank you very much!\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "c093f4f9-7e82-489c-b463-65aa215728df",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "This would be achievable by setting up your NSPersistentStoreDescription with the Remote Changes options noted in this article:\n\n\u003chttps://developer.apple.com/documentation/coredata/consuming_relevant_store_changes\u003e",
          "ts": "1666113812.324329",
          "thread_ts": "1666113806.470319",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U045NGKNMPH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "kZy6w",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This would be achievable by setting up your NSPersistentStoreDescription with the Remote Changes options noted in this article:\n\n"
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/consuming_relevant_store_changes",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045W72PSLE\u003e asked\n\u0026gt; How can I create a multi level core data archive, for example like for the notes app whit folders and note inside them?",
      "ts": "1666113811.609379",
      "thread_ts": "1666113811.609379",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 6,
      "latest_reply": "1666114536.476609",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "6X3t6",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045W72PSLE"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How can I create a multi level core data archive, for example like for the notes app whit folders and note inside them?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "1b92e4b4-56ec-40af-86f5-5717f67f6e6a",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "What does “archive’ mean in this context? Are you referring to an NSManagedObjectModel or a structure on the file system (the latter isn’t really a Core Data thing).",
          "ts": "1666113847.370119",
          "thread_ts": "1666113811.609379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2cv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "What does “archive’ mean in this context? Are you referring to an NSManagedObjectModel or a structure on the file system (the latter isn’t really a Core Data thing)."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ED15A3BB-FDDA-4D42-AC2E-508335263761",
          "type": "message",
          "user": "U045W72PSLE",
          "text": "yes with NSManagedObjectModel",
          "ts": "1666114286.777699",
          "thread_ts": "1666113811.609379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "pOf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "yes with NSManagedObjectModel"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4b035496-9780-437c-9987-bf07b084524f",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Most clients use a to-many relationship from Folder -\u0026gt; Note.",
          "ts": "1666114370.609659",
          "thread_ts": "1666113811.609379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "sNkS",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Most clients use a to-many relationship from Folder -\u003e Note."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8d600b6f-3609-49e7-8e24-2729730a2b4c",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Other applications prefer to do this with less strictly modeled collections, i.e. tags, so a note can have a many-to-many relationship to its tags.",
          "ts": "1666114409.797769",
          "thread_ts": "1666113811.609379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "BTn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Other applications prefer to do this with less strictly modeled collections, i.e. tags, so a note can have a many-to-many relationship to its tags."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "004542FF-8316-47B1-A594-9DB1B164BC9B",
          "type": "message",
          "user": "U045W72PSLE",
          "text": "so I can simply create for example some notes with the folder name tags and group them according to the tags?",
          "ts": "1666114518.368609",
          "thread_ts": "1666113811.609379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "uQAK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "so I can simply create for example some notes with the folder name tags and group them according to the tags?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9b82aef3-49e9-4169-afa4-e302bb668728",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Sure?",
          "ts": "1666114536.476609",
          "thread_ts": "1666113811.609379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zMHK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Sure?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04703W70SU\u003e asked\n\u0026gt; Hi - I'm looking for an example of how to import a JSON file containing nested JSON objects into Core Data. All the Core Data examples I find only show single level JSON objects. Here's a sample from my JSON file.\n\u0026gt; \n\u0026gt; [\n\u0026gt;   {\n\u0026gt;     \"Product Family 1\": [\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9013-900\",\n\u0026gt;         \"orderable\": true,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       },\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9104-900\",\n\u0026gt;         \"orderable\": true,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       },\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9105-900\",\n\u0026gt;         \"orderable\": false,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       },\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9108-900\",\n\u0026gt;         \"orderable\": true,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       },\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9109-900\",\n\u0026gt;         \"orderable\": true,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       }\n\u0026gt;     ]\n\u0026gt;   },\n\u0026gt;   {\n\u0026gt;     \"Product Family 2\": [\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9113-900\",\n\u0026gt;         \"orderable\": true,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       },\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9114-900\",\n\u0026gt;         \"orderable\": true,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       },\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9115-900\",\n\u0026gt;         \"orderable\": false,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       },\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9116-900\",\n\u0026gt;         \"orderable\": true,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       },\n\u0026gt;       {\n\u0026gt;         \"partNumber\": \"160-9201-900\",\n\u0026gt;         \"orderable\": true,\n\u0026gt;         \"pnDescription\": \"Part Number Description\"\n\u0026gt;       }\n\u0026gt;     ]\n\u0026gt;   }\n\u0026gt; ]",
      "ts": "1666113873.865099",
      "thread_ts": "1666113873.865099",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666113883.170099",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "7OQ",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04703W70SU"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hi - I'm looking for an example of how to import a JSON file containing nested JSON objects into Core Data. All the Core Data examples I find only show single level JSON objects. Here's a sample from my JSON file.\\n\\n[\\n  {\\n    \\\"Product Family 1\\\": [\\n      {\\n        \\\"partNumber\\\": \\\"160-9013-900\\\",\\n        \\\"orderable\\\": true,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      },\\n      {\\n        \\\"partNumber\\\": \\\"160-9104-900\\\",\\n        \\\"orderable\\\": true,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      },\\n      {\\n        \\\"partNumber\\\": \\\"160-9105-900\\\",\\n        \\\"orderable\\\": false,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      },\\n      {\\n        \\\"partNumber\\\": \\\"160-9108-900\\\",\\n        \\\"orderable\\\": true,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      },\\n      {\\n        \\\"partNumber\\\": \\\"160-9109-900\\\",\\n        \\\"orderable\\\": true,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"Product Family 2\\\": [\\n      {\\n        \\\"partNumber\\\": \\\"160-9113-900\\\",\\n        \\\"orderable\\\": true,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      },\\n      {\\n        \\\"partNumber\\\": \\\"160-9114-900\\\",\\n        \\\"orderable\\\": true,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      },\\n      {\\n        \\\"partNumber\\\": \\\"160-9115-900\\\",\\n        \\\"orderable\\\": false,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      },\\n      {\\n        \\\"partNumber\\\": \\\"160-9116-900\\\",\\n        \\\"orderable\\\": true,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      },\\n      {\\n        \\\"partNumber\\\": \\\"160-9201-900\\\",\\n        \\\"orderable\\\": true,\\n        \\\"pnDescription\\\": \\\"Part Number Description\\\"\\n      }\\n    ]\\n  }\\n]\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "dae949c1-8a9a-443b-a612-65941b4b6c77",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "This is similar to the JSON feed used in the Earthquakes sample:\n\n\u003chttps://developer.apple.com/documentation/coredata/loading_and_displaying_a_large_data_feed\u003e\n\nShould be straight forward to use NSBatchInsert with Dictionaries of Product Family 1 and Product Family 2 in the same fashion as Quakes are created in the above sample.",
          "ts": "1666113883.170099",
          "thread_ts": "1666113873.865099",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "MWq6T",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This is similar to the JSON feed used in the Earthquakes sample:\n\n"
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/loading_and_displaying_a_large_data_feed",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": "\n\nShould be straight forward to use NSBatchInsert with Dictionaries of Product Family 1 and Product Family 2 in the same fashion as Quakes are created in the above sample."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04640E3KAP\u003e asked\n\u0026gt; In the case of using CloudKit's core data, NSPersistentCloudContainer will receive instructions to delete local data when a user logs out of their iCloud account on their device. Is this intentional?",
      "ts": "1666113894.944889",
      "thread_ts": "1666113894.944889",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666113915.823019",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "GS5",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04640E3KAP"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"In the case of using CloudKit's core data, NSPersistentCloudContainer will receive instructions to delete local data when a user logs out of their iCloud account on their device. Is this intentional?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "26ceaa3f-5a46-4000-9dfc-8582f06d679e",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Yes. `NSPersistentCloudKitContainer` enforces a strict binding between the iCloud account and the data in the store.",
          "ts": "1666113915.823019",
          "thread_ts": "1666113894.944889",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "rzd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes. "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " enforces a strict binding between the iCloud account and the data in the store."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045MM9KJ9M\u003e asked\n\u0026gt; We encountered a series of crashes, because we start up the same CoreData stack in a widget process and in an app process. Normally this works fine, but once the store needs a migration (we do lightweight migrations)  there is some kind of race condition. Either the app or the widget process crashes. After one single crash the migration seems for work and no following crashes happen. \n\u0026gt; \n\u0026gt; Is there a good solution how to workaround those crashes? We are not sure if this is correctly handled by CoreData or if we need to detect migrations and work around those crashes.",
      "ts": "1666113950.593499",
      "thread_ts": "1666113950.593499",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666119510.272799",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "DXP5",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045MM9KJ9M"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"We encountered a series of crashes, because we start up the same CoreData stack in a widget process and in an app process. Normally this works fine, but once the store needs a migration (we do lightweight migrations)  there is some kind of race condition. Either the app or the widget process crashes. After one single crash the migration seems for work and no following crashes happen. \\n\\nIs there a good solution how to workaround those crashes? We are not sure if this is correctly handled by CoreData or if we need to detect migrations and work around those crashes.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "03242bac-8372-4c38-9848-b33e580af25b",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "The widget should not be given the ability to perform a Lightweight/Inferred Migration.\n\nOnly the Application should do that. If the Widget encounters a CoreData Store that is in need of a migration, the Widget should redirect the user to launch the Application.",
          "ts": "1666113973.799109",
          "thread_ts": "1666113950.593499",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "100",
              "count": 1,
              "users": [
                "U0463PJJB34"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YFmMs",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The widget should not be given the ability to perform a Lightweight/Inferred Migration.\n\nOnly the Application should do that. If the Widget encounters a CoreData Store that is in need of a migration, the Widget should redirect the user to launch the Application."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6e115d22-4046-4ea7-afb4-22bc104a65f2",
          "type": "message",
          "user": "U045MM9KJ9M",
          "text": "Thanks for the answer. We will do that :clap:",
          "ts": "1666115518.806329",
          "thread_ts": "1666113950.593499",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Vc=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks for the answer. We will do that "
                    },
                    {
                      "type": "emoji",
                      "name": "clap",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0d3c4a8a-9820-486a-98d8-48531f0e8f38",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "As a practical matter, the widget will never get enough resources from the OS to complete the migration",
          "ts": "1666119510.272799",
          "thread_ts": "1666113950.593499",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U045QE0SBD5"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "SUY3",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "As a practical matter, the widget will never get enough resources from the OS to complete the migration"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04640E3KAP\u003e asked\n\u0026gt; Is it possible to use @unchecked Sendable for annotation when ensuring that the NSManagedObjectID is not a temporary state",
      "ts": "1666113994.914959",
      "thread_ts": "1666113994.914959",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666114013.149399",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "rVA+l",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04640E3KAP"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is it possible to use @unchecked Sendable for annotation when ensuring that the NSManagedObjectID is not a temporary state\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "1604a380-bdc1-4fe9-959e-48b31b927834",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "It should be.  Please file a bug report",
          "ts": "1666114013.149399",
          "thread_ts": "1666113994.914959",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6hN",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It should be.  Please file a bug report"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464MDV42G\u003e asked\n\u0026gt; How can I seed initial data into my Core Data model?  My Core Data model (Entity) has a few attributes. I have an initial array of model elements that I want to seed. Can I do this with the init() function in Persistence.swift (e.g. Core Data stack code)? Later, I will want the user to be able to edit this initially seeded model Data. ",
      "ts": "1666114057.825549",
      "thread_ts": "1666114057.825549",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 11,
      "latest_reply": "1666120801.711019",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "WJI1",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464MDV42G"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How can I seed initial data into my Core Data model?  My Core Data model (Entity) has a few attributes. I have an initial array of model elements that I want to seed. Can I do this with the init() function in Persistence.swift (e.g. Core Data stack code)? Later, I will want the user to be able to edit this initially seeded model Data. \"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "13d21aaf-325a-4f3a-a1d3-caf076a2a06d",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "There are two approaches:\n1. Provide a default store that you bundle with your Application and on the First Launch, move the bundle resource into place and open the store.\n2. After the NSPersistentContainer is done loading NSPersistentStoreDescriptions, check the NSPersistentStore's metadata for a Sentinel Key that indicates you prepopulated the Store. If that key is missing, seed the store, otherwise you have already seeded the store in a prior launch.",
          "ts": "1666114102.369169",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Axoe",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There are two approaches:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"Provide a default store that you bundle with your Application and on the First Launch, move the bundle resource into place and open the store.\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"After the NSPersistentContainer is done loading NSPersistentStoreDescriptions, check the NSPersistentStore's metadata for a Sentinel Key that indicates you prepopulated the Store. If that key is missing, seed the store, otherwise you have already seeded the store in a prior launch.\"}]}],\"style\":\"ordered\",\"indent\":0,\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0EACAECD-FB27-425E-A829-7E4D34E81DE6",
          "type": "message",
          "user": "U0464MDV42G",
          "text": "Can’t I just add the data as part of the init() function in the Persistence.swift file?",
          "ts": "1666114223.840129",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FIGeB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Can’t"
                    },
                    {
                      "type": "text",
                      "text": " I just add the data as part of the init() function in the Persistence.swift file?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f8f6dffb-6626-42fd-9230-07a00410d492",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "If you always add the data in init() it would duplicate the default data on every App launch",
          "ts": "1666114252.260769",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Jbcd7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you always add the data in init() it would duplicate the default data on every App launch"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "92DB9B2D-1EB6-42DD-9461-BA26BE54EF3A",
          "type": "message",
          "user": "U0464MDV42G",
          "text": "Understand, but I could add a check if, so it doesn’t reload each time, correct? I already do something similar using the @AppStorage data persistent approach I currently have in my app and it seems to work fine.",
          "ts": "1666114477.979849",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xKwc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Understand, but I could add a check if, so it doesn’t reload each time, correct? I already do something similar using the @AppStorage data persistent approach I currently have in my app and it seems to work fine."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0f8ba7ed-b592-478a-8ef7-c3b8cfabde39",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "You could do a check, like noted in #2",
          "ts": "1666114592.838519",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "1emuj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You could do a check, like noted in #2"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "62DA6C09-9F46-439A-A819-3C58598DC636",
          "type": "message",
          "user": "U0464MDV42G",
          "text": "Ok, I’ll have to read up on #2 but if the check fails (i.e. key is missing) how do I seed the initial data? Not #1 since you said that was a different approach. ",
          "ts": "1666114783.254119",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "67USr",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok, "
                    },
                    {
                      "type": "text",
                      "text": "I’ll"
                    },
                    {
                      "type": "text",
                      "text": " have to read up on #2 but if the check fails (i.e. key is missing) how do I seed the initial data? Not #1 since you said that was a different approach"
                    },
                    {
                      "type": "text",
                      "text": "."
                    },
                    {
                      "type": "text",
                      "text": " "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6c666048-6b9b-4639-ad59-a59e532f9989",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "Depending on your data, you could issue an NSBatchInsertRequest or hydrate the default data and save to the new store.  Then set the metadata key.\n\nYou could also do #1, but it would replace the store you have in #2, so ensure you remove the Store, replace it with the bundled store and then re-open the store.",
          "ts": "1666114886.933609",
          "thread_ts": "1666114057.825549",
          "edited": {
            "user": "U044UR3FUPK",
            "ts": "1666114903.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "tVc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Depending on your data, you could issue an NSBatchInsertRequest or hydrate the default data and save to the new store.  Then set the metadata key.\n\nYou could also do #1, but it would replace the store you have in #2, so ensure you remove the Store, replace it with the bundled store and then re-open the store."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "F998B8B2-1A49-4F04-96AF-A27BC7131A63",
          "type": "message",
          "user": "U0464MDV42G",
          "text": "Ok. Not familiar with much of what your saying, but I’ll do more research. ",
          "ts": "1666115020.921379",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "TUCcY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok"
                    },
                    {
                      "type": "text",
                      "text": "."
                    },
                    {
                      "type": "text",
                      "text": " Not familiar with much of what your saying, but "
                    },
                    {
                      "type": "text",
                      "text": "I’ll"
                    },
                    {
                      "type": "text",
                      "text": " do more research"
                    },
                    {
                      "type": "text",
                      "text": "."
                    },
                    {
                      "type": "text",
                      "text": " "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "51caffd1-0097-4628-9027-adedd6a7cf86",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "How to check the Metadata of NSPersistentStore - \u003chttps://developer.apple.com/documentation/coredata/nspersistentstore/1506741-metadataforpersistentstore\u003e\n\nSample App for NSBatchInsertRequest -\n\u003chttps://developer.apple.com/documentation/coredata/loading_and_displaying_a_large_data_feed\u003e",
          "ts": "1666115959.690369",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "C51Rk",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "How to check the Metadata of NSPersistentStore - "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/nspersistentstore/1506741-metadataforpersistentstore",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": "\n\nSample App for NSBatchInsertRequest -\n"
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/loading_and_displaying_a_large_data_feed",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "305891aa-3361-404a-8910-59030a72aad6",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "Those two links should help with your research and get you started",
          "ts": "1666115971.063309",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "cZJ1a",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Those two links should help with your research and get you started"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "F273EA4F-C154-4086-A88A-5E8216717BD6",
          "type": "message",
          "user": "U0464MDV42G",
          "text": "Thank you",
          "ts": "1666120801.711019",
          "thread_ts": "1666114057.825549",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FHKU",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04627EE490\u003e asked\n\u0026gt; About 5% of app's crashes are related to this\n\u0026gt; \n\u0026gt; Fatal Exception: NSInternalInconsistencyException\n\u0026gt; This NSPersistentStoreCoordinator has no persistent stores (device locked). It cannot perform a save operation.\n\u0026gt; \n\u0026gt; We have tried reducing the protection level of sqlite DB file to \"completeUnlessOpen\" from \"complete\"\n\u0026gt; Also implemented \"UIApplication.protectedDataDidBecomeAvailableNotification\" notification observer to initiate DB updates only when protected data is available.\n\u0026gt; \n\u0026gt; But have been unable to eliminate this issue.\n\u0026gt; \n\u0026gt; We are seeing this crash only in production. Unable to reproduce it internally in our QA and other environments.\n\u0026gt; \n\u0026gt; Any hints/guidance on how to go about addressing this issue?",
      "ts": "1666114129.670349",
      "thread_ts": "1666114129.670349",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666119568.295139",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "s04H7",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04627EE490"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"About 5% of app's crashes are related to this\\n\\nFatal Exception: NSInternalInconsistencyException\\nThis NSPersistentStoreCoordinator has no persistent stores (device locked). It cannot perform a save operation.\\n\\nWe have tried reducing the protection level of sqlite DB file to \\\"completeUnlessOpen\\\" from \\\"complete\\\"\\nAlso implemented \\\"UIApplication.protectedDataDidBecomeAvailableNotification\\\" notification observer to initiate DB updates only when protected data is available.\\n\\nBut have been unable to eliminate this issue.\\n\\nWe are seeing this crash only in production. Unable to reproduce it internally in our QA and other environments.\\n\\nAny hints\\/guidance on how to go about addressing this issue?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "61a403d9-dabf-4e92-8f67-76664266869c",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "Another approach would be to ensure that the NSManagedObjectContext has \u0026gt; 0 NSPersistentStores before attempting to call save()",
          "ts": "1666114168.550689",
          "thread_ts": "1666114129.670349",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U045QPX67GX"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3oI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Another approach would be to ensure that the NSManagedObjectContext has \u003e 0 NSPersistentStores before attempting to call save()"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "dabf8564-36d0-4405-aae5-bd6385ab5c87",
          "type": "message",
          "user": "U04627EE490",
          "text": "Thank you. Will try that for our next app release.",
          "ts": "1666115198.344939",
          "thread_ts": "1666114129.670349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "RfLaE",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you. Will try that for our next app release."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5477292a-e057-4580-ade7-d033f0f85e10",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Why aren't you using \"after first unlock\" ?",
          "ts": "1666119568.295139",
          "thread_ts": "1666114129.670349",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U04627EE490"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "U=0ol",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Why aren't you using \"after first unlock\" ?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04742GGNQY\u003e asked\n\u0026gt; Is there a way to namespace entities in the managed object model?\n\u0026gt; \n\u0026gt; I’m simply prefixing a word to each entity name (e.g. MeshEditorBrush, MeshEditorEraser).\n\u0026gt; \n\u0026gt; Is there a better approach - preferably one with less noise?",
      "ts": "1666114204.238379",
      "thread_ts": "1666114204.238379",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666114248.921449",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "ahT",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04742GGNQY"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is there a way to namespace entities in the managed object model?\\n\\nI\\u2019m simply prefixing a word to each entity name (e.g. MeshEditorBrush, MeshEditorEraser).\\n\\nIs there a better approach - preferably one with less noise?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "3749cec5-f49a-43c4-b45d-62e7911d954a",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "That is the way",
          "ts": "1666114212.029459",
          "thread_ts": "1666114204.238379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Gb/nv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That is the way"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "50658647-e5ed-44c8-8424-e0c7a88fd053",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "You can separate them in to configurations, but that also implies store separation (i.e. one store per configuration in the coordinator).",
          "ts": "1666114230.490569",
          "thread_ts": "1666114204.238379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/eb4I",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can separate them in to configurations, but that also implies store separation (i.e. one store per configuration in the coordinator)."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8ceb525d-b0d9-46e5-bbba-d7a871ef8eab",
          "type": "message",
          "user": "U04742GGNQY",
          "text": "Gotcha :+1:",
          "ts": "1666114248.921449",
          "thread_ts": "1666114204.238379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "fa4n",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Gotcha "
                    },
                    {
                      "type": "emoji",
                      "name": "+1",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "8fdd81ac-2f51-4c80-bc96-f51d7140ed19",
      "type": "message",
      "user": "U0455R18DT2",
      "text": ":airplane: We’re halfway through our 60min flight — submit those questions now before we start our final descent!",
      "ts": "1666114263.349659",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "airplane",
          "count": 1,
          "users": [
            "U0463PJJB34"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "q2t",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "emoji",
                  "name": "airplane",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " We’re halfway through our 60min flight — submit those questions now before we start our final descent!"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046DHPUAKH\u003e asked\n\u0026gt; Hello to the team,\n\u0026gt; Working with core data and CloudKit.\n\u0026gt; Wondering if it’s possible to define an entity’s property that will be shared to my private db on CloudKit but won’t be shared with others.\n\u0026gt; \n\u0026gt; For instance - I have a Notifications property for a shared entity (tells whether this record set to receive local notifications or not) that I do want to keep its value in the cloud, to be shared between my devices, but I don’t need this property to be shared with others (other users can choose locally if they toggle this property or not).\n\u0026gt; Currently I have to manage a local state for each user through userdefaults.\n\u0026gt; Thanks a lot!",
      "ts": "1666114285.298539",
      "thread_ts": "1666114285.298539",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666114534.888679",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "+wP",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046DHPUAKH"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hello to the team,\\nWorking with core data and CloudKit.\\nWondering if it\\u2019s possible to define an entity\\u2019s property that will be shared to my private db on CloudKit but won\\u2019t be shared with others.\\n\\nFor instance - I have a Notifications property for a shared entity (tells whether this record set to receive local notifications or not) that I do want to keep its value in the cloud, to be shared between my devices, but I don\\u2019t need this property to be shared with others (other users can choose locally if they toggle this property or not).\\nCurrently I have to manage a local state for each user through userdefaults.\\nThanks a lot!\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "15889df1-a7cb-4d8d-aefa-ae3ea8c23c08",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "I think you would just create a record that isn’t shared with this data? That way it stays in an unshared zone?",
          "ts": "1666114308.662289",
          "thread_ts": "1666114285.298539",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "n1Ry9",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I think you would just create a record that isn’t shared with this data? That way it stays in an unshared zone?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3bf77ea6-b392-4a5e-882f-2bb98710ff2d",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "NSPersistentCloudKitContainer won’t attempt to share it unless it has a relationship to a shared object, or you call `shareManagedObjects` with it. So… don’t do that.",
          "ts": "1666114349.375049",
          "thread_ts": "1666114285.298539",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "XhTc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer won’t attempt to share it unless it has a relationship to a shared object, or you call "
                    },
                    {
                      "type": "text",
                      "text": "shareManagedObjects",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " with it. So… don’t do that."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "09A597E9-D05A-4DE0-852B-48466F14DB13",
          "type": "message",
          "user": "U046DHPUAKH",
          "text": "Thanks a lot!",
          "ts": "1666114534.888679",
          "thread_ts": "1666114285.298539",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "62F8R",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks a lot!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "01ba21bf-c15d-4555-861b-e0707cf3faf1",
      "type": "message",
      "user": "U0455R18DT2",
      "text": ":thread: Let’s hear about your apps in this thread! What are you working on, and what’s something you’re super proud of? Tell us all about it!",
      "ts": "1666114294.017779",
      "thread_ts": "1666114294.017779",
      "reply_count": 8,
      "latest_reply": "1666115323.243039",
      "team": "T03U5MWB2FN",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Iv/",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "emoji",
                  "name": "thread",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " Let’s hear about your apps in this thread! What are you working on, and what’s something you’re super proud of? Tell us all about it!"
                }
              ]
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "11bdaa03-085f-47e8-ab1b-747a0ffe91a8",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "I’m working on a new version of my app called Tap Forms Organizer. It’s a “create your own database” database app. The next version is going to use Core Data as the data store, CloudKit sync with multiple users, and a public CloudKit store for form template libraries (library build with SwiftUI) that I can update at will and have Core Data push out to all my customers.",
          "ts": "1666114436.062229",
          "thread_ts": "1666114294.017779",
          "parent_user_id": "U0455R18DT2",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "star-struck",
              "count": 2,
              "users": [
                "U0455R18DT2",
                "U03V326V960"
              ]
            },
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U04742GGNQY"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "pD5NI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m working on a new version of my app called Tap Forms Organizer. It’s a “create your own database” database app. The next version is going to use Core Data as the data store, CloudKit sync with multiple users, and a public CloudKit store for form template libraries (library build with SwiftUI) that I can update at will and have Core Data push out to all my customers."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5A751676-9449-4C58-A006-E8AFC11AB59B",
          "type": "message",
          "user": "U046JMFLKV3",
          "text": "I’m working on Padlok, an address manager that notify you when you arrive with the relevant info (doors, digicode, floor, staircase…)\nIt’s using CoreData + CloudKit for storage\nAnd have a share feature that is end-to-end encrypted for privacy\n\u003chttps://apps.apple.com/us/app/padlok/id1546719801\u003e",
          "ts": "1666114495.451209",
          "thread_ts": "1666114294.017779",
          "attachments": [
            {
              "fallback": "App Store: ‎Padlok",
              "id": 1,
              "title": "‎Padlok",
              "title_link": "https://apps.apple.com/us/app/padlok/id1546719801",
              "text": "‎In front of your friend’s door, looking for the codes? Not anymore! Padlok stores all your door codes and addresses securely on your devices! Features: - Add addresses, and doors along with their digicode, intercom, floor and even more - Setup a notification when you're near by to access your code…",
              "image_url": "https://is4-ssl.mzstatic.com/image/thumb/Purple112/v4/c2/1c/c0/c21cc0db-2fef-0279-7d2f-35af55ebd5fb/AppIcon-0-1x_U007emarketing-0-5-0-P3-85-220.png/1200x630wa.png",
              "service_name": "App Store",
              "service_icon": "https://apps.apple.com/favicon.ico",
              "from_url": "https://apps.apple.com/us/app/padlok/id1546719801",
              "original_url": "https://apps.apple.com/us/app/padlok/id1546719801",
              "blocks": null
            }
          ],
          "edited": {
            "user": "U046JMFLKV3",
            "ts": "1666114639.000000"
          },
          "parent_user_id": "U0455R18DT2",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U0455R18DT2"
              ]
            },
            {
              "name": "unlock",
              "count": 1,
              "users": [
                "U0455R18DT2"
              ]
            },
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U045WF1CPQE",
                "U04742GGNQY"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/IQ9",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m working on Padlok, an address manager that notify you when you arrive with the relevant info (doors, digicode, floor, staircase…)\nIt’s using CoreData + CloudKit for storage\nAnd have a share feature that is end-to-end encrypted for privacy\n"
                    },
                    {
                      "type": "link",
                      "url": "https://apps.apple.com/us/app/padlok/id1546719801",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3bc1f303-d2dd-4b86-9896-5440e1136851",
          "type": "message",
          "user": "U0455R18DT2",
          "text": "\u003c@U0463CWEH99\u003e Sounds like a great solution for what can be a messy problem! Has Core Data made things easier to implement in this new version?",
          "ts": "1666114540.330689",
          "thread_ts": "1666114294.017779",
          "parent_user_id": "U0455R18DT2",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "cmR8C",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0463CWEH99"
                    },
                    {
                      "type": "text",
                      "text": " Sounds like a great solution for what can be a messy problem! Has Core Data made things easier to implement in this new version?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d03fab65-9f70-485b-94b5-63310c6e5ad9",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "In many respects it has made a lot of things easier. I’m on my third database engine migration. From raw SQLite to CouchbaseLite now to CoreData. I do have to do some raw SQLite stuff still because I need a highly performant dynamic data model. But CoreData is allowing me to manage all the static model entities and properties very easily.",
          "ts": "1666114650.936429",
          "thread_ts": "1666114294.017779",
          "parent_user_id": "U0455R18DT2",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "exploding_head",
              "count": 1,
              "users": [
                "U0455R18DT2"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "E7GtN",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In many respects it has made a lot of things easier. I’m on my third database engine migration. From raw SQLite to CouchbaseLite now to CoreData. I do have to do some raw SQLite stuff still because I need a highly performant dynamic data model. But CoreData is allowing me to manage all the static model entities and properties very easily."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1784dae5-34b3-4562-b8d8-40d601fe468f",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "I come from a WebObjects background, so CoreData fits right in with my mental model :slightly_smiling_face:",
          "ts": "1666114697.955449",
          "thread_ts": "1666114294.017779",
          "parent_user_id": "U0455R18DT2",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U044UR1MYF3",
                "U03V326V960"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "90w",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I come from a WebObjects background, so CoreData fits right in with my mental model "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6bf90a3e-a848-45dc-96fd-cc70b5cd91db",
          "type": "message",
          "user": "U0455R18DT2",
          "text": "That’s great to hear! Hopefully this migration will be the last one you need :stuck_out_tongue:",
          "ts": "1666114793.871169",
          "thread_ts": "1666114294.017779",
          "parent_user_id": "U0455R18DT2",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4/Ri",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s great to hear! Hopefully this migration will be the last one you need "
                    },
                    {
                      "type": "emoji",
                      "name": "stuck_out_tongue",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "090b7a53-409a-4359-9099-8ffe866ee477",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "I believe it should. Much better to use direct Apple libraries than third party. The version of CouchbaseLite I was using was deprecated. So will be happy to have a more static base to built upon.",
          "ts": "1666114881.771599",
          "thread_ts": "1666114294.017779",
          "parent_user_id": "U0455R18DT2",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "partying_face",
              "count": 1,
              "users": [
                "U0455R18DT2"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YK=aM",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I believe it should. Much better to use direct Apple libraries than third party. The version of CouchbaseLite I was using was deprecated. So will be happy to have a more static base to built upon."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "419f6b8d-c2a6-4707-9f03-a23f1d61ccc5",
          "type": "message",
          "user": "U04625ZF30T",
          "text": "We’re building Kookin, a cooking app.\n\nWe use Core Data with PersistentCloudKitContainer to store and sync data to all the current user devices. The entire UI has been written in SwiftUI, which means that your recipes syncs to all your other Apple devices.\n\nIt’s insanely cool how simple it is to get data syncing using these new APIs.",
          "ts": "1666115323.243039",
          "thread_ts": "1666114294.017779",
          "parent_user_id": "U0455R18DT2",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "cook",
              "count": 1,
              "users": [
                "U0455R18DT2"
              ]
            },
            {
              "name": "swift-blue",
              "count": 1,
              "users": [
                "U0455R18DT2"
              ]
            },
            {
              "name": "knife_fork_plate",
              "count": 1,
              "users": [
                "U046JMFLKV3"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "hNc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "We’re building Kookin, a cooking app.\n\nWe use Core Data with PersistentCloudKitContainer to store and sync data to all the current user devices. The entire UI has been written in SwiftUI, which means that your recipes syncs to all your other Apple devices.\n\nIt’s insanely cool how simple it is to get data syncing using these new APIs."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0478BJ4UPK\u003e asked\n\u0026gt; Is it save to put NSPersistentCloudKitContainer in an app group?",
      "ts": "1666114569.972129",
      "thread_ts": "1666114569.972129",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666114875.918149",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "/+A5j",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0478BJ4UPK"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is it save to put NSPersistentCloudKitContainer in an app group?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "1ea8c32d-4c85-41b1-990d-943196b4cbee",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Yes.",
          "ts": "1666114828.712579",
          "thread_ts": "1666114569.972129",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "q7S",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "05f5b7e5-d7fe-435b-bed0-2fd0f0c8d168",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "There are some limitations re: multi-process writers",
          "ts": "1666114867.634289",
          "thread_ts": "1666114569.972129",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CM9N9",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There are some limitations re: multi-process writers"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4cbb9514-b56e-4f49-86ea-ef7a17df82f3",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "But this is a typical architecture for folks doing App / Extension things.",
          "ts": "1666114875.918149",
          "thread_ts": "1666114569.972129",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U0478BJ4UPK",
                "U045QE0SBD5"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zF7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "But this is a typical architecture for folks doing App / Extension things."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046FQKK2V7\u003e asked\n\u0026gt; In \u003chttps://developer.apple.com/documentation/coredata/consuming_relevant_store_changes|https://developer.apple.com/documentation/coredata/consuming_relevant_store_changes\u003e , under \"Purge History\", it mentions\n\u0026gt; \n\u0026gt; \"\"\"\n\u0026gt; Because persistent history tracking transactions take up space on disk, determine a clean-up strategy to remove them when they are no longer needed.\n\u0026gt; \"\"\"\n\u0026gt; \n\u0026gt; But, it isn't entirely clear, how we can purge the history in a safe way, without affecting the correctness of CloudKit.\n\u0026gt; \n\u0026gt; The example given, is to delete all transactions older than seven days. But, why 7 days? Why not 14 days?\n\u0026gt; \n\u0026gt; A solid and concrete example, of how to safely purge history data to prevent disk space wastage, is very much appreciated.",
      "ts": "1666114648.389879",
      "thread_ts": "1666114648.389879",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 4,
      "latest_reply": "1666114819.948869",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "E8wIY",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046FQKK2V7"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"In \"},{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/documentation\\/coredata\\/consuming_relevant_store_changes\",\"text\":\"https:\\/\\/developer.apple.com\\/documentation\\/coredata\\/consuming_relevant_store_changes\"},{\"type\":\"text\",\"text\":\" , under \\\"Purge History\\\", it mentions\\n\\n\\\"\\\"\\\"\\nBecause persistent history tracking transactions take up space on disk, determine a clean-up strategy to remove them when they are no longer needed.\\n\\\"\\\"\\\"\\n\\nBut, it isn't entirely clear, how we can purge the history in a safe way, without affecting the correctness of CloudKit.\\n\\nThe example given, is to delete all transactions older than seven days. But, why 7 days? Why not 14 days?\\n\\nA solid and concrete example, of how to safely purge history data to prevent disk space wastage, is very much appreciated.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "f131d103-0d0f-4ef9-afb9-f32a13d53031",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Purging history is client specific. Typically clients purge history on an annual or semi-annual basis.",
          "ts": "1666114693.119189",
          "thread_ts": "1666114648.389879",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Fta",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Purging history is client specific. Typically clients purge history on an annual or semi-annual basis."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "037bf064-5993-4d9e-bd20-4fb4580923d1",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Your specific application’s write rate may require a different time window, but when working with NSPersistentCloudKitContainer purging history can force a blanket sync of the store file data to CloudKit, so it isn’t advisable to do very often.",
          "ts": "1666114774.627409",
          "thread_ts": "1666114648.389879",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "O=np",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Your specific application’s write rate may require a different time window, but when working with NSPersistentCloudKitContainer purging history can force a blanket sync of the store file data to CloudKit, so it isn’t advisable to do very often."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "04958127-f331-4c35-949d-896219c31899",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "If you need to purge history regularly, you can file a feedback report for us to examine with some details about your use case.",
          "ts": "1666114798.042419",
          "thread_ts": "1666114648.389879",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ElX",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you need to purge history regularly, you can file a feedback report for us to examine with some details about your use case."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "aa42a68c-5b2b-4fb9-b3fb-e438e2c179d8",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Typically we want to know what percentage of the store file size is history data, which can be achieved with a sqlite3_analyzer dump of the store file.",
          "ts": "1666114819.948869",
          "thread_ts": "1666114648.389879",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "8Hti",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Typically we want to know what percentage of the store file size is history data, which can be achieved with a sqlite3_analyzer dump of the store file."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0463CWEH99\u003e asked\n\u0026gt; I have an NSDictionary of values that I need to store in my Core Data store. Is it better to use a Transformable property or a Binary Data property to store that? Binary Data has the option of external storage, whereas Transformable doesn't I believe. Do both options get loaded into memory when you fetch from the store? Or can one be faulted in only when the property is accessed? Just not sure which is better to use.",
      "ts": "1666114765.488019",
      "thread_ts": "1666114765.488019",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 19,
      "latest_reply": "1666118222.005259",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "ByR+",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0463CWEH99"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have an NSDictionary of values that I need to store in my Core Data store. Is it better to use a Transformable property or a Binary Data property to store that? Binary Data has the option of external storage, whereas Transformable doesn't I believe. Do both options get loaded into memory when you fetch from the store? Or can one be faulted in only when the property is accessed? Just not sure which is better to use.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "8DE38B1A-D09A-4AD0-8248-84FA1E64C3CE",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Both will have the same memory impacts, as you already noted data allows external storage whole transformable allows you to streamline conversion to real types, but ideally the answer is \"neither\"—ideally you'd model the dictionary if possible",
          "ts": "1666114846.490279",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jci+c",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Both will have the same memory impacts, as you already noted data allows external storage whole transformable allows you to streamline conversion to real types, but ideally the answer is \"neither\"—ideally you'd model the dictionary"
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "text",
                      "text": "if possible"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e154502c-59b0-4138-b615-b0b4e37f6d74",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "In this case I’m using the dictionary of values just to sync the data across devices. I build a raw SQLite table for each “form” in my database so that I can quickly query that. The fields are customizable by the user. That is, they can add, update, and delete fields at will. And I update the SQLite tables when they do that. So I can’t use Core Data to model that because from the user’s perspective the model is completely dynamic.",
          "ts": "1666115167.499269",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "at0N",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In this case I’m using the dictionary of values just to sync the data across devices. I build a raw SQLite table for each “form” in my database so that I can quickly query that. The fields are customizable by the user. That is, they can add, update, and delete fields at will. And I update the SQLite tables when they do that. So I can’t use Core Data to model that because from the user’s perspective the model is completely dynamic."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "49c4d3a3-565b-49ac-978e-7cd2de2dcb3c",
          "type": "message",
          "user": "U047JNUP1MW",
          "text": "\u003c@U0463CWEH99\u003e Could you not model even these dynamic forms using Core Data?\n\nFor example maybe you could have:\n\n• `BForm` entity\n    ◦ to-many `fields` relationship of `BFields`\n• `BField` entity\n    ◦ string attribute `name`\n    ◦ transformable attribute `value` , or a series of attributes for each type of value you need to query quickly",
          "ts": "1666115993.865859",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Bzr4n",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0463CWEH99"
                    },
                    {
                      "type": "text",
                      "text": " Could you not model even these dynamic forms using Core Data?\n\nFor example maybe you could have:\n\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"BForm\",\"style\":{\"code\":true}},{\"type\":\"text\",\"text\":\" entity\"}]}],\"style\":\"bullet\",\"indent\":0,\"border\":0}"
                },
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"to-many \"},{\"type\":\"text\",\"text\":\"fields\",\"style\":{\"code\":true}},{\"type\":\"text\",\"text\":\" relationship of \"},{\"type\":\"text\",\"text\":\"BFields\",\"style\":{\"code\":true}}]}],\"style\":\"bullet\",\"indent\":1,\"border\":0}"
                },
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"BField\",\"style\":{\"code\":true}},{\"type\":\"text\",\"text\":\" entity\"}]}],\"style\":\"bullet\",\"indent\":0,\"border\":0}"
                },
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"string attribute \"},{\"type\":\"text\",\"text\":\"name\",\"style\":{\"code\":true}}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"transformable attribute \"},{\"type\":\"text\",\"text\":\"value\",\"style\":{\"code\":true}},{\"type\":\"text\",\"text\":\" , or a series of attributes for each type of value you need to query quickly\"}]}],\"style\":\"bullet\",\"indent\":1,\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "20896337-18c8-4bc0-8862-134e950b2e7b",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "The issue comes down to syncing. If I separate the values into their own items in the database, syncing can get out of hand quickly. For example, if I have 50,000 records to sync and my form contains 10 fields, that’s now 500,000 items to sync. So I’m bundling all the values into a single property so with 50,000 records to sync, that’s just 50,000 items. I used to have a CDFieldValue entity which stored every value separately. But ran into huge performance issues when syncing large datasets. So now I just store an archived dictionary on the record itself.",
          "ts": "1666116183.919229",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/uiPS",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The issue comes down to syncing. If I separate the values into their own items in the database, syncing can get out of hand quickly. For example, if I have 50,000 records to sync and my form contains 10 fields, that’s now 500,000 items to sync. So I’m bundling all the values into a single property so with 50,000 records to sync, that’s just 50,000 items. I used to have a CDFieldValue entity which stored every value separately. But ran into huge performance issues when syncing large datasets. So now I just store an archived dictionary on the record itself."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0d89c079-2195-46d2-b36c-e1b17635b198",
          "type": "message",
          "user": "U047JNUP1MW",
          "text": "I wonder if it’s worth it to have two different database then — one gets synced, and the other is the local representation meant for easy and fast querying.",
          "ts": "1666116336.963929",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YpnMc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I wonder if it’s worth it to have two different database then — one gets synced, and the other is the local representation meant for easy and fast querying."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "225ff307-8ab7-4067-a0e3-12dde1b94ce5",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "That’s precisely what I have. My CoreData model is synced and my raw SQLite file contains all the local representation of the data spread out into tables with multiple columns that enables me to query quickly. It’s sort of the best of both worlds.",
          "ts": "1666116575.855359",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "fire",
              "count": 1,
              "users": [
                "U047JNUP1MW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FZDj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s precisely what I have. My CoreData model is synced and my raw SQLite file contains all the local representation of the data spread out into tables with multiple columns that enables me to query quickly. It’s sort of the best of both worlds."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "aae2ba86-790a-4193-9c6d-e23706c5006e",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "When a value in the database is changed, I will store that value in the SQLite table as well as the dictionary that Core Data will sync.",
          "ts": "1666116632.256369",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "wVj3",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "When a value in the database is changed, I will store that value in the SQLite table as well as the dictionary that Core Data will sync."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "656c00be-0959-4183-bbb2-c2168a9bd9b0",
          "type": "message",
          "user": "U047JNUP1MW",
          "text": "Nice. I take it then you’re using the sqlite C library to create and act on the database too then?",
          "ts": "1666116751.519009",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "AO3",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Nice. I take it then you’re using the sqlite C library to create and act on the database too then?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "81d8ba25-8306-4b70-9c05-4a1483caa452",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Yes, via FMDB. I also use the raw SQLite to store an FTS index of the data. So I can do fast general queries. But I can also do more specific field level queries.",
          "ts": "1666116827.277059",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7HbK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, via FMDB. I also use the raw SQLite to store an FTS index of the data. So I can do fast general queries. But I can also do more specific field level queries."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "679ad84d-9442-4a38-84e7-c5fdc80f44ab",
          "type": "message",
          "user": "U0463CWEH99",
          "ts": "1666116845.551159",
          "thread_ts": "1666114765.488019",
          "files": [
            {
              "id": "F047224TH6F",
              "created": 1666116843,
              "timestamp": 1666116843,
              "name": "image.png",
              "title": "image.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U0463CWEH99",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 36899,
              "url": "",
              "url_download": "",
              "url_private": "C04305NR6Q2/F047224TH6F-image.png",
              "url_private_download": "C04305NR6Q2/F047224TH6F-image.png",
              "original_h": 304,
              "original_w": 342,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047224TH6F-152d9b311b/image_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047224TH6F-152d9b311b/image_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047224TH6F-152d9b311b/image_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047224TH6F-152d9b311b/image_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 342,
              "thumb_360_h": 304,
              "thumb_480": "",
              "thumb_480_w": 0,
              "thumb_480_h": 0,
              "thumb_720": "",
              "thumb_720_w": 0,
              "thumb_720_h": 0,
              "thumb_960": "",
              "thumb_960_w": 0,
              "thumb_960_h": 0,
              "thumb_1024": "",
              "thumb_1024_w": 0,
              "thumb_1024_h": 0,
              "permalink": "https://appleevents.enterprise.slack.com/files/U0463CWEH99/F047224TH6F/image.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047224TH6F-d20c6a0e7b",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": null
        },
        {
          "client_msg_id": "da0ec3a1-d447-464c-883d-d39843692841",
          "type": "message",
          "user": "U047JNUP1MW",
          "text": "love it. interesting approach to keep in the toolbox! thanks for sharing",
          "ts": "1666116916.623949",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U0463CWEH99"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "TClR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "love it. interesting approach to keep in the toolbox! thanks for sharing"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "aea2b7d2-6f96-40ef-b07b-0088a95f811e",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "That’s what my datastore looks like. The tfp-cd files is the Core Data store. The “data” one is the raw SQLite tables. I use the UUID I generate in Core Data as the SQLite table name and also as the column names in the table. So if I customer renames a field, I store that in Core Data, but don’t have to touch the columns in the SQLite database.",
          "ts": "1666116945.261949",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "W+K",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s what my datastore looks like. The tfp-cd files is the Core Data store. The “data” one is the raw SQLite tables. I use the UUID I generate in Core Data as the SQLite table name and also as the column names in the table. So if I customer renames a field, I store that in Core Data, but don’t have to touch the columns in the SQLite database."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a73c226c-ccfd-4074-9d2a-f6902f363d8d",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Here’s an example of the tables and fields in the raw SQLite database:",
          "ts": "1666117084.843739",
          "thread_ts": "1666114765.488019",
          "files": [
            {
              "id": "F047EPRQ0KB",
              "created": 1666117079,
              "timestamp": 1666117079,
              "name": "image.png",
              "title": "image.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U0463CWEH99",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 185790,
              "url": "",
              "url_download": "",
              "url_private": "C04305NR6Q2/F047EPRQ0KB-image.png",
              "url_private_download": "C04305NR6Q2/F047EPRQ0KB-image.png",
              "original_h": 1124,
              "original_w": 758,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047EPRQ0KB-319a9e616f/image_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047EPRQ0KB-319a9e616f/image_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047EPRQ0KB-319a9e616f/image_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047EPRQ0KB-319a9e616f/image_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 243,
              "thumb_360_h": 360,
              "thumb_480": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047EPRQ0KB-319a9e616f/image_480.png",
              "thumb_480_w": 324,
              "thumb_480_h": 480,
              "thumb_720": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047EPRQ0KB-319a9e616f/image_720.png",
              "thumb_720_w": 486,
              "thumb_720_h": 720,
              "thumb_960": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047EPRQ0KB-319a9e616f/image_960.png",
              "thumb_960_w": 647,
              "thumb_960_h": 960,
              "thumb_1024": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047EPRQ0KB-319a9e616f/image_1024.png",
              "thumb_1024_w": 691,
              "thumb_1024_h": 1024,
              "permalink": "https://appleevents.enterprise.slack.com/files/U0463CWEH99/F047EPRQ0KB/image.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047EPRQ0KB-f4ced18eee",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U047JNUP1MW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2H8h",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Here’s an example of the tables and fields in the raw SQLite database:"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e5a549f3-a51e-4531-a7b2-04b95b13ec28",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "You can see the fields (with the fld- prefix) are the column names. The form’s UUID is the name of the table. So you can see how this was impossible to model using pure Core Data. At least not to get the performance and syncing I needed. Because the model is not fixed.",
          "ts": "1666117153.598859",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Nb3ze",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can see the fields (with the fld- prefix) are the column names. The form’s UUID is the name of the table. So you can see how this was impossible to model using pure Core Data. At least not to get the performance and syncing I needed. Because the model is not fixed."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "39f19ede-dda2-4a0a-805b-c54d737ad54c",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "By the way, this approach only just came to me about a month ago because I discovered that in recent SQLite versions, they added the support to drop columns. They never had that before, so I couldn’t do this. You’d previously have to make a new table without the deleted column, then copy all the other columns and rows across. I probably would have taken this approach years ago if I could have more easily dropped columns. Crazy that it took them so many years to add that ability. Tap Forms has been around in the App Store since 2008 when there were only 60 or so apps in the Business category :slightly_smiling_face:",
          "ts": "1666117495.657019",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "fire",
              "count": 1,
              "users": [
                "U047JNUP1MW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "QY7c6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "By the way, this approach only just came to me about a month ago because I discovered that in recent SQLite versions, they added the support to drop columns. They never had that before, so I couldn’t do this. You’d previously have to make a new table without the deleted column, then copy all the other columns and rows across. I probably would have taken this approach years ago if I could have more easily dropped columns. Crazy that it took them so many years to add that ability. Tap Forms has been around in the App Store since 2008 when there were only 60 or so apps in the Business category "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "880cd744-bbb0-4487-823c-084a3f167ce0",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "fwiw despite the more convenient syntax the new `DROP COLUMN` feature is still quite expensive—it rewrites the entire table.",
          "ts": "1666117755.007759",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "WWAP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "fwiw despite the more convenient syntax the new "
                    },
                    {
                      "type": "text",
                      "text": "DROP COLUMN",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " feature is still quite expensive—it rewrites the entire table."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e03711db-04ac-4827-9270-285a591cac05",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Hmm… well hopefully it won’t be too problematic. I just tested it by dropping a column on a table that has 117,000 records in it and it only took a couple seconds (on my M1 Max MBP).",
          "ts": "1666117955.748289",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=FFO",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hmm… well hopefully it won’t be too problematic. I just tested it by dropping a column on a table that has 117,000 records in it and it only took a couple seconds (on my M1 Max MBP)."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d80b46cd-6c0d-4cc6-8912-1927518c322c",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Scratch that, it was virtually instant. When I tested it, I realized I had a locking conflict from having the database opened in multiple apps. When I quit the other app and restarted my app, it dropped the column instantaneously.",
          "ts": "1666118142.310929",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ONGZW",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Scratch that, it was virtually instant. When I tested it, I realized I had a locking conflict from having the database opened in multiple apps. When I quit the other app and restarted my app, it dropped the column instantaneously."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ff878d29-38e5-471e-8a3e-f323e907979f",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "yeah with development data on an M1 it’ll be fast, the real concern is someone using your app with a million rows on their Series 4 watch or iPhone 6S or what have you. CPU and storage performance have improved orders of magnitude over the years.",
          "ts": "1666118222.005259",
          "thread_ts": "1666114765.488019",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "thinking_face",
              "count": 1,
              "users": [
                "U047JNUP1MW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gyh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "yeah with development data on an M1 it’ll be fast, the real concern is someone using your app with a million rows on their Series 4 watch or iPhone 6S or what have you. CPU and storage performance have improved orders of magnitude over the years."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045Z9B0J69\u003e asked\n\u0026gt; How important is it to define a relationship without no inverse in data model? Is there any example where not having an inverse might be relevant?",
      "ts": "1666114910.311369",
      "thread_ts": "1666114910.311369",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 4,
      "latest_reply": "1666119721.858789",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "zxZ",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045Z9B0J69"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How important is it to define a relationship without no inverse in data model? Is there any example where not having an inverse might be relevant?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "4D9BC146-CE2D-4523-B2DF-41FDF13BCBD6",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Defining inverse relationships can make managing your graph easier (say, setting a \"parent\" automatically adds the object as a \"child\"), and also allows you to delegate graph cleanup to Core Data (say, if you want deleting an \"invoice\" to also delete all of its \"items\"). If you don't need those semantics then no inverse is necessary, but most of the time it's useful to be able to traverse graphs bidirectionally.",
          "ts": "1666115070.038169",
          "thread_ts": "1666114910.311369",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U045Z9B0J69"
              ]
            },
            {
              "name": "pray::skin-tone-4",
              "count": 1,
              "users": [
                "U045Z9B0J69"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0gNo",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Defining inverse relationships can make managing your graph easier (say, setting a \"parent\" automatically adds the object as a \"child\"), and also allows"
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "text",
                      "text": "you to delegate graph cleanup to Core Data (say, "
                    },
                    {
                      "type": "text",
                      "text": "i"
                    },
                    {
                      "type": "text",
                      "text": "f you want deleting an \"invoice\" "
                    },
                    {
                      "type": "text",
                      "text": "t"
                    },
                    {
                      "type": "text",
                      "text": "o also delete all of its \"items\")"
                    },
                    {
                      "type": "text",
                      "text": "."
                    },
                    {
                      "type": "text",
                      "text": " If you don't need those semantics then no inverse is necessary, but most of the time it's useful to be able to traverse graphs bidirectionally"
                    },
                    {
                      "type": "text",
                      "text": "."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1cca425f-d291-4383-85e5-46ee0a3bbf6c",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Of note, it’s required to have inverse relationships if you ever want to use CloudKit sync.",
          "ts": "1666115278.187829",
          "thread_ts": "1666114910.311369",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1::skin-tone-4",
              "count": 2,
              "users": [
                "U045Z9B0J69",
                "U0449HM5ZE2"
              ]
            },
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U047JNUP1MW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lHw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Of note, it’s required to have inverse relationships if you ever want to use CloudKit sync."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5b246285-7c41-4efe-bf85-9306df4ce5cb",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "In general, 99.9% of people who go \"I don't need an inverse\" hurt themselves and orphan foreign keys",
          "ts": "1666119690.457009",
          "thread_ts": "1666114910.311369",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "point_up",
              "count": 1,
              "users": [
                "U0449HM5ZE2"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Y7fHI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In general, 99.9% of people who go \"I don't need an inverse\" hurt themselves and orphan foreign keys"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "555ee39d-ed9b-4e75-9d8d-6fd96f428d2b",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "I strongly recommend adding inverses to all the things, and then later look at removing one if it becomes performance critical",
          "ts": "1666119721.858789",
          "thread_ts": "1666114910.311369",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "cmIfQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I strongly recommend adding inverses to all the things, and then later look at removing one if it becomes performance critical"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0468P6C81G\u003e asked\n\u0026gt; Does NSPersistentStore metadata persist on disk? Can this be used for, say, knowing if a device has performed some kind of cloud migration or other activities?",
      "ts": "1666114956.003749",
      "thread_ts": "1666114956.003749",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666115121.927739",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "23N",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0468P6C81G"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Does NSPersistentStore metadata persist on disk? Can this be used for, say, knowing if a device has performed some kind of cloud migration or other activities?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "eb0d9266-99bf-4058-b05c-c414ea8f48cd",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "Core Data stores metadata in the store file itself. This metadata is owned by Core Data and it’s not recommended you change it. You are able to store your own metadata in the store file if you wish but be careful your keys don’t overlap with existing Core Data owned keys. The metadata is subject to the same data protection as the rest of the contents of the store file.",
          "ts": "1666115034.360879",
          "thread_ts": "1666114956.003749",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UKr",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Core Data stores metadata in the store file itself. This metadata is owned by Core Data and it’s not recommended you change it. You are able to store your own metadata in the store file if you wish but be careful your keys don’t overlap with existing Core Data owned keys. The metadata is subject to the same data protection as the rest of the contents of the store file."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "30df80ca-e468-41a9-a2e2-631a33cdfa67",
          "type": "message",
          "user": "U0468P6C81G",
          "text": "Got it. Thanks.",
          "ts": "1666115121.927739",
          "thread_ts": "1666114956.003749",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "cQ9Z",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Got it. Thanks."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0465SGRQTG\u003e asked\n\u0026gt; What would be the best way to save thousands of GPS positions when we use Core Data + CloudKit with a NSPSCKContainer? That’s a lot of data and it will hit the limit.",
      "ts": "1666115022.426429",
      "thread_ts": "1666115022.426429",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 37,
      "latest_reply": "1666115946.238489",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "PxS",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0465SGRQTG"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What would be the best way to save thousands of GPS positions when we use Core Data + CloudKit with a NSPSCKContainer? That\\u2019s a lot of data and it will hit the limit.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "a500b702-0101-4d13-925d-cd7faa2e08d4",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "That kind of depends on why you need to sync these?",
          "ts": "1666115036.379869",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UtaX",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That kind of depends on why you need to sync these?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "52cf7fe4-42e1-465f-b4aa-2851b502838a",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Thousands really isn’t an interesting limit. `NSPersistentCloudKitContainer` can support many times more records than that.",
          "ts": "1666115059.787219",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "dMs",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thousands really isn’t an interesting limit. "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " can support many times more records than that."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "60848f01-1360-448e-9e37-9e34d684d242",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "However if these aren’t going to be used on another device, syncing them is pointless and they can be stored in a local store file as opposed to a synced store file.",
          "ts": "1666115087.201249",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+fT5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "However if these aren’t going to be used on another device, syncing them is pointless and they can be stored in a local store file as opposed to a synced store file."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c9a776d2-c5cf-4df9-9c80-f4586e399ca6",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "I know it can, but we are limited in how many items can be synced in a given timeframe.",
          "ts": "1666115094.625779",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ldgK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I know it can, but we are limited in how many items can be synced in a given timeframe."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d284e5db-3a17-4547-bad9-ff03b2c35a31",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "What does that mean?",
          "ts": "1666115122.821199",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "K1G2E",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "What does that mean?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8e21ea26-46d7-4709-bba1-63b0fc422494",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "My app is a workout app, I need to store all locations (coordinate, speed, course, timestamp) so I can draw a polyline for example.",
          "ts": "1666115131.413139",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "08Tl",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "My app is a workout app, I need to store all locations (coordinate, speed, course, timestamp) so I can draw a polyline for example."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9fb33145-7dc9-45db-a52f-ea3f65ef6309",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "That seems orthogonal? What do you want to sync? The GPS locations or the line?",
          "ts": "1666115167.119009",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "PanL",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That seems orthogonal? What do you want to sync? The GPS locations or the line?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d8f04c73-2d36-417a-86c7-36b495ca0c81",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "For a single workout for example, the raw GPS locations could be aggregated, or compressed in to a single data blob and unpacked if needed",
          "ts": "1666115195.865159",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "PAB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "For a single workout for example, the raw GPS locations could be aggregated, or compressed in to a single data blob and unpacked if needed"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "38c1a2fd-7673-42b0-bf08-c89f36fba979",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "Mmm. I remembered I received error messages because I tried to sync too many items and hit some limits.",
          "ts": "1666115202.706759",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4cJ/g",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Mmm. I remembered I received error messages because I tried to sync too many items and hit some limits."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f455041c-bc7a-48a7-8557-2ac3f6e628b6",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "The CloudKit server will eventually back you off",
          "ts": "1666115216.010439",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "DZD3",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The CloudKit server will eventually back you off"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8d4c8e0f-c148-4bf9-81d4-2e33f3566a35",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "but that limit is pretty high",
          "ts": "1666115221.135009",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FQL2z",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "but that limit is pretty high"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5c58eb0f-50bc-4a4d-a472-0e76af766d49",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "Ok, I'm currently using a Binary Data of the archived CLLocations. So it answers my question I guess.",
          "ts": "1666115236.051669",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "JSQB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok, I'm currently using a Binary Data of the archived CLLocations. So it answers my question I guess."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6141bb72-4dd5-4850-8185-263884db875b",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "It’s also temporary, the CKError includes a retryAfter key which tells us what the backoff is.",
          "ts": "1666115239.458619",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "F73",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It’s also temporary, the CKError includes a retryAfter key which tells us what the backoff is."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9c9a0a43-156c-449f-9baf-fa35c6455602",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Maybe, but you probably also want to buffer the stream",
          "ts": "1666115256.246339",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CRF",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Maybe, but you probably also want to buffer the stream"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "eae335a2-6b17-4254-b4d3-d45c46061ef1",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "For the sake of the devices battery it really shouldn’t be trying to sync with every location change.",
          "ts": "1666115269.571569",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5B8",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "For the sake of the devices battery it really shouldn’t be trying to sync with every location change."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3be0b09b-0365-4a6b-afe2-f727836036ec",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "Using a NSPCKContainer, is that possible?",
          "ts": "1666115272.304899",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yGSA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Using a NSPCKContainer, is that possible?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "242ab6eb-3086-4eef-95b6-273ac4d64008",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Not for this use case, for streaming data you want a local store file that records the raw input",
          "ts": "1666115288.693949",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/H5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Not for this use case, for streaming data you want a local store file that records the raw input"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "66f6a0d0-75d4-462a-95b9-030d02dfe914",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "and you move that to the synced store in a bucket that makes sense",
          "ts": "1666115297.980789",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "HuUeQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "and you move that to the synced store in a bucket that makes sense"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7c4dc200-e0fc-4990-ab7d-e8f894875bec",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "I asked another question related to this sync use case we're talking about.",
          "ts": "1666115298.430629",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "aFiTO",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I asked another question related to this sync use case we're talking about."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "90f928d2-c87a-4121-b680-66dcd42ce8b2",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "With two configurations.",
          "ts": "1666115312.213349",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EEyX",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "With two configurations."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8195996f-fc2e-4b9a-8033-38bd325b32fa",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Indeed.",
          "ts": "1666115327.838769",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "VG=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Indeed."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "03571471-ca49-4ef1-a77a-8b2d61069a61",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "One Local for the recording and one Cloud for when the user is not recording.",
          "ts": "1666115329.118639",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3Ktd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "One Local for the recording and one Cloud for when the user is not recording."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fe456190-3e64-4e17-91e8-9065fe3cb6e2",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "The stores can exist at the same time, you can also move data over to the Cloud store as it is recorded. Say in buckets of minutes vs. live.",
          "ts": "1666115364.894339",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bUfAF",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The stores can exist at the same time, you can also move data over to the Cloud store as it is recorded. Say in buckets of minutes vs. live."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "01ed5a71-a599-4338-9667-909d3312c7bd",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "I would appreciate some hints on the other question actually.",
          "ts": "1666115371.090939",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "8qQd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I would appreciate some hints on the other question actually."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3e160972-2de5-4fc6-bb4a-1eb2d524d940",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "`1` is the way",
          "ts": "1666115443.910529",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "B/J",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "1",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " is the way"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "260df5f4-ffa9-4a22-9286-231c5e12f7a3",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "Because\n1. Some entities will share a lot in common and I want to avoid duplicated code.\n2. Some entities created offline need to be link to entities in the Cloud Store during the workout.",
          "ts": "1666115454.751869",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "H=v",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Because\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"Some entities will share a lot in common and I want to avoid duplicated code.\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"Some entities created offline need to be link to entities in the Cloud Store during the workout.\"}]}],\"style\":\"ordered\",\"indent\":0,\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7ce3fd7a-c9d3-4040-bb4b-b0506a12feb2",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Entities can be part of multiple configuration",
          "ts": "1666115469.531189",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U0468P6C81G"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "oeP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Entities can be part of multiple configuration"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1aff4ce6-87d2-4053-84a6-9b002f2769bd",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "And you can use a foreign key to associate them",
          "ts": "1666115477.335259",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "pzwnx",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "And you can use a foreign key to associate them"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7a6dede0-2ed1-44ad-b775-bd09a930ab75",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "like an event identifier",
          "ts": "1666115480.396319",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "XUf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "like an event identifier"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9deea91c-7f42-4102-86d3-c7daf997170b",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "Mmm I see. So no need to duplicate entities with a CloudEvent and a LocalEvent.",
          "ts": "1666115560.225819",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "l0zmK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Mmm I see. So no need to duplicate entities with a CloudEvent and a LocalEvent."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "46626823-a989-4d47-8bf9-0425bcc29208",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "I don’t think so?",
          "ts": "1666115605.086579",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "l3Gq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I don’t think so?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "aa16d58d-fd24-4c94-9bba-579532ed7b79",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "But then I have to tell CD what store to use for the object correct?",
          "ts": "1666115672.356179",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "fGT3p",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "But then I have to tell CD what store to use for the object correct?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e1fb546e-00b0-466c-8e21-10a588ae230c",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "If the object can be in multiple entities.",
          "ts": "1666115681.389929",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "dCh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If the object can be in multiple entities."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "15a36586-7852-4e1c-a1de-6dc523d62614",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Yes, you will have to call `assignObject:toStore:` if they’re in both configurations.",
          "ts": "1666115699.212609",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0465SGRQTG"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "HOzR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, you will have to call "
                    },
                    {
                      "type": "text",
                      "text": "assignObject:toStore:",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " if they’re in both configurations."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8fdf59fb-f8f9-4a7c-8748-2bcf9213bd3a",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "And should I use FetchedProperties to link objects between the stores? Like for exemple en Event created during a workout (offline) related to an Item belonging to the Cloud store?",
          "ts": "1666115789.384109",
          "thread_ts": "1666115022.426429",
          "edited": {
            "user": "U0465SGRQTG",
            "ts": "1666115835.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lyC",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "And should I use FetchedProperties to link objects between the stores? Like for exemple en Event created during a workout (offline) related to an Item belonging to the Cloud store?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "815ad01a-afde-4d06-a4b5-e0d694129e89",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "That’s not a question I can answer for you. You can experiment with them to see if they fit your needs, but I’m not sure that’s better than custom fetch requests. Certainly it’s not as tunable.",
          "ts": "1666115838.214829",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zYgB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s not a question I can answer for you. You can experiment with them to see if they fit your needs, but I’m not sure that’s better than custom fetch requests. Certainly it’s not as tunable."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "108ebcc1-2e1f-4082-97f4-b2f682cfd9ea",
          "type": "message",
          "user": "U0465SGRQTG",
          "text": "Ok. Thanks! I'll try. I need a way to associate a local object to a cloud object and move both to the cloud when the recording is completed.",
          "ts": "1666115946.238489",
          "thread_ts": "1666115022.426429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "V3+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok. Thanks! I'll try. I need a way to associate a local object to a cloud object and move both to the cloud when the recording is completed."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0466EASFPF\u003e asked\n\u0026gt; If I use NSPersistentStoreFileProtectionKey: FileProtectionType.complete to encrypt my database, will it be stored in an encrypted format if the user backs up their phone to iCloud? Or is it only encrypted on the device?",
      "ts": "1666115059.964839",
      "thread_ts": "1666115059.964839",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666115119.153599",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Xk1C=",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0466EASFPF"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"If I use NSPersistentStoreFileProtectionKey: FileProtectionType.complete to encrypt my database, will it be stored in an encrypted format if the user backs up their phone to iCloud? Or is it only encrypted on the device?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "b5868cea-5b22-458f-87f6-6fef627b71e1",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "NSFileProtection only affects the encryption state of data on-device.",
          "ts": "1666115119.153599",
          "thread_ts": "1666115059.964839",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0466EASFPF"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "a/C",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "NSFileProtection only affects the encryption state of data on-device."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U047JNUP1MW\u003e asked\n\u0026gt; How should I think about the CAST function in expressions? Is this a feature I should actively use? For example — if I write \"CAST(now(), 'NSNumber')\" with intent to do math on the current time, I get a \"Don't know how to cast to NSNumber\" error.",
      "ts": "1666115244.271689",
      "thread_ts": "1666115244.271689",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666119776.998329",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "6U7c/",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U047JNUP1MW"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How should I think about the CAST function in expressions? Is this a feature I should actively use? For example \\u2014 if I write \\\"CAST(now(), 'NSNumber')\\\" with intent to do math on the current time, I get a \\\"Don't know how to cast to NSNumber\\\" error.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "14037b7e-7f8d-4290-b9d5-0a4243932d6b",
          "type": "message",
          "user": "U045LLLQHLM",
          "text": "That is an excellent question.  We recommend you to post this in the Developer Forums, where Apple engineers are monitoring all week long and able to provide you further assistance.\n\n\u003chttps://developer.apple.com/forums/\u003e",
          "ts": "1666115823.110409",
          "thread_ts": "1666115244.271689",
          "attachments": [
            {
              "fallback": "Apple Developer Forums",
              "id": 1,
              "title": "Apple Developer Forums",
              "title_link": "https://developer.apple.com/forums/",
              "text": "Connect with fellow developers and Apple experts as you give and receive help on a wide variety of development topics, from implementing new technologies to established best practices",
              "service_name": "developer.apple.com",
              "service_icon": "https://forums.developer.apple.com/forums/build-09152022-1/public/assets/favicon.ico",
              "from_url": "https://developer.apple.com/forums/",
              "original_url": "https://developer.apple.com/forums/",
              "blocks": null
            }
          ],
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Qz+w8",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That is an excellent question.  We recommend you to post this in the Developer Forums, where Apple engineers are monitoring all week long and able to provide you further assistance.\n\n"
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/forums/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "edc5b3b5-86a7-4e76-9421-93e56e20d04f",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "that seems worth a bug report",
          "ts": "1666119776.998329",
          "thread_ts": "1666115244.271689",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "white_check_mark",
              "count": 1,
              "users": [
                "U045LLLQHLM"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=f8",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "that seems worth a bug report"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046SECKA9Y\u003e asked\n\u0026gt; We currently use our Core Data stack with a merge policy (NSMergeByPropertyStoreTrumpMergePolicy) in place which is essentially replacing an object which is already stored in our store and identified by a unique constraint when it is pulled down from the API.\n\u0026gt; \n\u0026gt; The alternative is to identify if the object already exists with a fetch request and if it does exist then update the existing record, and if it doesn't exist then create a new record.\n\u0026gt; \n\u0026gt; One advantage is that the latter solution retains any relationships which were originally setup, but with relation to that latter solution:\n\u0026gt; \n\u0026gt; 1. What other advantages are there to creating/updating records like this?\n\u0026gt; 2. Are there any speed/processing penalties to fetching a record first rather than just replacing with a merge policy, if for example 1,000 record were retrieved?\n\u0026gt; 3. In Apple's opinion, which is the preferred way to handle the creating and updating of records?\n\u0026gt; \n\u0026gt; Thank you for your time.",
      "ts": "1666115403.668429",
      "thread_ts": "1666115403.668429",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666115420.742919",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "0Ef",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046SECKA9Y"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"We currently use our Core Data stack with a merge policy (NSMergeByPropertyStoreTrumpMergePolicy) in place which is essentially replacing an object which is already stored in our store and identified by a unique constraint when it is pulled down from the API.\\n\\nThe alternative is to identify if the object already exists with a fetch request and if it does exist then update the existing record, and if it doesn't exist then create a new record.\\n\\nOne advantage is that the latter solution retains any relationships which were originally setup, but with relation to that latter solution:\\n\\n1. What other advantages are there to creating\\/updating records like this?\\n2. Are there any speed\\/processing penalties to fetching a record first rather than just replacing with a merge policy, if for example 1,000 record were retrieved?\\n3. In Apple's opinion, which is the preferred way to handle the creating and updating of records?\\n\\nThank you for your time.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "efa9cfab-33a0-4d36-941b-0af451817cc0",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "There are pros and cons to each approach. In general, fetching the record first tends to be very expensive. If you had to do this, it's imperative to batch your fetching. Fetching records one at a time in this flow will be extremely slow",
          "ts": "1666115420.742919",
          "thread_ts": "1666115403.668429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4F5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There are pros and cons to each approach. In general, fetching the record first tends to be very expensive. If you had to do this, it's imperative to batch your fetching. Fetching records one at a time in this flow will be extremely slow"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04695X1JM9\u003e asked\n\u0026gt; My Video entity has a To Many relationship with Tag, and I have an array with some tag ids. I want to get all videos that have at least one tag present in this array of tag ids. How can I create an NSPredicate to represent this?",
      "ts": "1666115583.307419",
      "thread_ts": "1666115583.307419",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666115589.212009",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "VOr8D",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04695X1JM9"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"My Video entity has a To Many relationship with Tag, and I have an array with some tag ids. I want to get all videos that have at least one tag present in this array of tag ids. How can I create an NSPredicate to represent this?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "ec4a5e91-6cf1-4dff-8d77-2c782ac72d5c",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Does `ANY` work? `ANY tag.name IN %@`?",
          "ts": "1666115589.212009",
          "thread_ts": "1666115583.307419",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "kmU",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Does "
                    },
                    {
                      "type": "text",
                      "text": "ANY",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " work? "
                    },
                    {
                      "type": "text",
                      "text": "ANY tag.name IN %@",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04695X1JM9\u003e asked\n\u0026gt; In a SwiftUI app, how can I create a @FetchRequest based on a @AppStorage value? The use case is: when I turn a Focus filter on, I change a @AppStorage value to the list of tags the user wants to see in my app. If I could create a @FetchRequest with a predicate tied to the value of this @AppStorage, the predicate would update automatically, which would update my views. If this is not currently possible, is there any workaround you suggest to achieve a similar result?",
      "ts": "1666115600.726139",
      "thread_ts": "1666115600.726139",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 5,
      "latest_reply": "1666116829.151509",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "ubE",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04695X1JM9"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"In a SwiftUI app, how can I create a @FetchRequest based on a @AppStorage value? The use case is: when I turn a Focus filter on, I change a @AppStorage value to the list of tags the user wants to see in my app. If I could create a @FetchRequest with a predicate tied to the value of this @AppStorage, the predicate would update automatically, which would update my views. If this is not currently possible, is there any workaround you suggest to achieve a similar result?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "B40D3E91-C278-465C-9C6E-34AC74507364",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "`@FetchRequest`'s `predicate` property is a `Binding` that will dirty the view on change, you should be able to connect that to the `@AppStorage`? (I'm a Core Data person not SwiftUI, but I feel like the gist is there?)",
          "ts": "1666115718.845259",
          "thread_ts": "1666115600.726139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3xI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "@FetchRequest",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "'s "
                    },
                    {
                      "type": "text",
                      "text": "predicate",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " property is a "
                    },
                    {
                      "type": "text",
                      "text": "Binding",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "text",
                      "text": "that will dirty the view on change, you should be able to connect that to the "
                    },
                    {
                      "type": "text",
                      "text": "@AppStorage",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "? (I'm a Core Data person not SwiftUI, but "
                    },
                    {
                      "type": "text",
                      "text": "I"
                    },
                    {
                      "type": "text",
                      "text": " feel like the gist is there?)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "67847f92-3b79-4ceb-afab-8460859b92ce",
          "type": "message",
          "user": "U04695X1JM9",
          "text": "Trying to use a `@AppStorage` as the `@FetchRequest``s `predicate` results in the following error:",
          "ts": "1666115910.966699",
          "thread_ts": "1666115600.726139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bQP2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Trying to use a "
                    },
                    {
                      "type": "text",
                      "text": "@AppStorage",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " as the "
                    },
                    {
                      "type": "text",
                      "text": "@FetchRequest",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "`s "
                    },
                    {
                      "type": "text",
                      "text": "predicate",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " results in the following error:"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2c39ba4e-5e10-4c8b-aa13-443006b700d6",
          "type": "message",
          "user": "U04695X1JM9",
          "text": "Cannot convert value of type 'String' to expected argument type 'NSPredicate?'",
          "ts": "1666115918.518779",
          "thread_ts": "1666115600.726139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "kRKq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Cannot convert value of type 'String' to expected argument type 'NSPredicate?'"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "98756429-8288-42ba-8e0c-c94d792800e0",
          "type": "message",
          "user": "U04695X1JM9",
          "text": "Ah, maybe I could create a `@State` var of type `NSPredicate` and use it in the `@FetchRequest``s `predicate` . I think I can use  `onChange`  to check for when the `@AppStorage` changes and create a new predicate based on it. I'll try it!",
          "ts": "1666116074.872289",
          "thread_ts": "1666115600.726139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "AIoA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ah, maybe I could create a "
                    },
                    {
                      "type": "text",
                      "text": "@State",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " var of type "
                    },
                    {
                      "type": "text",
                      "text": "NSPredicate",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and use it in the "
                    },
                    {
                      "type": "text",
                      "text": "@FetchRequest",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "`s "
                    },
                    {
                      "type": "text",
                      "text": "predicate",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " . I think I can use  "
                    },
                    {
                      "type": "text",
                      "text": "onChange",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "  to check for when the "
                    },
                    {
                      "type": "text",
                      "text": "@AppStorage",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " changes and create a new predicate based on it. I'll try it!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ea31aa39-f0a6-4f07-9014-404f342a25b2",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Yeah, you’ll need a mapping step to wrap the value into an appropriate predicate",
          "ts": "1666116829.151509",
          "thread_ts": "1666115600.726139",
          "edited": {
            "user": "U0449HM5ZE2",
            "ts": "1666116832.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4+5B",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yeah, you’ll need a mapping step to wrap the value into an appropriate predicate"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046MA5EZD3\u003e asked\n\u0026gt; I asked about this in the WWDC 22 Core Data slack, but unfortunately our app still gets NSSQLiteErrorDomain 5 errors in production for some users, when calling replacePersistentStore() during the Core Data stack setup for resetting the db to a db seed from the app bundle. Retrying after 1-2 seconds doesn't help. There's app extensions that also use this code path, but maybe that's not the issue here as most error logs come from the main app process. A previous suggestion was to not do any replacing in extensions, but only the main app. Is there anything else we can try?",
      "ts": "1666115603.818199",
      "thread_ts": "1666115603.818199",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666115695.387409",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "tmpK",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046MA5EZD3"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I asked about this in the WWDC 22 Core Data slack, but unfortunately our app still gets NSSQLiteErrorDomain 5 errors in production for some users, when calling replacePersistentStore() during the Core Data stack setup for resetting the db to a db seed from the app bundle. Retrying after 1-2 seconds doesn't help. There's app extensions that also use this code path, but maybe that's not the issue here as most error logs come from the main app process. A previous suggestion was to not do any replacing in extensions, but only the main app. Is there anything else we can try?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "8fa0aeb5-e5cf-4f3b-9dd6-25399bf937a7",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "Please consider sending Feedback via:\n\u003chttp://feedbackassistant.apple.com|feedbackassistant.apple.com\u003e\n\nInclude the error logs and we can help you further.",
          "ts": "1666115695.387409",
          "thread_ts": "1666115603.818199",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UQa7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Please consider sending Feedback via:\n"
                    },
                    {
                      "type": "link",
                      "url": "http://feedbackassistant.apple.com",
                      "text": "feedbackassistant.apple.com"
                    },
                    {
                      "type": "text",
                      "text": "\n\nInclude the error logs and we can help you further."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0463PJJB34\u003e asked\n\u0026gt; I am implementing a URL scheme for my app right now, and I want to provide a URL that opens a specific CoreData object. Is there a better way than using  NSManagedObject.objectID.uriRepresentation().absoluteString as an identifier in my URL scheme, so for example... myapp://?object=\u003cx-coredata://157ECF58-DE3C-4F66-9B65-BF50C5582E59/Object/p1\u003e",
      "ts": "1666115603.931389",
      "thread_ts": "1666115603.931389",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666115811.388289",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "DphC",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0463PJJB34"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I am implementing a URL scheme for my app right now, and I want to provide a URL that opens a specific CoreData object. Is there a better way than using  NSManagedObject.objectID.uriRepresentation().absoluteString as an identifier in my URL scheme, so for example... myapp:\\/\\/?object=x-coredata:\\/\\/157ECF58-DE3C-4F66-9B65-BF50C5582E59\\/Object\\/p1\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "80b4f87a-a987-47ce-885a-7d580d9f58a9",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "No, I think that's what I'd do",
          "ts": "1666115613.282869",
          "thread_ts": "1666115603.931389",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0463PJJB34"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "tWfe2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "No, I think that's what I'd do"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1eb33887-13d4-4083-9128-a9269656886c",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "You could also create your own unique identifiers and just fetch based on that. That’s what I do in my app.",
          "ts": "1666115811.388289",
          "thread_ts": "1666115603.931389",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U044UR1MYF3",
                "U0463PJJB34"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6YDR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You could also create your own unique identifiers and just fetch based on that. That’s what I do in my app."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046FTA58PK\u003e asked\n\u0026gt; Hi, got a question about migrations when using a CoreData \u0026amp; CloudKit stack. Can unused entities be removed from a data model that's synced with CloudKit if we no longer care about getting access to the data? In our case, we'd have removed all data from the entities first (aka migrate that data to a new entity), and then removed that entity from the project because we can know for certain that all of our users have upgraded.",
      "ts": "1666115635.997589",
      "thread_ts": "1666115635.997589",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 6,
      "latest_reply": "1666116122.215759",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "n0K",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046FTA58PK"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hi, got a question about migrations when using a CoreData \u0026 CloudKit stack. Can unused entities be removed from a data model that's synced with CloudKit if we no longer care about getting access to the data? In our case, we'd have removed all data from the entities first (aka migrate that data to a new entity), and then removed that entity from the project because we can know for certain that all of our users have upgraded.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "0c62babc-4ca8-481b-8f6f-e1766581127a",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Yes but, what will older versions of the app do?",
          "ts": "1666115646.311619",
          "thread_ts": "1666115635.997589",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mrDhP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes but, what will older versions of the app do?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a03b1079-7372-4442-8bb8-3d7fb18f1aa5",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "For a user with version skew the old version will write data the new version never sees, and the new version will write data the old version never sees.",
          "ts": "1666115667.905859",
          "thread_ts": "1666115635.997589",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "100",
              "count": 1,
              "users": [
                "U0468P6C81G"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Z8EuV",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "For a user with version skew the old version will write data the new version never sees, and the new version will write data the old version never sees."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "584f7253-228d-47cd-a126-7b44a0505146",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "How will you explain this disparity to your user?",
          "ts": "1666115674.052829",
          "thread_ts": "1666115635.997589",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "eI/yK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "How will you explain this disparity to your user?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e6212fcc-3ea3-44ae-8580-a6e1b990efa9",
          "type": "message",
          "user": "U046FTA58PK",
          "text": "To our benefit, our app is internal only and can be sure that everyone has updated to the latest version. We won't be doing this once it's released to the App Store",
          "ts": "1666115751.513699",
          "thread_ts": "1666115635.997589",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Gxs7A",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "To our benefit, our app is internal only and can be sure that everyone has updated to the latest version. We won't be doing this once it's released to the App Store"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "11993546-17be-4753-b1bd-a4abc8b86bb5",
          "type": "message",
          "user": "U046FTA58PK",
          "text": "But it sounds like there's no issues with the above approach given that we have the ability to control versions?",
          "ts": "1666115809.416859",
          "thread_ts": "1666115635.997589",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Pbe",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "But it sounds like there's no issues with the above approach given that we have the ability to control versions?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2640f037-69b5-408b-be82-c0f078db6546",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "No, NSPersistentCloudKitContainer will automatically ignore things the local model doesn’t know about.",
          "ts": "1666116122.215759",
          "thread_ts": "1666115635.997589",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4v92",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "No, NSPersistentCloudKitContainer will automatically ignore things the local model doesn’t know about."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045QE0SBD5\u003e asked\n\u0026gt; I am currently using UserDefaults, but when the app is started by system (eg. for background or widget updates) while the device is locked, the app is denied access to UserDefaults storage, so they load empty. Also, these empty UserDefaults are then cached, and the only API call that allowed for reloading them, was deprecated, so the app has no way of loading the correct defaults even when a device is unlocked.\n\u0026gt; \n\u0026gt; Does CoreData suffer from a same (by design) problem? Or is this scenario solvable in Core Data? How would I go about using Core Data for app preferences storage in such scenarios (locked device \u0026amp; background updates)?",
      "ts": "1666115798.747429",
      "thread_ts": "1666115798.747429",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666115851.671999",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "5+u",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045QE0SBD5"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I am currently using UserDefaults, but when the app is started by system (eg. for background or widget updates) while the device is locked, the app is denied access to UserDefaults storage, so they load empty. Also, these empty UserDefaults are then cached, and the only API call that allowed for reloading them, was deprecated, so the app has no way of loading the correct defaults even when a device is unlocked.\\n\\nDoes CoreData suffer from a same (by design) problem? Or is this scenario solvable in Core Data? How would I go about using Core Data for app preferences storage in such scenarios (locked device \u0026 background updates)?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "0b85159f-3fdb-44c4-a810-755d6443a97b",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "It sounds like you’re using the wrong file protection class for your UX.",
          "ts": "1666115809.619189",
          "thread_ts": "1666115798.747429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "GFI0B",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It sounds like you’re using the wrong file protection class for your UX."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f77a3450-95a2-4834-b07d-57ac8dd764c0",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "What have you set it to ?  If you want data available early, then you probably want \"after first unlock\" level",
          "ts": "1666115851.671999",
          "thread_ts": "1666115798.747429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7XDc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "What have you set it to ?  If you want data available early, then you probably want \"after first unlock\" level"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045ZUY8JHK\u003e asked\n\u0026gt; \"Ordered\" relationships are a little difficult to use. What’s your best practice for storing items in a list which can be arbitrarily re-ordered by the user? Any tips for performing migrations away from ordered migrations while maintaining the order?",
      "ts": "1666115928.600139",
      "thread_ts": "1666115928.600139",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 11,
      "latest_reply": "1666121164.215259",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "pXYx4",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045ZUY8JHK"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"\\\"Ordered\\\" relationships are a little difficult to use. What\\u2019s your best practice for storing items in a list which can be arbitrarily re-ordered by the user? Any tips for performing migrations away from ordered migrations while maintaining the order?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "b3e60450-7b21-4c0c-8261-4476d45138f4",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "What are you finding difficult ?  The primary alternative would be an attribute as the sort key, and you'd resort the collection",
          "ts": "1666115972.242369",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Mcp",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "What are you finding difficult ?  The primary alternative would be an attribute as the sort key, and you'd resort the collection"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e0f9ffa0-d277-49e4-b631-30f7a6aaa3df",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "of course resorting can be expensive and it doesn't do a good job for custom user orderings",
          "ts": "1666115990.971929",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0Lm",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "of course resorting can be expensive and it doesn't do a good job for custom user orderings"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b042a8f0-d0cf-41cd-b736-b9fd01500694",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "So I'm curious why you want to ... reimplemented ordered relationships ?",
          "ts": "1666116009.486199",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "baQvC",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "So I'm curious why you want to ... reimplemented ordered relationships ?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "76859428-bde0-4425-9a4b-aa6c0fabdae9",
          "type": "message",
          "user": "U045ZUY8JHK",
          "text": "Yeah I’m not really interested in reimplementing ordered relationships if that’s the way to go! I was really more wondering if there was a preferred way to do a user-ordered list. Not sure if ordered relationships were intended for that sort of thing. Sounds like they are.",
          "ts": "1666117565.906399",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gu9",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yeah I’m not really interested in reimplementing ordered relationships if that’s the way to go! I was really more wondering if there was a preferred way to do a user-ordered list. Not sure if ordered relationships were intended for that sort of thing. Sounds like they are."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2dc8b562-c949-4a61-8f8e-43ec0818857f",
          "type": "message",
          "user": "U045ZUY8JHK",
          "text": "As for difficulties, nothing too major. Implementing list reordering in SwiftUI was a bit of a pain, resulting in something like this for reordering:\n```    /// Passed into `onMove(perform:)` \u003chttps://developer.apple.com/documentation/swiftui/dynamicviewcontent/onmove(perform:)\u003e\n    private func move(source: IndexSet, destination: Int) {\n        let mutableRelationship = parentObject.mutableOrderedSetValue(forKey: \"relationship\") // Relationship is typed as a NSOrderedSet; immutable\n        // SwiftUI and NSMutableOrderedSet disagree about the destination\n        var fixedDestination = destination\n        for idx in source {\n            if idx \u0026lt; destination {\n                fixedDestination -= 1\n            }\n        }\n        fixedDestination = max(fixedDestination, 0)\n        mutableRelationship.moveObjects(at: source, to: fixedDestination)\n    }```",
          "ts": "1666117626.675689",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "HHv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "As for difficulties, nothing too major. Implementing list reordering in SwiftUI was a bit of a pain, resulting in something like this for reordering:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"    \\/\\/\\/ Passed into `onMove(perform:)` \"},{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/documentation\\/swiftui\\/dynamicviewcontent\\/onmove(perform:)\"},{\"type\":\"text\",\"text\":\"\\n    private func move(source: IndexSet, destination: Int) {\\n        let mutableRelationship = parentObject.mutableOrderedSetValue(forKey: \\\"relationship\\\") \\/\\/ Relationship is typed as a NSOrderedSet; immutable\\n        \\/\\/ SwiftUI and NSMutableOrderedSet disagree about the destination\\n        var fixedDestination = destination\\n        for idx in source {\\n            if idx \u003c destination {\\n                fixedDestination -= 1\\n            }\\n        }\\n        fixedDestination = max(fixedDestination, 0)\\n        mutableRelationship.moveObjects(at: source, to: fixedDestination)\\n    }\"}],\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7ed765b1-fbf1-4f61-87ef-0fafd935f65d",
          "type": "message",
          "user": "U045ZUY8JHK",
          "text": "The issues there are:",
          "ts": "1666117644.189069",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "t9gz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The issues there are:"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d65e9238-1629-4ac0-9bea-08e9049e481d",
          "type": "message",
          "user": "U045ZUY8JHK",
          "text": "1. Relationship is typed as immutable\n2. `moveObjects(at:to:)` disagrees slightly with SwiftUI about the `destination` parameter",
          "ts": "1666117688.701359",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "otdd",
              "elements": [
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"Relationship is typed as immutable\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"moveObjects(at:to:)\",\"style\":{\"code\":true}},{\"type\":\"text\",\"text\":\" disagrees slightly with SwiftUI about the \"},{\"type\":\"text\",\"text\":\"destination\",\"style\":{\"code\":true}},{\"type\":\"text\",\"text\":\" parameter\"}]}],\"style\":\"ordered\",\"indent\":0,\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1e30be3b-2aca-4419-903a-b006e888aad1",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "yeah, you need to use mutableOrderedSetValueForKey",
          "ts": "1666119853.213849",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "qKT4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "yeah, you need to use mutableOrderedSetValueForKey"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1931a0cd-e8d9-42dd-82e6-e8246ba20716",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "this seems worth a bug report to smooth over",
          "ts": "1666119878.565679",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "DwcZ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "this seems worth a bug report to smooth over"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "799e6f6c-48be-4400-8333-da662eb59991",
          "type": "message",
          "user": "U045ZUY8JHK",
          "text": "• Core Data: FB11702051 ",
          "ts": "1666121114.977519",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ytqny",
              "elements": [
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"Core Data: FB11702051 \"}]}],\"style\":\"bullet\",\"indent\":0,\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a63a2256-05c4-4be2-8bc2-08b630e6feca",
          "type": "message",
          "user": "U045ZUY8JHK",
          "text": "• SwiftUI: FB11702064",
          "ts": "1666121164.215259",
          "thread_ts": "1666115928.600139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vtu",
              "elements": [
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"SwiftUI: FB11702064\"}]}],\"style\":\"bullet\",\"indent\":0,\"border\":0}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0463CWEH99\u003e asked\n\u0026gt; I have a document based app. Each document is a bundle that includes a unique Core Data store. I'd like to sync each document separately using Core Data's built-in CloudKit sync API. How can I set a unique CKRecordZone for each document? Not sure if it changed in iOS 16 or Ventura, but it used to be it would create one CKRecordZone per app. I need one per document.",
      "ts": "1666115996.337689",
      "thread_ts": "1666115996.337689",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 4,
      "latest_reply": "1666116360.220159",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Cr8cP",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0463CWEH99"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have a document based app. Each document is a bundle that includes a unique Core Data store. I'd like to sync each document separately using Core Data's built-in CloudKit sync API. How can I set a unique CKRecordZone for each document? Not sure if it changed in iOS 16 or Ventura, but it used to be it would create one CKRecordZone per app. I need one per document.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "7ce410d2-d845-478e-9710-eef6de02ecbe",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "That’s not a use case `NSPersistentCloudKitContainer` supports today.",
          "ts": "1666116009.013949",
          "thread_ts": "1666115996.337689",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "PQtby",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s not a use case "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " supports today."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "66154bdc-a1b8-4c2c-afc5-3421e2be63b3",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "You can create a way to distinguish between different documents in your object graph",
          "ts": "1666116030.717099",
          "thread_ts": "1666115996.337689",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lirkR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can create a way to distinguish between different documents in your object graph"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "22acab4b-2343-47de-808d-a3d4ea9140c9",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "But it’s worth a feedback report with some more details about your use case in the meantime.",
          "ts": "1666116042.226549",
          "thread_ts": "1666115996.337689",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3wR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "But it’s worth a feedback report with some more details about your use case in the meantime."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "82bddba1-d7e3-4b74-b285-33427ab50155",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "In the meantime I’m going to be using Ensembles to sync with Core Data. I was hoping I could do it with the built-in Core Data / CloudKit sync. That’s why I asked. Currently with Ensembles I can create a separate CKRecordZone for each document. So I have a solution. Just not a built-in one.",
          "ts": "1666116360.220159",
          "thread_ts": "1666115996.337689",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "aBKZq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In the meantime I’m going to be using Ensembles to sync with Core Data. I was hoping I could do it with the built-in Core Data / CloudKit sync. That’s why I asked. Currently with Ensembles I can create a separate CKRecordZone for each document. So I have a solution. Just not a built-in one."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046FS54ELA\u003e asked\n\u0026gt; Do you need to create a new Model Version if you are only adding new Attributes to an existing Entity with no other model changes?",
      "ts": "1666116019.013449",
      "thread_ts": "1666116019.013449",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 10,
      "latest_reply": "1666116292.421099",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "XKK4",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046FS54ELA"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Do you need to create a new Model Version if you are only adding new Attributes to an existing Entity with no other model changes?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "d42bc3d7-4ed4-4af6-8709-14a1f010ae47",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "~That’s not a use case `NSPersistentCloudKitContainer` supports today.~",
          "ts": "1666116055.912379",
          "thread_ts": "1666116019.013449",
          "edited": {
            "user": "U044D7NJJ3X",
            "ts": "1666116158.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "stFQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s not a use case ",
                      "style": {
                        "strike": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer",
                      "style": {
                        "strike": true,
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " supports today.",
                      "style": {
                        "strike": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "bb598030-e580-4515-b9f0-2d811f7bfb7b",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "“”",
          "ts": "1666116067.635569",
          "thread_ts": "1666116019.013449",
          "edited": {
            "user": "U044D7NJJ3X",
            "ts": "1666116175.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "QfyA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "“”"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1b54c1d2-27b1-44f3-abf1-d118a6f45257",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "~but that’s also worth a feedback report with some more details about your use case.~",
          "ts": "1666116079.668949",
          "thread_ts": "1666116019.013449",
          "edited": {
            "user": "U044D7NJJ3X",
            "ts": "1666116180.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Mkr4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "but that’s also worth a feedback report with some more details about your use case.",
                      "style": {
                        "strike": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a998d036-510b-4902-b5fe-3e2c145a5c53",
          "type": "message",
          "user": "U046FS54ELA",
          "text": "Thanks. I should clarify, I only meant for `NSPersistentContainer`, not `NSPersistentCloudKitContainer`",
          "ts": "1666116121.122069",
          "thread_ts": "1666116019.013449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "AM5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks. I should clarify, I only meant for "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentContainer",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", not "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentCloudKitContainer",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a05a8248-80cb-4f8b-a1a1-be0241dd71ab",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Ugh sorry, wrong question, cleaning up.",
          "ts": "1666116149.153339",
          "thread_ts": "1666116019.013449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+dAF",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ugh sorry, wrong question, cleaning up."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d338f2c5-b446-41a7-85f9-89664cd31fe3",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "This action implicitly creates a new version (by changing the model version hashes)",
          "ts": "1666116201.142329",
          "thread_ts": "1666116019.013449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "IQt",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This action implicitly creates a new version (by changing the model version hashes)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4d34d345-57cc-40ce-91a3-d3f13ef6a19f",
          "type": "message",
          "user": "U044D7NJJ3X",
          "text": "Whether or not you capture that as a distinct version is up to you",
          "ts": "1666116207.845619",
          "thread_ts": "1666116019.013449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "w+uW",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Whether or not you capture that as a distinct version is up to you"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1ef512b6-92f2-4791-a895-da51bde98656",
          "type": "message",
          "user": "U046FS54ELA",
          "text": "Great thanks :slightly_smiling_face:",
          "ts": "1666116217.969809",
          "thread_ts": "1666116019.013449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5fL",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Great thanks "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "47ab09b6-f83c-441c-b654-bdabca0511a8",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "No you don’t need to. Adding new attributes qualifies as “lightweight” so it is eligible for Core Data to do for you",
          "ts": "1666116255.414849",
          "thread_ts": "1666116019.013449",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U046FS54ELA"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "td8VY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "No you don’t need to. Adding new attributes qualifies as “lightweight” so it is eligible for Core Data to do for you"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8ddc259f-9459-4f00-8004-c1c7c285de8b",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "Check out this talk for more lightweight eligible operations: \u003chttps://developer.apple.com/videos/play/wwdc2022/10120/\u003e",
          "ts": "1666116292.421099",
          "thread_ts": "1666116019.013449",
          "attachments": [
            {
              "fallback": "Apple Developer: Evolve your Core Data schema - WWDC22 - Videos - Apple Developer",
              "id": 1,
              "title": "Evolve your Core Data schema - WWDC22 - Videos - Apple Developer",
              "title_link": "https://developer.apple.com/videos/play/wwdc2022/10120/",
              "text": "Learn how you can cleanly migrate Core Data schemas after updating your app, and breeze through data model changes. We'll show you how...",
              "image_url": "https://devimages-cdn.apple.com/wwdc-services/images/124/6616/6616_wide_250x141_2x.jpg",
              "service_name": "Apple Developer",
              "service_icon": "https://developer.apple.com/favicon.ico",
              "from_url": "https://developer.apple.com/videos/play/wwdc2022/10120/",
              "original_url": "https://developer.apple.com/videos/play/wwdc2022/10120/",
              "blocks": null
            }
          ],
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U046FS54ELA"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yUntw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Check out this talk for more lightweight eligible operations: "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/videos/play/wwdc2022/10120/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "d92a92a5-a433-4d9e-a63c-6e505dc519e9",
      "type": "message",
      "user": "U0455R18DT2",
      "text": "That does it for our *Q\u0026amp;A: Core Data* activity! :star-struck: Thank you all for flying with us today, and for asking such great questions!\n\nDon’t miss any of the other awesome activities happening this week during Ask Apple! Tune back in here for another *Q\u0026amp;A: Core Data* activity on *Thursday, 10/20 at 10am PDT*. Sign up for some one-on-one office hours with folks like the *Technology Evangelism*, *Design Evangelism*, and *Developer Technical Support* teams!\n\nWe hope to see you on our next flight! :small_airplane:",
      "ts": "1666116065.891419",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "+1",
          "count": 4,
          "users": [
            "U04673H2H8C",
            "U0463CWEH99",
            "U04678YRK98",
            "U046W09K7LG"
          ]
        },
        {
          "name": "tada",
          "count": 3,
          "users": [
            "U044UR1MYF3",
            "U0463PJJB34",
            "U046W09K7LG"
          ]
        },
        {
          "name": "gratitude-thank-you",
          "count": 2,
          "users": [
            "U0463PJJB34",
            "U046W09K7LG"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "CWeL",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "That does it for our "
                },
                {
                  "type": "text",
                  "text": "Q\u0026A: Core Data",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": " activity! "
                },
                {
                  "type": "emoji",
                  "name": "star-struck",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " Thank you all for flying with us today, and for asking such great questions!\n\nDon’t miss any of the other awesome activities happening this week during Ask Apple! Tune back in here for another "
                },
                {
                  "type": "text",
                  "text": "Q\u0026A: Core Data",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": " activity on "
                },
                {
                  "type": "text",
                  "text": "Thursday, 10/20 at 10am PDT",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": ". Sign up for some one-on-one office hours with folks like the "
                },
                {
                  "type": "text",
                  "text": "Technology Evangelism",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "Design Evangelism",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "Developer Technical Support",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": " teams!\n\nWe hope to see you on our next flight! "
                },
                {
                  "type": "emoji",
                  "name": "small_airplane",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "e6b74806-5bae-4153-bfef-f9c1576bdfd9",
      "type": "message",
      "user": "U0455R18DT2",
      "text": "Hello everybody — we hope you’ve been enjoying Ask Apple so far! Our final *Q\u0026amp;A: Core Data* activity for the week will start here at *10am PDT*! Check out the following resources while we warm up our engines:\n• \u003chttps://developer.apple.com/videos/play/wwdc2022/10120/|WWDC22 — Evolve your Core Data schema\u003e\n• \u003chttps://developer.apple.com/videos/play/wwdc2022/10119/|WWDC22 — Optimize your use of Core Data and CloudKit\u003e\n• \u003chttps://developer.apple.com/documentation/coredata|Core Data documentation\u003e\nSelect the :heavy_plus_sign: icon in the text field and use the “Ask a question” workflow to submit your Core Data questions now! Apple experts will answer as many of them as they can during the scheduled Q\u0026amp;A.",
      "ts": "1666278300.760059",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "swift-blue",
          "count": 2,
          "users": [
            "U04678YRK98",
            "U0464MDV42G"
          ]
        },
        {
          "name": "raised_hands",
          "count": 2,
          "users": [
            "U0462AL317X",
            "U04742GGNQY"
          ]
        },
        {
          "name": "tada",
          "count": 1,
          "users": [
            "U047J00UMR7"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "e8B1",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "Hello everybody — we hope you’ve been enjoying Ask Apple so far! Our final "
                },
                {
                  "type": "text",
                  "text": "Q\u0026A: Core Data",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": " activity for the week will start here at "
                },
                {
                  "type": "text",
                  "text": "10am PDT",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": "! Check out the following resources while we warm up our engines:\n"
                }
              ]
            },
            {
              "Type": "rich_text_list",
              "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/videos\\/play\\/wwdc2022\\/10120\\/\",\"text\":\"WWDC22 \\u2014 Evolve your Core Data schema\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/videos\\/play\\/wwdc2022\\/10119\\/\",\"text\":\"WWDC22 \\u2014 Optimize your use of Core Data and CloudKit\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/documentation\\/coredata\",\"text\":\"Core Data documentation\"}]}],\"style\":\"bullet\",\"indent\":0,\"border\":0}"
            },
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "\nSelect the "
                },
                {
                  "type": "emoji",
                  "name": "heavy_plus_sign",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " icon in the text field and use the “Ask a question” workflow to submit your Core Data questions now! Apple experts will answer as many of them as they can during the scheduled Q\u0026A."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "77160d7d-f331-45a5-94c6-2058cd97f9fb",
      "type": "message",
      "user": "U0455R18DT2",
      "text": "\u003c!here\u003e It’s lights out, and away we go! :traffic_light:\n\n*Q\u0026amp;A: Core Data* is starting now! Apple experts are here and ready to answer your questions on all things Core Data. Select the :heavy_plus_sign: icon from the lower left, and use the “Ask a question” workflow to submit a question for our experts to answer. This activity ends in 60 minutes, so don’t hold onto those great questions you have!",
      "ts": "1666285213.752249",
      "team": "T03U5MWB2FN",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "8wV",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "broadcast",
                  "range": "here"
                },
                {
                  "type": "text",
                  "text": " It’s lights out, and away we go! "
                },
                {
                  "type": "emoji",
                  "name": "traffic_light",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": "\n\n"
                },
                {
                  "type": "text",
                  "text": "Q\u0026A: Core Data",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": " is starting now! Apple experts are here and ready to answer your questions on all things Core Data. Select the "
                },
                {
                  "type": "emoji",
                  "name": "heavy_plus_sign",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " icon from the lower left, and use the “Ask a question” workflow to submit a question for our experts to answer. This activity ends in 60 minutes, so don’t hold onto those great questions you have!"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046JDG2Q73\u003e asked\n\u0026gt; Hi, could you share a link to some more syntax examples of 'Derived Attributes' other than '.@count' that has been quite useful since WWDC talk? Thanks in advance.",
      "ts": "1666285247.078669",
      "thread_ts": "1666285247.078669",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 6,
      "latest_reply": "1666287476.313879",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "lu+D",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046JDG2Q73"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hi, could you share a link to some more syntax examples of 'Derived Attributes' other than '.@count' that has been quite useful since WWDC talk? Thanks in advance.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "c6b3bf04-401c-49ab-813a-d733e78db986",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "There are a few noted in the Docs for NSDerivedAttributeDescription:\n\n\u003chttps://developer.apple.com/documentation/coredata/nsderivedattributedescription\u003e",
          "ts": "1666285270.079409",
          "thread_ts": "1666285247.078669",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vLsiY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There are a few noted in the Docs for NSDerivedAttributeDescription:\n\n"
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/nsderivedattributedescription",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "67b32584-e34d-44ba-b7fa-40344379442a",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "It would be amazing if we could create custom derivation functions.",
          "ts": "1666285418.065569",
          "thread_ts": "1666285247.078669",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "pEKi",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It would be amazing if we could create custom derivation functions."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ec637d2a-6f99-4fd7-936a-c977c4e2b310",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "Please send us Feedback for that at:\n\u003chttp://feedbackassistant.apple.com|feedbackassistant.apple.com\u003e",
          "ts": "1666285500.919269",
          "thread_ts": "1666285247.078669",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0463CWEH99"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vA6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Please send us Feedback for that at:\n"
                    },
                    {
                      "type": "link",
                      "url": "http://feedbackassistant.apple.com",
                      "text": "feedbackassistant.apple.com"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c91103c9-c737-4bd8-ab87-da8f3e3cdca6",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "Showing us an example of the types of custom derivations in that Feedback would be helpful as well",
          "ts": "1666285535.946169",
          "thread_ts": "1666285247.078669",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jDaXd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Showing us an example of the types of custom derivations in that Feedback would be helpful as well"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c92efdf6-98f6-4447-8536-42ad73e59ef0",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Will do. Like the `@count` function, but a way to specify a parameter for the count query. E.g. `@count(predicate: 'parentRecord == nil')` or something like that. I want to show the number of records in a form in my database, but only count those who’s `parentRecord` property is nil. So that the badge displayed next to the form name is always up to date. It would be if I could just use `@count` but I need the extra qualifier.",
          "ts": "1666287225.926059",
          "thread_ts": "1666285247.078669",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heavy_plus_sign",
              "count": 1,
              "users": [
                "U0463PJJB34"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "8hXpi",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Will do. Like the "
                    },
                    {
                      "type": "text",
                      "text": "@count",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " function, but a way to specify a parameter for the count query. E.g. "
                    },
                    {
                      "type": "text",
                      "text": "@count(predicate: 'parentRecord == nil')",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " or something like that. I want to show the number of records in a form in my database, but only count those who’s "
                    },
                    {
                      "type": "text",
                      "text": "parentRecord",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " property is nil. So that the badge displayed next to the form name is always up to date. It would be if I could just use "
                    },
                    {
                      "type": "text",
                      "text": "@count",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " but I need the extra qualifier."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "034cc672-fd35-4ab7-b816-d55fe04d2a4b",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "FB11707936 submitted",
          "ts": "1666287476.313879",
          "thread_ts": "1666285247.078669",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U044UR3FUPK"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yhBj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FB11707936 submitted"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046W09K7LG\u003e asked\n\u0026gt; Is it me, or a bug, that on macOS thumbnailData and thumbnailURL are ignored in Spotlight results when using Core Data's Spotlight integration?\n\u0026gt; All the results just show my app's icon instead of the thumbnailURL or thumbnailData I provide.",
      "ts": "1666285334.539639",
      "thread_ts": "1666285334.539639",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666285425.966949",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "u0k",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046W09K7LG"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is it me, or a bug, that on macOS thumbnailData and thumbnailURL are ignored in Spotlight results when using Core Data's Spotlight integration?\\nAll the results just show my app's icon instead of the thumbnailURL or thumbnailData I provide.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "cfaa72ab-ab8b-40da-adae-6a1ee52d7ecc",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "Do you have a sample project you could share? These are valid properties on the attribute set that should be passed through to Core Spotlight.",
          "ts": "1666285425.966949",
          "thread_ts": "1666285334.539639",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "cCyO",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Do you have a sample project you could share? These are valid properties on the attribute set that should be passed through to Core Spotlight."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046G60KMFB\u003e asked\n\u0026gt; I have a main app and an extension which both reads the same Core Data database. When I make changes in my main app, however, my extension doesn't see the changes until it is restarted. Can I simply call NSManagedObjectContext.refreshAllObjects() in order to solve this problem, or do I have to do the hard way, i.e., enable history tracking, detect remote changes, merge changes from transactions, clean up transaction history, etc?",
      "ts": "1666285375.443379",
      "thread_ts": "1666285375.443379",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666285680.254049",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "NUAm",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046G60KMFB"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have a main app and an extension which both reads the same Core Data database. When I make changes in my main app, however, my extension doesn't see the changes until it is restarted. Can I simply call NSManagedObjectContext.refreshAllObjects() in order to solve this problem, or do I have to do the hard way, i.e., enable history tracking, detect remote changes, merge changes from transactions, clean up transaction history, etc?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "9715db29-58ad-4aeb-9526-93fc9f9b2756",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "At the very least, you would want to enable Remote Change Notifications via `NSPersistentStoreRemoteChangeNotificationOptionKey` option on your `NSPersistentStore`\n\n\nSee also this doc on handling Relevant Store Changes:\n\u003chttps://developer.apple.com/documentation/coredata/consuming_relevant_store_changes\u003e",
          "ts": "1666285638.484879",
          "thread_ts": "1666285375.443379",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U046G60KMFB"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YeK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "At the very least, you would want to enable Remote Change Notifications via "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentStoreRemoteChangeNotificationOptionKey",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " option on your "
                    },
                    {
                      "type": "text",
                      "text": "NSPersistentStore",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n\n\nSee also this doc on handling Relevant Store Changes:\n"
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/consuming_relevant_store_changes",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "28059bfa-dc4d-49af-af82-c1bbdce3b720",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "The Persistent History portion of the approach helps ensure you do not encounter large refetches and only refresh if the data you need has changed",
          "ts": "1666285680.254049",
          "thread_ts": "1666285375.443379",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U046G60KMFB"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "hyq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The Persistent History portion of the approach helps ensure you do not encounter large refetches and only refresh if the data you need has changed"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0463CWEH99\u003e asked\n\u0026gt; When using Spotlight to index content in Core Data, is it possible to specify where the Spotlight index is stored? I have a document based app which is a package bundle that contains some files along side the Core Data store sqlite files. If the user deletes the document outside of the app, such as in the Finder, I want the Spotlight index to be deleted along with it. So I thought if the index could be stored within the package bundle folder, that would take care of that case. Is there a way to handle this situation properly?",
      "ts": "1666285457.171969",
      "thread_ts": "1666285457.171969",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 9,
      "latest_reply": "1666286332.744629",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "/Zo",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0463CWEH99"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When using Spotlight to index content in Core Data, is it possible to specify where the Spotlight index is stored? I have a document based app which is a package bundle that contains some files along side the Core Data store sqlite files. If the user deletes the document outside of the app, such as in the Finder, I want the Spotlight index to be deleted along with it. So I thought if the index could be stored within the package bundle folder, that would take care of that case. Is there a way to handle this situation properly?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "bff9e192-5faf-433d-b9c5-dbd88944911f",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "This sounds like a valuable enhancement and would encourage you to file Feedback requesting it!",
          "ts": "1666285511.823279",
          "thread_ts": "1666285457.171969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "r0T4f",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This sounds like a valuable enhancement and would encourage you to file Feedback requesting it!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "98d9a18e-fa19-4d43-9dd5-e35f7eb70237",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Ok, will do. So I’m guessing that means the index is stored somewhere centrally in the OS and it’s not configurable.",
          "ts": "1666285583.834459",
          "thread_ts": "1666285457.171969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "AMT",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok, will do. So I’m guessing that means the index is stored somewhere centrally in the OS and it’s not configurable."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "28ef9b78-1f9c-4455-9ade-a2b10f9fa371",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Is calling the APIs from within my app the only way to delete items from the index then?",
          "ts": "1666285619.750259",
          "thread_ts": "1666285457.171969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7N3MQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Is calling the APIs from within my app the only way to delete items from the index then?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "02b4b4e1-e16d-48d1-86b8-b7da5187bfed",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "That’s correct.",
          "ts": "1666285626.967599",
          "thread_ts": "1666285457.171969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mOs0y",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s correct."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4a37e66d-cc86-49a6-945a-19ffd705d9cc",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Ok. thanks.",
          "ts": "1666285636.489109",
          "thread_ts": "1666285457.171969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "unub",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok. thanks."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "301441f8-363d-4a0d-8ae8-8d1f24366444",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "FYI, currently I’m using SQLite’s FTS in a separate sqlite database file I store in the package bundle. I use that for full text searching. But I was hoping to switch to Spotlight.",
          "ts": "1666285692.425519",
          "thread_ts": "1666285457.171969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yijNX",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FYI, currently I’m using SQLite’s FTS in a separate sqlite database file I store in the package bundle. I use that for full text searching. But I was hoping to switch to Spotlight."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "01fdd43f-6260-475a-9138-a5f1d885c30b",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "NSCoreDataCoreSpotlightDelegate can definitely help you with that, and we also had a 2021 WWDC session on it. \u003chttps://developer.apple.com/videos/play/wwdc2021/10098/\u003e",
          "ts": "1666285778.674829",
          "thread_ts": "1666285457.171969",
          "attachments": [
            {
              "fallback": "Apple Developer: Showcase app data in Spotlight - WWDC21 - Videos - Apple Developer",
              "id": 1,
              "title": "Showcase app data in Spotlight - WWDC21 - Videos - Apple Developer",
              "title_link": "https://developer.apple.com/videos/play/wwdc2021/10098/",
              "text": "Discover how Core Data can surface data from your app in Spotlight with as little as two lines of code. Learn how to make that data...",
              "image_url": "https://devimages-cdn.apple.com/wwdc-services/images/119/4994/4994_wide_250x141_2x.jpg",
              "service_name": "Apple Developer",
              "service_icon": "https://developer.apple.com/favicon.ico",
              "from_url": "https://developer.apple.com/videos/play/wwdc2021/10098/",
              "original_url": "https://developer.apple.com/videos/play/wwdc2021/10098/",
              "blocks": null
            }
          ],
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "qTJ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "NSCoreDataCoreSpotlightDelegate can definitely help you with that, and we also had a 2021 WWDC session on it. "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/videos/play/wwdc2021/10098/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3ab71dac-88b3-45c4-b336-cf8f20a0522a",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "That’s what got me interested in switching to Spotlight actually. But the issue of deleting the index gets tricky since customers could delete the database in the Finder and I don’t know if the Spotlight index could be notified about that.",
          "ts": "1666285908.818179",
          "thread_ts": "1666285457.171969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jldXk",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s what got me interested in switching to Spotlight actually. But the issue of deleting the index gets tricky since customers could delete the database in the Finder and I don’t know if the Spotlight index could be notified about that."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c692b3d9-a1c8-4a3d-aa16-1c24bf5d1201",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "FB11707893 submitted.",
          "ts": "1666286332.744629",
          "thread_ts": "1666285457.171969",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0441KCTUF9"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "dt2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FB11707893 submitted."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046JDG2Q73\u003e asked\n\u0026gt; Could you suggest why @FetchRequest could be superior in terms of performance benefits over the old system of Publishing init() fetchRequest() in a ViewModel, while also calling fetchUsers() on every save - especially when there are a lot of relationships between entities? - I am thinking to transition, so the question. Thanks in advance.",
      "ts": "1666285851.563839",
      "thread_ts": "1666285851.563839",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 7,
      "latest_reply": "1666293547.351459",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Wnqm",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046JDG2Q73"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Could you suggest why @FetchRequest could be superior in terms of performance benefits over the old system of Publishing init() fetchRequest() in a ViewModel, while also calling fetchUsers() on every save - especially when there are a lot of relationships between entities? - I am thinking to transition, so the question. Thanks in advance.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "ccba4289-39a7-46ad-b93b-5675428ff819",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "After the initial fetch is complete, `@FetchRequest`’s costs are related to how much the results change, while the cost of manually refetching is in terms of the total number of results.",
          "ts": "1666285867.342729",
          "thread_ts": "1666285851.563839",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "j7h",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "After the initial fetch is complete, "
                    },
                    {
                      "type": "text",
                      "text": "@FetchRequest",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "’s costs are related to how much the results change, while the cost of manually refetching is in terms of the total number of results."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8bc981e8-03e8-4eed-8d99-a7fb39817447",
          "type": "message",
          "user": "U0463PJJB34",
          "text": "Behind the scenes is `@FetchRequest` leveraging `NSManagedObjectContextObjectsDidChange` for further updates then?",
          "ts": "1666290011.436209",
          "thread_ts": "1666285851.563839",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "LqD",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Behind the scenes is "
                    },
                    {
                      "type": "text",
                      "text": "@FetchRequest",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " leveraging "
                    },
                    {
                      "type": "text",
                      "text": "NSManagedObjectContextObjectsDidChange",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " for further updates then?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5628fe0e-031e-4d5a-b39c-34423b4342c9",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "There’s a bit more machinery but basically yeah.",
          "ts": "1666290288.990639",
          "thread_ts": "1666285851.563839",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "s/un5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There’s a bit more machinery but basically yeah."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2c8b7321-4181-4353-8e2e-002803804f52",
          "type": "message",
          "user": "U0463PJJB34",
          "text": "Got it, thank you!",
          "ts": "1666290645.415399",
          "thread_ts": "1666285851.563839",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EXhP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Got it, thank you!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f395b6ec-e824-4553-9acb-6632c8d08585",
          "type": "message",
          "user": "U046UH29M24",
          "text": "So `@FetchRequest` is doing basically the same thing internally as an `NSFetchedResultsController` ?",
          "ts": "1666292039.742839",
          "thread_ts": "1666285851.563839",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=MRXE",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "So "
                    },
                    {
                      "type": "text",
                      "text": "@FetchRequest",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " is doing basically the same thing internally as an "
                    },
                    {
                      "type": "text",
                      "text": "NSFetchedResultsController",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " ?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "98481a11-ac05-4aa1-b2d7-40cc4667607f",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "`@FetchRequest` wraps an `NSFetchedResultsController`, it has no special logic of its own beyond constructing and performing additional fetch requests when needed.",
          "ts": "1666293020.942059",
          "thread_ts": "1666285851.563839",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U0463PJJB34",
                "U046UH29M24"
              ]
            },
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0463PJJB34"
              ]
            },
            {
              "name": "100",
              "count": 1,
              "users": [
                "U0463PJJB34"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "s99",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "@FetchRequest",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " wraps an "
                    },
                    {
                      "type": "text",
                      "text": "NSFetchedResultsController",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", it has no special logic of its own beyond constructing and performing additional fetch requests when needed."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "77138f55-b518-4af7-a652-43449b9e3f31",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "(This means that existing limitations, like predicates/sorts that cross a relationship boundary, are the same)",
          "ts": "1666293547.351459",
          "thread_ts": "1666285851.563839",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "VbD",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "(This means that existing limitations, like predicates/sorts that cross a relationship boundary, are the same)"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046JDG2Q73\u003e asked\n\u0026gt; I have 2 entities, candy \u0026amp; country - and I would like to use @FetchRequest to obtain all candies within a specific country entity. Currently, I obtain all candies from @FetchRequest \u0026amp; then pass in the country entity from a previous navigation view as a constant (let country: Country?) \u0026amp; filter the results in the view body. \n\u0026gt; \n\u0026gt; Is there a way to obtain the same results using predicates within the @FetchRequest itself before the body even gets rendered?",
      "ts": "1666286092.023789",
      "thread_ts": "1666286092.023789",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666286185.676509",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "FkSmZ",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046JDG2Q73"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have 2 entities, candy \u0026 country - and I would like to use @FetchRequest to obtain all candies within a specific country entity. Currently, I obtain all candies from @FetchRequest \u0026 then pass in the country entity from a previous navigation view as a constant (let country: Country?) \u0026 filter the results in the view body. \\n\\nIs there a way to obtain the same results using predicates within the @FetchRequest itself before the body even gets rendered?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "f547acc1-692c-4a1a-bf01-b61787fba0ad",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "It’ll be faster to make Core Data do the filtering work by constructing a predicate, something like `NSPredicate(format: \"country = %@\", country)`",
          "ts": "1666286145.313589",
          "thread_ts": "1666286092.023789",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Azd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It’ll be faster to make Core Data do the filtering work by constructing a predicate, something like "
                    },
                    {
                      "type": "text",
                      "text": "NSPredicate(format: \"country = %@\", country)",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c565fdbe-c7ef-486f-a880-8692a338a945",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "You can set the `predicate` property of the `@FetchRequest` and everything should Just Work™",
          "ts": "1666286185.676509",
          "thread_ts": "1666286092.023789",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "100",
              "count": 1,
              "users": [
                "U0462GLRHU3"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0gw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can set the "
                    },
                    {
                      "type": "text",
                      "text": "predicate",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " property of the "
                    },
                    {
                      "type": "text",
                      "text": "@FetchRequest",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and everything should Just Work™"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04635RACJW\u003e asked\n\u0026gt; I was wondering if it's best to load CoreData data once in my app and save it in a local variable or if it's best to have multiple FetchRequests? \n\u0026gt; \n\u0026gt; E.g. I'm using the new UICalendarView embedded within SwiftUI and fetching data from CoreData. Is it okay here to have a fetchRequest within the calendarView(_:decorationFor:) method to load decorations for each single date within the calendar? Or would it be best to have one fetchRequest and then save the data locally and then access it from the above mentioned method? Wondering what the best practice here is. Thank you!",
      "ts": "1666286348.808529",
      "thread_ts": "1666286348.808529",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666286353.033169",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "=yF",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04635RACJW"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I was wondering if it's best to load CoreData data once in my app and save it in a local variable or if it's best to have multiple FetchRequests? \\n\\nE.g. I'm using the new UICalendarView embedded within SwiftUI and fetching data from CoreData. Is it okay here to have a fetchRequest within the calendarView(_\"},{\"type\":\"emoji\",\"name\":\"decorationFor\"},{\"type\":\"text\",\"text\":\") method to load decorations for each single date within the calendar? Or would it be best to have one fetchRequest and then save the data locally and then access it from the above mentioned method? Wondering what the best practice here is. Thank you!\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "37ae3f39-7798-488e-9677-ce4e19c6c33b",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "In general, different views frequently use different fetch requests. For something like a date range, you’d want to fetch a batch at a time. Too much I/O will stall your view drawing. Too small I/O will cause you to issue too many individual requests, which are much more inefficient. Instruments Core Data performance tool can help investigate what the just right is for your view",
          "ts": "1666286353.033169",
          "thread_ts": "1666286348.808529",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U04635RACJW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yMjB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In general, different views frequently use different fetch requests. For something like a date range, you’d want to fetch a batch at a time. Too much I/O will stall your view drawing. Too small I/O will cause you to issue too many individual requests, which are much more inefficient. Instruments Core Data performance tool can help investigate what the just right is for your view"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046SQBFNS1\u003e asked\n\u0026gt; Are there any Apple Using-Core Data-with-SwiftUI tutorials, documents, sample projects, or tech talk videos I have overlooked?\n\u0026gt; \n\u0026gt; Everything I find from third parties stops with an \"all\" predicate and doesn't get into how to set up more focused fetches. I know how to do predicates, it's more the SwiftUI integration with Core Data that's eluding me.\n\u0026gt; \n\u0026gt; Can you provide any pointers?\n\u0026gt; \n\u0026gt; If not, please take this as a request for some documentation or presentation that goes beyond the \"all\" predicate and shows the recommendation on the best way to integrate Core Data and SwiftUI.",
      "ts": "1666286405.409869",
      "thread_ts": "1666286405.409869",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 4,
      "latest_reply": "1666288770.269459",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "L1nKE",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046SQBFNS1"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Are there any Apple Using-Core Data-with-SwiftUI tutorials, documents, sample projects, or tech talk videos I have overlooked?\\n\\nEverything I find from third parties stops with an \\\"all\\\" predicate and doesn't get into how to set up more focused fetches. I know how to do predicates, it's more the SwiftUI integration with Core Data that's eluding me.\\n\\nCan you provide any pointers?\\n\\nIf not, please take this as a request for some documentation or presentation that goes beyond the \\\"all\\\" predicate and shows the recommendation on the best way to integrate Core Data and SwiftUI.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "0dfcd8ce-d075-4215-96b6-ef2af8c228b9",
          "type": "message",
          "user": "U044G3TBMGB",
          "text": "There’s a couple existing resources that could help - here’s a Core Data with SwiftUI sample app: \u003chttps://developer.apple.com/documentation/coredata/loading_and_displaying_a_large_data_feed\u003e and the associated WWDC21 video that goes along with it with some more additional information: \u003chttps://developer.apple.com/videos/play/wwdc2021/10017/\u003e\n\nAlso, here’s some more documentation that could help, specifically under the section “Accessing Core Data” - \u003chttps://developer.apple.com/documentation/swiftui/persistent-storage\u003e",
          "ts": "1666286446.162279",
          "thread_ts": "1666286405.409869",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "A4a",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There’s a couple existing resources that could help - here’s a Core Data with SwiftUI sample app: "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/loading_and_displaying_a_large_data_feed",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": " and the associated WWDC21 video that goes along with it with some more additional information: "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/videos/play/wwdc2021/10017/",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": "\n\nAlso, here’s some more documentation that could help, specifically under the section “Accessing Core Data” - "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/persistent-storage",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4bc647bf-6242-4a42-abcb-5a1853cd18be",
          "type": "message",
          "user": "U046SQBFNS1",
          "text": "Thanks. Unfortunately that (Earthquakes) sample code (which is also the go-to example referenced by the document) does not go beyond the simple \"all items\" predicate, so did my question not get across clearly? Or am I missing something? I will rewatch the wwdc video, which often helps. ;-)",
          "ts": "1666287983.705389",
          "thread_ts": "1666286405.409869",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "pq5R",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks. Unfortunately that (Earthquakes) sample code (which is also the go-to example referenced by the document) does not go beyond the simple \"all items\" predicate, so did my question not get across clearly? Or am I missing something? I will rewatch the wwdc video, which often helps. ;-)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ea454a1c-9a79-4fe1-9b8f-b23a671f5520",
          "type": "message",
          "user": "U044G3TBMGB",
          "text": "These are the main resources currently available, but that being said, I believe the wwdc video will have more information on what you’re looking for than just the Earthquakes sample code",
          "ts": "1666288394.744269",
          "thread_ts": "1666286405.409869",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Eyin",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "These are the main resources currently available, but that being said, I believe the wwdc video will have more information on what you’re looking for than just the Earthquakes sample code"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "43b479d5-28f0-4ffd-ac0f-2a078f49e0f9",
          "type": "message",
          "user": "U046SQBFNS1",
          "text": "Will check that out. I appreciate your time and the answers — Thank you!",
          "ts": "1666288770.269459",
          "thread_ts": "1666286405.409869",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "1qBOr",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Will check that out. I appreciate your time and the answers — Thank you!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0465D05CTU\u003e asked\n\u0026gt; In an iOS app I need to measure the elapsed time between two distinct moments independently of any possibile manual change of the device date. Is there any way to do that?",
      "ts": "1666286418.955489",
      "thread_ts": "1666286418.955489",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666286606.585109",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "hUOm",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0465D05CTU"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"In an iOS app I need to measure the elapsed time between two distinct moments independently of any possibile manual change of the device date. Is there any way to do that?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "4DC9D377-647D-4375-9FFD-F70612BF6195",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "You can use CACurrentMediaTime() or mach_absolute_time for monotonically increasing time that’s immune to date / calendar changes ",
          "ts": "1666286542.575309",
          "thread_ts": "1666286418.955489",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2csW",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can use CACurrentMediaTime() or mach_absolute_time for monotonically increasing time "
                    },
                    {
                      "type": "text",
                      "text": "that’s"
                    },
                    {
                      "type": "text",
                      "text": " immune to date / calendar changes "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "670CF99E-BDB1-47A0-B0AD-0DD2F4C64088",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "That’s usually good enough for most purposes.  If their level of guarantee isn’t trustworthy enough (banking ?) then you’re probably stuck with using an NTP server ",
          "ts": "1666286606.585109",
          "thread_ts": "1666286418.955489",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xG00u",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s usually good enough for most purposes.  If their level of guarantee "
                    },
                    {
                      "type": "text",
                      "text": "isn’t"
                    },
                    {
                      "type": "text",
                      "text": " trustworthy enough (banking ?) then you’re probably stuck with using an NTP server "
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045MMSNB3R\u003e asked\n\u0026gt; I need to set a predicate to a @SectionedFetchRequest / @FetchRequest\n\u0026gt; The predicate declaration is as follows:\n\u0026gt; \n\u0026gt; NSPredicate(format: “relationship == %@\", myInstanceMember)\n\u0026gt; \n\u0026gt; Predicate can’t be set in the property initializer because self is not available, and can’t be set at init neither…\n\u0026gt; At the moment I’m setting the predicate to the request configuration’s nsPredicate, on view’s .task / .onAppear, and works well, but as soon as the view is updated the request’s predicate is set to nil.\n\u0026gt; What would be the approach to set this kind of formatted predicate in a permanent way?",
      "ts": "1666286428.493389",
      "thread_ts": "1666286428.493389",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666286454.214669",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "YE6Sw",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045MMSNB3R"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I need to set a predicate to a @SectionedFetchRequest \\/ @FetchRequest\\nThe predicate declaration is as follows:\\n\\nNSPredicate(format: \\u201crelationship == %@\\\", myInstanceMember)\\n\\nPredicate can\\u2019t be set in the property initializer because self is not available, and can\\u2019t be set at init neither\\u2026\\nAt the moment I\\u2019m setting the predicate to the request configuration\\u2019s nsPredicate, on view\\u2019s .task \\/ .onAppear, and works well, but as soon as the view is updated the request\\u2019s predicate is set to nil.\\nWhat would be the approach to set this kind of formatted predicate in a permanent way?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "290b8e2a-4d2e-46a7-ac74-2e493ae5a9a0",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "The configuration of the fetch request should be pretty durable, can you file a Feedback with a reproducing project so we can have a closer look?",
          "ts": "1666286454.214669",
          "thread_ts": "1666286428.493389",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "GIA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The configuration of the fetch request should be pretty durable, can you file a Feedback with a reproducing project so we can have a closer look?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0463CWEH99\u003e asked\n\u0026gt; I have an NSAttributedString I need to store in the database. The records need to be searchable by any text inside the attributed string. Is it best to have two separate properties, one to contain the plain text string and another to contain the Transformable property that contains the attributed string? If so, they would need to be kept in sync when the user changes the attributed string. Perhaps there's a better technique to reduce the amount of data stored by having two properties storing the plain text and attributed text versions?",
      "ts": "1666286488.926919",
      "thread_ts": "1666286488.926919",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666286644.708939",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "u+Pc",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0463CWEH99"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have an NSAttributedString I need to store in the database. The records need to be searchable by any text inside the attributed string. Is it best to have two separate properties, one to contain the plain text string and another to contain the Transformable property that contains the attributed string? If so, they would need to be kept in sync when the user changes the attributed string. Perhaps there's a better technique to reduce the amount of data stored by having two properties storing the plain text and attributed text versions?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "20ee3725-33ab-446b-9868-48f19396d1b7",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "This would be a recommended way. In addition, the plain-text attribute could be indexed and Spotlighted so that they are searchable",
          "ts": "1666286600.613319",
          "thread_ts": "1666286488.926919",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "tKtA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This would be a recommended way. In addition, the plain-text attribute could be indexed and Spotlighted so that they are searchable"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c8e6e645-a150-4999-9913-30615c05bffe",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Excellent. Was just looking for confirmation that what I’m already doing was the best (or only) way. Thanks.",
          "ts": "1666286644.708939",
          "thread_ts": "1666286488.926919",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "LUKk",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Excellent. Was just looking for confirmation that what I’m already doing was the best (or only) way. Thanks."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U047VNWH0HW\u003e asked\n\u0026gt; I need to start a new project and I’m happy with my existing data in a CoreData Store in another project.\n\u0026gt; My question is, How can I start a new project but use an old store that has data in it already?\n\u0026gt; \n\u0026gt; It is SQLite based. \n\u0026gt; \n\u0026gt; I’ve tried:\n\u0026gt; 1. dragging and dropping the .xcdatamodeld into the new project and changing the parameter for the persistent container name.\n\u0026gt; \n\u0026gt; 2. moving the sqlite store (the -sqlite, -wal and -shm files) and and copy it over to the new project’s application support area\n\u0026gt; 3. changing the version.\n\u0026gt; \u2028For all of these I’ve changed the persistent container name to the correct name. The app compiles, but no data shows.\n\u0026gt; The old stores have about 70kb of data according to the file manager.\n\u0026gt;  \n\u0026gt; Hope that is a clear enough question.",
      "ts": "1666286522.947179",
      "thread_ts": "1666286522.947179",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 46,
      "latest_reply": "1666291754.670749",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "/rMVv",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U047VNWH0HW"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I need to start a new project and I\\u2019m happy with my existing data in a CoreData Store in another project.\\nMy question is, How can I start a new project but use an old store that has data in it already?\\n\\nIt is SQLite based. \\n\\nI\\u2019ve tried:\\n1. dragging and dropping the .xcdatamodeld into the new project and changing the parameter for the persistent container name.\\n\\n2. moving the sqlite store (the -sqlite, -wal and -shm files) and and copy it over to the new project\\u2019s application support area\\n3. changing the version.\\n\\u2028For all of these I\\u2019ve changed the persistent container name to the correct name. The app compiles, but no data shows.\\nThe old stores have about 70kb of data according to the file manager.\\n \\nHope that is a clear enough question.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "3910256a-7912-49ac-839d-46b01fd6281d",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "If you set `-com.apple.CoreData.SQLDebug 1` in the process’ arguments, Core Data will log the database path on open—does it match your expectations?",
          "ts": "1666286558.111679",
          "thread_ts": "1666286522.947179",
          "edited": {
            "user": "U0449HM5ZE2",
            "ts": "1666286564.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "MEX",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you set "
                    },
                    {
                      "type": "text",
                      "text": "-com.apple.CoreData.SQLDebug 1",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " in the process’ arguments, Core Data will log the database path on open—does it match your expectations?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "bd28ab16-70a4-4821-9523-705cf7a11108",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "Just checking, thanks",
          "ts": "1666286965.334309",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=hz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Just checking, thanks"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ed04906d-fa41-43b2-8c31-dc5b0522218b",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "I have that set, but I don’t see any log at all to the database path? will it be in the debugger or where is it logged?",
          "ts": "1666287236.847359",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "uPb",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I have that set, but I don’t see any log at all to the database path? will it be in the debugger or where is it logged?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "16f74ea9-01d7-4178-b4a9-e10711b8adbf",
          "type": "message",
          "user": "U047VNWH0HW",
          "ts": "1666287245.567729",
          "thread_ts": "1666286522.947179",
          "files": [
            {
              "id": "F047HB6DSSY",
              "created": 1666287241,
              "timestamp": 1666287241,
              "name": "image.png",
              "title": "image.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U047VNWH0HW",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 173175,
              "url": "",
              "url_download": "",
              "url_private": "C04305NR6Q2/F047HB6DSSY-image.png",
              "url_private_download": "C04305NR6Q2/F047HB6DSSY-image.png",
              "original_h": 992,
              "original_w": 1802,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HB6DSSY-9ea7aff5a3/image_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HB6DSSY-9ea7aff5a3/image_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HB6DSSY-9ea7aff5a3/image_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HB6DSSY-9ea7aff5a3/image_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 360,
              "thumb_360_h": 198,
              "thumb_480": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HB6DSSY-9ea7aff5a3/image_480.png",
              "thumb_480_w": 480,
              "thumb_480_h": 264,
              "thumb_720": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HB6DSSY-9ea7aff5a3/image_720.png",
              "thumb_720_w": 720,
              "thumb_720_h": 396,
              "thumb_960": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HB6DSSY-9ea7aff5a3/image_960.png",
              "thumb_960_w": 960,
              "thumb_960_h": 528,
              "thumb_1024": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HB6DSSY-9ea7aff5a3/image_1024.png",
              "thumb_1024_w": 1024,
              "thumb_1024_h": 564,
              "permalink": "https://appleevents.enterprise.slack.com/files/U047VNWH0HW/F047HB6DSSY/image.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047HB6DSSY-53def00a2b",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": null
        },
        {
          "client_msg_id": "7310b70d-414a-4713-8a52-a3025da8a1f7",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "Does it log the path if you open in the simulator?",
          "ts": "1666287345.889719",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "XiL5g",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Does it log the path if you open in the simulator?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "731f5ddb-c281-4b31-a47a-2fb1decb15b6",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "The logs should be printed to the console (shown/hidden by ⌘⇧Y in Xcode)",
          "ts": "1666287476.747819",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/IN",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The logs should be printed to the console (shown/hidden by ⌘⇧Y in Xcode)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7ea2fa8f-b13b-4641-92b1-02ba5e613c35",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "oh you’re missing a period before SQLDebug—it’s one “word”",
          "ts": "1666287496.355869",
          "thread_ts": "1666286522.947179",
          "edited": {
            "user": "U0449HM5ZE2",
            "ts": "1666287515.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Woc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "oh you’re missing a period before "
                    },
                    {
                      "type": "text",
                      "text": "SQLDebug—it",
                      "style": {}
                    },
                    {
                      "type": "text",
                      "text": "’s one “word”"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2dd5009b-1f6c-4ba0-8edd-d4d789c1d484",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "OK, now it tells me: *CoreData: annotation: Connecting to sqlite database file at “/Users/Vanessa/Library/Developer/CoreSimulator/Devices/046E3DCE-014B-4082-AACC-2C8E0397FD82/data/Containers/Data/Application/E9BC600A-E2E3-42B3-94A1-AC469C4F5BAF/Library/Application Support/TestBedForJson.sqlite”*\n*CoreData: sql: SELECT TBL_NAME FROM SQLITE_MASTER WHERE TBL_NAME = ‘Z_METADATA’*\n*CoreData: sql: pragma recursive_triggers=1*\n*CoreData: sql: pragma journal_mode=wal*\n*CoreData: sql: SELECT Z_VERSION, Z_UUID, Z_PLIST FROM Z_METADATA*\n*CoreData: sql: SELECT TBL_NAME FROM SQLITE_MASTER WHERE TBL_NAME = ‘Z_METADATA’*\n*CoreData: sql: SELECT TBL_NAME FROM SQLITE_MASTER WHERE TBL_NAME = ‘Z_MODELCACHE’*\n*CoreData: sql: SELECT TBL_NAME FROM SQLITE_MASTER WHERE TBL_NAME = ‘ACHANGE’*",
          "ts": "1666287645.446159",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4HhU2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "OK, now it tells me: "
                    },
                    {
                      "type": "text",
                      "text": "CoreData: annotation: Connecting to sqlite database file at “/Users/Vanessa/Library/Developer/CoreSimulator/Devices/046E3DCE-014B-4082-AACC-2C8E0397FD82/data/Containers/Data/Application/E9BC600A-E2E3-42B3-94A1-AC469C4F5BAF/Library/Application Support/TestBedForJson.sqlite”",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    },
                    {
                      "type": "text",
                      "text": "CoreData: sql: SELECT TBL_NAME FROM SQLITE_MASTER WHERE TBL_NAME = ‘Z_METADATA’",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    },
                    {
                      "type": "text",
                      "text": "CoreData: sql: pragma recursive_triggers=1",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    },
                    {
                      "type": "text",
                      "text": "CoreData: sql: pragma journal_mode=wal",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    },
                    {
                      "type": "text",
                      "text": "CoreData: sql: SELECT Z_VERSION, Z_UUID, Z_PLIST FROM Z_METADATA",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    },
                    {
                      "type": "text",
                      "text": "CoreData: sql: SELECT TBL_NAME FROM SQLITE_MASTER WHERE TBL_NAME = ‘Z_METADATA’",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    },
                    {
                      "type": "text",
                      "text": "CoreData: sql: SELECT TBL_NAME FROM SQLITE_MASTER WHERE TBL_NAME = ‘Z_MODELCACHE’",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    },
                    {
                      "type": "text",
                      "text": "CoreData: sql: SELECT TBL_NAME FROM SQLITE_MASTER WHERE TBL_NAME = ‘ACHANGE’",
                      "style": {
                        "bold": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "96e2e757-bd80-4db8-bb4d-eaf99ebe706f",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "I can give you a screen shot:",
          "ts": "1666287674.404349",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Ypt",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I can give you a screen shot:"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "142c7ad3-3696-4044-8f83-216cc6fcf410",
          "type": "message",
          "user": "U047VNWH0HW",
          "ts": "1666287678.092819",
          "thread_ts": "1666286522.947179",
          "files": [
            {
              "id": "F047THLAFHP",
              "created": 1666287675,
              "timestamp": 1666287675,
              "name": "image.png",
              "title": "image.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U047VNWH0HW",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 124529,
              "url": "",
              "url_download": "",
              "url_private": "C04305NR6Q2/F047THLAFHP-image.png",
              "url_private_download": "C04305NR6Q2/F047THLAFHP-image.png",
              "original_h": 344,
              "original_w": 1542,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047THLAFHP-1f1d41fd6a/image_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047THLAFHP-1f1d41fd6a/image_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047THLAFHP-1f1d41fd6a/image_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047THLAFHP-1f1d41fd6a/image_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 360,
              "thumb_360_h": 80,
              "thumb_480": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047THLAFHP-1f1d41fd6a/image_480.png",
              "thumb_480_w": 480,
              "thumb_480_h": 107,
              "thumb_720": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047THLAFHP-1f1d41fd6a/image_720.png",
              "thumb_720_w": 720,
              "thumb_720_h": 161,
              "thumb_960": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047THLAFHP-1f1d41fd6a/image_960.png",
              "thumb_960_w": 960,
              "thumb_960_h": 214,
              "thumb_1024": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047THLAFHP-1f1d41fd6a/image_1024.png",
              "thumb_1024_w": 1024,
              "thumb_1024_h": 228,
              "permalink": "https://appleevents.enterprise.slack.com/files/U047VNWH0HW/F047THLAFHP/image.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047THLAFHP-d6c50743b3",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": null
        },
        {
          "client_msg_id": "a17dfd3e-bb8e-4f3d-9520-7ee48a7f3b36",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "That is the correct database name",
          "ts": "1666287697.958259",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jQx5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That is the correct database name"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "aae1fc4d-2657-4100-8f41-a4cb041af9bb",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "I guess I’m unclear about:\n\u0026gt; 2. moving the sqlite store (the -sqlite, -wal and -shm files) and and copy it over to the new project’s application support area\n",
          "ts": "1666287784.539789",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mZkn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I guess I’m unclear about:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_quote",
                  "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"2. moving the sqlite store (the -sqlite, -wal and -shm files) and and copy it over to the new project\\u2019s application support area\"}]}"
                },
                {
                  "type": "rich_text_section",
                  "elements": []
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "398417a8-edef-4a15-a8b9-46f1f3745f51",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "When I actually try to look at my swiftui view which should show the data, the debugger does this: *CoreData: sql: SELECT 0, t0.Z_PK, t0.Z_OPT, t0.ZBREED_, t0.ZCREATIONDATETIME_, t0.ZDATEOFBIRTH_, t0.ZENTROPIAN_, t0.ZEWETAG_, t0.ZID_, t0.ZLAMBJUDGING_, t0.ZLOCATION_, t0.ZMOTHERINGTAG_, t0.ZNOTES_, t0.ZPEN_, t0.ZPETNAME_, t0.ZRAMTAG_, t0.ZSINGLEDOUBLETRIPLET_, t0.ZSMALLBORDERDISEASE_, t0.ZSPRAYCOLOUR_, t0.ZSPRAYNUMBER_, t0.ZTAGCOLOUR_, t0.ZTAGNUM_, t0.ZTAGGINGDATE_, t0.ZTAGGINGLOCATION_ FROM ZFEMALESHEEP t0 ORDER BY t0.ZDATEOFBIRTH_*\n*CoreData: annotation: sql connection fetch time: 0.0002s*\n*CoreData: annotation: total fetch execution time: 0.0002s for 0 rows.*",
          "ts": "1666287819.907439",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "V11d4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "When I actually try to look at my swiftui view which should show the data, the debugger does this: "
                    },
                    {
                      "type": "text",
                      "text": "CoreData: sql: SELECT 0, t0.Z_PK, t0.Z_OPT, t0.ZBREED_, t0.ZCREATIONDATETIME_, t0.ZDATEOFBIRTH_, t0.ZENTROPIAN_, t0.ZEWETAG_, t0.ZID_, t0.ZLAMBJUDGING_, t0.ZLOCATION_, t0.ZMOTHERINGTAG_, t0.ZNOTES_, t0.ZPEN_, t0.ZPETNAME_, t0.ZRAMTAG_, t0.ZSINGLEDOUBLETRIPLET_, t0.ZSMALLBORDERDISEASE_, t0.ZSPRAYCOLOUR_, t0.ZSPRAYNUMBER_, t0.ZTAGCOLOUR_, t0.ZTAGNUM_, t0.ZTAGGINGDATE_, t0.ZTAGGINGLOCATION_ FROM ZFEMALESHEEP t0 ORDER BY t0.ZDATEOFBIRTH_",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    },
                    {
                      "type": "text",
                      "text": "CoreData: annotation: sql connection fetch time: 0.0002s",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    },
                    {
                      "type": "text",
                      "text": "CoreData: annotation: total fetch execution time: 0.0002s for 0 rows.",
                      "style": {
                        "bold": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2575f16f-19f3-4d81-a2ab-833184bf23f7",
          "type": "message",
          "user": "U047VNWH0HW",
          "ts": "1666287844.496959",
          "thread_ts": "1666286522.947179",
          "files": [
            {
              "id": "F047HCT6H7W",
              "created": 1666287841,
              "timestamp": 1666287841,
              "name": "image.png",
              "title": "image.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U047VNWH0HW",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 101902,
              "url": "",
              "url_download": "",
              "url_private": "C04305NR6Q2/F047HCT6H7W-image.png",
              "url_private_download": "C04305NR6Q2/F047HCT6H7W-image.png",
              "original_h": 214,
              "original_w": 1518,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCT6H7W-55dc00bc27/image_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCT6H7W-55dc00bc27/image_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCT6H7W-55dc00bc27/image_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCT6H7W-55dc00bc27/image_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 360,
              "thumb_360_h": 51,
              "thumb_480": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCT6H7W-55dc00bc27/image_480.png",
              "thumb_480_w": 480,
              "thumb_480_h": 68,
              "thumb_720": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCT6H7W-55dc00bc27/image_720.png",
              "thumb_720_w": 720,
              "thumb_720_h": 102,
              "thumb_960": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCT6H7W-55dc00bc27/image_960.png",
              "thumb_960_w": 960,
              "thumb_960_h": 135,
              "thumb_1024": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCT6H7W-55dc00bc27/image_1024.png",
              "thumb_1024_w": 1024,
              "thumb_1024_h": 144,
              "permalink": "https://appleevents.enterprise.slack.com/files/U047VNWH0HW/F047HCT6H7W/image.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047HCT6H7W-0c9804e197",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": null
        },
        {
          "client_msg_id": "aeefb6e6-138c-48e1-afd1-05d6cf8fbd6f",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "I’ll explain the .wal in a second",
          "ts": "1666287854.726089",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "QiDbg",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’ll explain the .wal in a second"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "925917a2-5485-47aa-8ee6-4288cd901861",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "thanks",
          "ts": "1666287856.076639",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ve5jf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "thanks"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3e9ba21f-02f7-4850-ab40-34c06600e4f2",
          "type": "message",
          "user": "U047VNWH0HW",
          "ts": "1666287894.664539",
          "thread_ts": "1666286522.947179",
          "files": [
            {
              "id": "F047ESKBEM9",
              "created": 1666287892,
              "timestamp": 1666287892,
              "name": "image.png",
              "title": "image.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U047VNWH0HW",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 213092,
              "url": "",
              "url_download": "",
              "url_private": "C04305NR6Q2/F047ESKBEM9-image.png",
              "url_private_download": "C04305NR6Q2/F047ESKBEM9-image.png",
              "original_h": 898,
              "original_w": 948,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047ESKBEM9-af1cd4d5f3/image_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047ESKBEM9-af1cd4d5f3/image_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047ESKBEM9-af1cd4d5f3/image_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047ESKBEM9-af1cd4d5f3/image_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 360,
              "thumb_360_h": 341,
              "thumb_480": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047ESKBEM9-af1cd4d5f3/image_480.png",
              "thumb_480_w": 480,
              "thumb_480_h": 455,
              "thumb_720": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047ESKBEM9-af1cd4d5f3/image_720.png",
              "thumb_720_w": 720,
              "thumb_720_h": 682,
              "thumb_960": "",
              "thumb_960_w": 0,
              "thumb_960_h": 0,
              "thumb_1024": "",
              "thumb_1024_w": 0,
              "thumb_1024_h": 0,
              "permalink": "https://appleevents.enterprise.slack.com/files/U047VNWH0HW/F047ESKBEM9/image.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047ESKBEM9-fea45cca60",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": null
        },
        {
          "client_msg_id": "9bf8fc69-2c92-4976-aa8c-37589d6db25c",
          "type": "message",
          "user": "U047VNWH0HW",
          "ts": "1666287904.344729",
          "thread_ts": "1666286522.947179",
          "files": [
            {
              "id": "F047HCZ8D52",
              "created": 1666287902,
              "timestamp": 1666287902,
              "name": "image.png",
              "title": "image.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U047VNWH0HW",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 51337,
              "url": "",
              "url_download": "",
              "url_private": "C04305NR6Q2/F047HCZ8D52-image.png",
              "url_private_download": "C04305NR6Q2/F047HCZ8D52-image.png",
              "original_h": 368,
              "original_w": 648,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCZ8D52-33f7c9ef3a/image_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCZ8D52-33f7c9ef3a/image_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCZ8D52-33f7c9ef3a/image_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCZ8D52-33f7c9ef3a/image_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 360,
              "thumb_360_h": 204,
              "thumb_480": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HCZ8D52-33f7c9ef3a/image_480.png",
              "thumb_480_w": 480,
              "thumb_480_h": 273,
              "thumb_720": "",
              "thumb_720_w": 0,
              "thumb_720_h": 0,
              "thumb_960": "",
              "thumb_960_w": 0,
              "thumb_960_h": 0,
              "thumb_1024": "",
              "thumb_1024_w": 0,
              "thumb_1024_h": 0,
              "permalink": "https://appleevents.enterprise.slack.com/files/U047VNWH0HW/F047HCZ8D52/image.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047HCZ8D52-22b89f2f4c",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": null
        },
        {
          "client_msg_id": "70b7ae9d-f79c-4194-9eda-25c501a6c292",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "When I found the sqlite store that looked like it might be the right one, I found those other two also, so I decided to copy everything to the new folder for the new app",
          "ts": "1666287947.250539",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UbU",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "When I found the sqlite store that looked like it might be the right one, I found those other two also, so I decided to copy everything to the new folder for the new app"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e3565f41-2dd3-4ce3-92e2-b8790eeab660",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Yeah those paths aren’t the same",
          "ts": "1666287951.400089",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "47B",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yeah those paths aren’t the same"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ded7fffa-221a-40ac-977d-3b3cecb18308",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "And the sqlite file has 70k in it",
          "ts": "1666287960.373889",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/a/",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "And the sqlite file has 70k in it"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c44fd9ad-9a10-4338-814c-e597719a4951",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "In theory",
          "ts": "1666287967.007309",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "XLO",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In theory"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f52561f2-7ac6-4cfc-b661-9526404334db",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "`/Users/Vanessa/Library/Developer/CoreSimulator/Devices/046E3DCE-014B-4082-AACC-2C8E0397FD82/data/Containers/Data/Application/E9BC600A-E2E3-42B3-94A1-AC469C4F5BAF/Library/Application Support/TestBedForJson.sqlite` != `/Users/Vanessa/Library/Containers/EasterdownMagicWandiPadOS/Data/Library/Application Support/EasterdownMagicWandiPadOS`.",
          "ts": "1666288014.369359",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "MWKKm",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "/Users/Vanessa/Library/Developer/CoreSimulator/Devices/046E3DCE-014B-4082-AACC-2C8E0397FD82/data/Containers/Data/Application/E9BC600A-E2E3-42B3-94A1-AC469C4F5BAF/Library/Application Support/TestBedForJson.sqlite",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " != "
                    },
                    {
                      "type": "text",
                      "text": "/Users/Vanessa/Library/Containers/EasterdownMagicWandiPadOS/Data/Library/Application Support/EasterdownMagicWandiPadOS",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0301f31c-b41d-4647-a72a-26091beb5eb4",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "I’ll look there",
          "ts": "1666288049.724539",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "sccC",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’ll look there"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d4856b0f-083c-4780-a6cf-ed9636320bd6",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "This seems like it would work if you build and run for macOS, but in general if you’re intending to ship data in an app to arbitrary targets you’ll probably want to put the database in the app bundle as a resource and copy it into the application’s `Application Support` at runtime before you open it (because the bundle is read-only, which doesn’t play well with databases).",
          "ts": "1666288083.638879",
          "thread_ts": "1666286522.947179",
          "edited": {
            "user": "U0449HM5ZE2",
            "ts": "1666288123.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xIf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This seems like it would work if you build and run for macOS, but in general if you’re intending to ship data in an app to arbitrary targets you’ll probably want to put the database in the app bundle as a resource and copy it into the application’s "
                    },
                    {
                      "type": "text",
                      "text": "Application Support",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " at runtime before you open it (because the bundle is read-only, which doesn’t play well with databases)."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1825b0c0-7af4-4d0f-8b57-cd0e236da8b5",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "Well, this is an IOS app. I don’t intend to build and run on Mac",
          "ts": "1666288124.230909",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4Ws7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Well, this is an IOS app. I don’t intend to build and run on Mac"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0dd8fbd7-a94d-4ef5-9cb5-fe2306d67deb",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "And it is only for one user that I’ll need to migrate her data",
          "ts": "1666288178.049709",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "GCmIN",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "And it is only for one user that I’ll need to migrate her data"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e85a8fe2-3867-4908-bd13-8f3a059fbf38",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "I’m developing with her in mind",
          "ts": "1666288186.459799",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "iDtL",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m developing with her in mind"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "de9b87bd-cab8-408e-8aac-8c3b812af815",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "Sorry, can I reiterate this answer? Do I need to move those three files to this location for the development? m/Users/Vanessa/Library/Developer/CoreSimulator/Devices/046E3DCE-014B-4082-AACC-2C8E0397FD82/data/Containers/Data/Application/E9BC600A-E2E3-42B3-94A1-AC469C4F5BAF/Library/Application Support/",
          "ts": "1666288381.107999",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "p/Nh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Sorry, can I reiterate this answer? Do I need to move those three files to this location for the development? m/Users/Vanessa/Library/Developer/CoreSimulator/Devices/046E3DCE-014B-4082-AACC-2C8E0397FD82/data/Containers/Data/Application/E9BC600A-E2E3-42B3-94A1-AC469C4F5BAF/Library/Application Support/"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6a55715b-693b-4cad-9ee2-4e1903160424",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "Or where do I find this?",
          "ts": "1666288520.334309",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Zf=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Or where do I find this?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "93c293a7-893c-4f69-9567-7ca8c610f677",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Yeah, since you’re running in an iPad simulator, the “iPad’s filesystem root” is `~/Library/Developer/CoreSimulator/Devices/046E3DCE-014B-4082-AACC-2C8E0397FD82` and within that the application’s container is `/data/Containers/Data/Application/E9BC600A-E2E3-42B3-94A1-AC469C4F5BAF`.",
          "ts": "1666288528.218649",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Tiv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yeah, since you’re running in an iPad simulator, the “iPad’s filesystem root” is "
                    },
                    {
                      "type": "text",
                      "text": "~/Library/Developer/CoreSimulator/Devices/046E3DCE-014B-4082-AACC-2C8E0397FD82",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and within that the application’s container is "
                    },
                    {
                      "type": "text",
                      "text": "/data/Containers/Data/Application/E9BC600A-E2E3-42B3-94A1-AC469C4F5BAF",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a9033f7f-3eb2-42ba-a833-07855f94402c",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "I’m not finding 046E3DCE",
          "ts": "1666288560.966249",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/meo",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m not finding 046E3DCE"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "973469f6-88b7-4de3-a64d-01a7b6d4ee47",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "OK found it",
          "ts": "1666288601.117559",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "wx4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "OK found it"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a0f02b9a-f34c-4a73-99ba-c9db915254eb",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "But can’t get all the way there, not in the next 2 minutes anyway!",
          "ts": "1666288702.524679",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "BGX6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "But can’t get all the way there, not in the next 2 minutes anyway!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8133b4ba-4c37-414a-aea0-9fc41ff333f9",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "Can I just double check, you got that path from the debug statement. If I want to give my one migrating user this database back, I’m not sure how I’m going to put this on her iPad.",
          "ts": "1666288815.783759",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jwDz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Can I just double check, you got that path from the debug statement. If I want to give my one migrating user this database back, I’m not sure how I’m going to put this on her iPad."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c3d611d4-3f5b-46e4-b017-20b569d882ea",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "For others, it will be pretty much empty. just the structure",
          "ts": "1666288829.485819",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yC65E",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "For others, it will be pretty much empty. just the structure"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "36fcb2bb-fb3e-48ca-af1e-dc54f162eff8",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "ANy thought?",
          "ts": "1666288832.997189",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6ME",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "ANy thought?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e30c7f3f-e8b2-4869-9eda-fab34e9d2ad9",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "thoughts?",
          "ts": "1666288835.706449",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lBN",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "thoughts?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "CC99863D-76D5-4E9E-A702-E6B819BFA7F1",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "You can file a feedback request and include the data when you have a chance ",
          "ts": "1666288946.772929",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U047VNWH0HW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5pb",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can file a feedback request and include the data when you have a chance "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "96fef580-edaf-4a16-95a2-6528c9c5cd3e",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "I just found that folder, and it has all three files in it. The sqlite file has 61k in it.",
          "ts": "1666289267.104509",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0Ysl",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I just found that folder, and it has all three files in it. The sqlite file has 61k in it."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "10c6c7a6-caed-4bd8-aec7-581b077c84ee",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "Thank you so much. I’ll try to find out how to file a feedback request",
          "ts": "1666289299.283769",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YCg1",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you so much. I’ll try to find out how to file a feedback request"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2a130126-0890-4985-ad2b-159afc08b335",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "That’s a bug report. Isn’t it?",
          "ts": "1666289424.500329",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "x40G8",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s a bug report. Isn’t it?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "cf2fe987-af46-4354-8556-57633cab5e75",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Yup!",
          "ts": "1666290254.111369",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "LyJHa",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yup!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6d25eaf3-7625-4da4-8c9b-160895bf2c10",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "Guess what!! I copied an existing store that I’m using in a different app over to the new app location you helped me find and it worked!",
          "ts": "1666291691.241849",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "1Mf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Guess what!! I copied an existing store that I’m using in a different app over to the new app location you helped me find and it worked!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a6a85d37-5f28-4b63-ac58-fc291f21bf48",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "Thank you so much!!!",
          "ts": "1666291700.511679",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "fID",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you so much!!!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d4e8d9b9-886f-4fa0-8f27-f20d3ad29e28",
          "type": "message",
          "user": "U047VNWH0HW",
          "text": "But still not sure how to do this generically, ie for one special case user. When is the next Q \u0026amp; A :wink:",
          "ts": "1666291754.670749",
          "thread_ts": "1666286522.947179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "XqtQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "But still not sure how to do this generically, ie for one special case user. When is the next Q \u0026 A "
                    },
                    {
                      "type": "emoji",
                      "name": "wink",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04742GGNQY\u003e asked\n\u0026gt; How do I setup the Core Data stack such that I can save changes on a background queue (i.e. asynchronous saving) while the user continues to use the app?\n\u0026gt; \n\u0026gt; Also, is the technique the same for both iOS and macOS?",
      "ts": "1666286576.997119",
      "thread_ts": "1666286576.997119",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666287361.245869",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "wsFRu",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04742GGNQY"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How do I setup the Core Data stack such that I can save changes on a background queue (i.e. asynchronous saving) while the user continues to use the app?\\n\\nAlso, is the technique the same for both iOS and macOS?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "3eada275-df26-44cb-9b84-6c7dd16940ea",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "\u003chttps://developer.apple.com/documentation/coredata/nspersistentcontainer|NSPersistentContainer\u003e helps facilitate this approach so that you can use the `viewContext` to drive your UI that the user interacts with, while the saving of data is done on a `newBackgroundContext()` .\n\nEnsure that you set `automaticallyMergesChangesFromParent` on the `viewContext` so that you either consume changes automatically or handle refreshing the `viewContext` after the save on the backgroundContext.",
          "ts": "1666286766.770059",
          "thread_ts": "1666286576.997119",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "i2lgQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/coredata/nspersistentcontainer",
                      "text": "NSPersistentContainer"
                    },
                    {
                      "type": "text",
                      "text": " helps facilitate this approach so that you can use the "
                    },
                    {
                      "type": "text",
                      "text": "viewContext",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to drive your UI that the user interacts with, while the saving of data is done on a "
                    },
                    {
                      "type": "text",
                      "text": "newBackgroundContext()",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " .\n\nEnsure that you set "
                    },
                    {
                      "type": "text",
                      "text": "automaticallyMergesChangesFromParent",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " on the "
                    },
                    {
                      "type": "text",
                      "text": "viewContext",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " so that you either consume changes automatically or handle refreshing the "
                    },
                    {
                      "type": "text",
                      "text": "viewContext",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " after the save on the backgroundContext."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4514b840-04ca-40c5-aaef-b5329f88fab2",
          "type": "message",
          "user": "U04742GGNQY",
          "text": "Thanks! :+1:",
          "ts": "1666287361.245869",
          "thread_ts": "1666286576.997119",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Gjb4=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks! "
                    },
                    {
                      "type": "emoji",
                      "name": "+1",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464MDV42G\u003e asked\n\u0026gt; Currently, my app uses the @ AppStorage data persistence approach. I have three main model objects that are stored locally on device. I want to convert over to Core Data + CloudKit and the model objects will become three Core Data model entities with associated attributes (properties). For my new Core Data + CloudKit approach, when an existing user opens the new app, how can I ensure that the existing local @AppStorage user data is safely transferred over to Core Data + CloudKit data persistence? I assume I would need to do some checking code logic in the Persistence.swift file (i.e. Core Data stack code file). If so, I’m not sure how to code this check. ",
      "ts": "1666286598.079059",
      "thread_ts": "1666286598.079059",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666287577.321349",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "sLnF5",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464MDV42G"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Currently, my app uses the @ AppStorage data persistence approach. I have three main model objects that are stored locally on device. I want to convert over to Core Data + CloudKit and the model objects will become three Core Data model entities with associated attributes (properties). For my new Core Data + CloudKit approach, when an existing user opens the new app, how can I ensure that the existing local @AppStorage user data is safely transferred over to Core Data + CloudKit data persistence? I assume I would need to do some checking code logic in the Persistence.swift file (i.e. Core Data stack code file). If so, I\\u2019m not sure how to code this check. \"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "35d2af79-5a9b-42ce-b63a-6fa7ec2e9fdd",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Folks usually just import the old data when they set up the persistent container and then delete it. If the app storage data still exists, it implies you want to import it",
          "ts": "1666286612.518989",
          "thread_ts": "1666286598.079059",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "IHOz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Folks usually just import the old data when they set up the persistent container and then delete it. If the app storage data still exists, it implies you want to import it"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "21716D4C-C390-496D-B506-2296CA8F6B0B",
          "type": "message",
          "user": "U0464MDV42G",
          "text": "Ok. Yes, what would be the approach code wise to import the existing @AppStorage local data and move it into Core Data?",
          "ts": "1666286840.933819",
          "thread_ts": "1666286598.079059",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "HEUo",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok"
                    },
                    {
                      "type": "text",
                      "text": "."
                    },
                    {
                      "type": "text",
                      "text": " Yes, what would be the approach code wise to import the existing @AppStorage local data and move it into Core Data?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a828cee6-5ac4-4d66-86ea-cd874c3c8c73",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Detect if the app storage is empty at launch, import into Core Data if it’s not, then delete the app storage.",
          "ts": "1666287577.321349",
          "thread_ts": "1666286598.079059",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "dnN+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Detect if the app storage is empty at launch, import into Core Data if it’s not, then delete the app storage."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046JND8CKB\u003e asked\n\u0026gt; Hi, is it important to use async when saving photos as data to CoreData the same way 'Capturing Photos' uses async to save photos to photoCollection? Thanks!",
      "ts": "1666286656.655249",
      "thread_ts": "1666286656.655249",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666287315.643929",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "PZyCS",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046JND8CKB"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hi, is it important to use async when saving photos as data to CoreData the same way 'Capturing Photos' uses async to save photos to photoCollection? Thanks!\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "04cda5ba-3820-4d89-8f59-05485171e7db",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "If I understand your question, you’re asking if you should use perform or performAndWait? I think it depends on your requirements and desired UX experience.",
          "ts": "1666286719.577469",
          "thread_ts": "1666286656.655249",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FeAna",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If I understand your question, you’re asking if you should use perform or performAndWait? I think it depends on your requirements and desired UX experience."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ae494e4e-a55a-40c6-9b49-bef972d3a13b",
          "type": "message",
          "user": "U046JND8CKB",
          "text": "Thanks David. It's more from Capturing Photos there's a lot of async - try await methods for loading and saving photos from the photoCollection Class, but it doesn't look as though that Class is needed when working with CoreData rather than Photos.",
          "ts": "1666287315.643929",
          "thread_ts": "1666286656.655249",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Kll",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks David. It's more from Capturing Photos there's a lot of async - try await methods for loading and saving photos from the photoCollection Class, but it doesn't look as though that Class is needed when working with CoreData rather than Photos."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464MDV42G\u003e asked\n\u0026gt; Im looking for best practices or general guidance on when to use the different types of Class Codegen choices for a Core Data model entity. For instance, what type of approaches or Class file mods may cause me to select Manual/None? I’m not sure what the Category/Extension option does and when that choice might be useful. ",
      "ts": "1666286666.428349",
      "thread_ts": "1666286666.428349",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666286952.101859",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "TMhhj",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464MDV42G"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Im looking for best practices or general guidance on when to use the different types of Class Codegen choices for a Core Data model entity. For instance, what type of approaches or Class file mods may cause me to select Manual\\/None? I\\u2019m not sure what the Category\\/Extension option does and when that choice might be useful. \"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "eff2099c-85ff-412a-8200-19136b563622",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Most people can get by with Class, adding any custom methods they need in a category/extension of their own, but in the rare cases where you need to add an ivar then your property has to be declared in the class definition, so having Xcode generate a Category/Extension gives you the control of the class declaration that you need.",
          "ts": "1666286765.784469",
          "thread_ts": "1666286666.428349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "p38Hb",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Most people can get by with Class, adding any custom methods they need in a category/extension of their own, but in the rare cases where you need to add an ivar then your property has to be declared in the class definition, so having Xcode generate a Category/Extension gives you the control of the class declaration that you need."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "cd39649f-122e-4d35-b6c5-1eb5ac05bcde",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Most people will never have to think about this—you’ll know when you need Category/Extension generation.",
          "ts": "1666286807.776569",
          "thread_ts": "1666286666.428349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Ojma",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Most people will never have to think about this—you’ll know when you need Category/Extension generation."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "35869084-0223-4D7B-A8F4-FE6D4368FD5F",
          "type": "message",
          "user": "U0464MDV42G",
          "text": "Thanks. ",
          "ts": "1666286952.101859",
          "thread_ts": "1666286666.428349",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "crM7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks"
                    },
                    {
                      "type": "text",
                      "text": "."
                    },
                    {
                      "type": "text",
                      "text": " "
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U047WRXQX8Q\u003e asked\n\u0026gt; Just a quick question related to Core Data and CloudKit syncing. I have noticed when I delete a record from the CloudKit database using the safari client, the object persists on the local core data store on device. Is this intentional? Is there a way that I can modify the data from safari CloudKit manager and have those changes be synced across the devices? Thank you!",
      "ts": "1666286737.389149",
      "thread_ts": "1666286737.389149",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666286776.581329",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "nfk",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U047WRXQX8Q"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Just a quick question related to Core Data and CloudKit syncing. I have noticed when I delete a record from the CloudKit database using the safari client, the object persists on the local core data store on device. Is this intentional? Is there a way that I can modify the data from safari CloudKit manager and have those changes be synced across the devices? Thank you!\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "A487A8AC-6B23-44AD-B82A-7029782C26EE",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "It’s not clear that this workflow would generate a push notification to us.  If you relaunch the app you should see the change ",
          "ts": "1666286776.581329",
          "thread_ts": "1666286737.389149",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0+oJ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It’s not clear that this "
                    },
                    {
                      "type": "text",
                      "text": "w"
                    },
                    {
                      "type": "text",
                      "text": "orkflow would generate a push notification to us.  If you relaunch the app you should see the change "
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0462AL317X\u003e asked\n\u0026gt; I'm using `NSPersistentCloudKitContainer` and I'm interested in improving the experience when data is initially downloaded from iCloud on an additional (or restored) device. Is there a way to tell the user that the data is synced completely?\n\u0026gt; \n\u0026gt; I'm aware of `NSPersistentCloudKitContainer.eventChangedNotification` but it comes in many smaller-sized pairs of `.import` with `endDate == nil` (start of import) and `endDate != nil` (end of import) and there seems to be no real way of telling when it's finished.",
      "ts": "1666286836.576609",
      "thread_ts": "1666286836.576609",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 5,
      "latest_reply": "1666291046.958509",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "smM3",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0462AL317X"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I'm using `NSPersistentCloudKitContainer` and I'm interested in improving the experience when data is initially downloaded from iCloud on an additional (or restored) device. Is there a way to tell the user that the data is synced completely?\\n\\nI'm aware of `NSPersistentCloudKitContainer.eventChangedNotification` but it comes in many smaller-sized pairs of `.import` with `endDate == nil` (start of import) and `endDate != nil` (end of import) and there seems to be no real way of telling when it's finished.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "12D2D977-BDBD-4A01-8214-43197E83883C",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Seeing which imports have been kicked off and their completion status is the best you can do",
          "ts": "1666286867.913959",
          "thread_ts": "1666286836.576609",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "eO8",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Seeing which imports have been kicked off and their completion status is the best you can do"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2BF99A5E-1B39-4F99-AFF6-E20CF6FB728E",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "The theoretical is intractable, the other devices can always be making an infinite stream of new changes ",
          "ts": "1666286932.794639",
          "thread_ts": "1666286836.576609",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "adNu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The theoretical is intractable, the other devices can always be making an infinite stream of new changes "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "F59C90D5-985E-4AE1-96FE-420447AF8C09",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "But you could file a feedback for an enhancement for an approximate answer ",
          "ts": "1666286977.933669",
          "thread_ts": "1666286836.576609",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zJ4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "But you could file a feedback for an enhancement for an approximate answer "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a336b520-547d-4262-92b1-c0ea9bd4bd8e",
          "type": "message",
          "user": "U0462AL317X",
          "text": "Yes, I was hoping for an approximate of, e.g., `n` upcoming imports. Thanks for your answer and the suggestion to file a feedback.",
          "ts": "1666287056.483209",
          "thread_ts": "1666286836.576609",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U044UR1MYF3"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6VH",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, I was hoping for an approximate of, e.g., "
                    },
                    {
                      "type": "text",
                      "text": "n",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " upcoming imports. Thanks for your answer and the suggestion to file a feedback."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "371756ae-cb82-4d61-a7e6-7fcbf2415b6e",
          "type": "message",
          "user": "U0462AL317X",
          "text": "FYI, it’s FB11707972",
          "ts": "1666291046.958509",
          "thread_ts": "1666286836.576609",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "aNbQx",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FYI, it’s FB11707972"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046234QRRD\u003e asked\n\u0026gt; The optionality of attributes of entities in Core Data with Swift does not behave as it should. If I mark an attribute as optional it should not have a default value and the managed property should always be optional. If I mark it as non-optional it should require a default value and the managed property should always be non-optional. Can we expect such behavior sometimes in the future at least for new projects or as an opt-in feature?\n\u0026gt; \n\u0026gt; Examples:\n\u0026gt; \n\u0026gt; If I mark an attribute of type String as non-optional the managed property still uses String? (optional) as type. Is it save to change the type of the managed property manually to String (non-optional)?\n\u0026gt; \n\u0026gt; If I mark an attribute of type Bool (use scalar type) as optional the managed property still uses Bool (non-optional) as type. The type of the managed property can't be changed manually to Bool? (optional).",
      "ts": "1666286955.670859",
      "thread_ts": "1666286955.670859",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 3,
      "latest_reply": "1666287421.199839",
      "reactions": [
        {
          "name": "+1",
          "count": 1,
          "users": [
            "U045WF1CPQE"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Cvlz",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046234QRRD"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"The optionality of attributes of entities in Core Data with Swift does not behave as it should. If I mark an attribute as optional it should not have a default value and the managed property should always be optional. If I mark it as non-optional it should require a default value and the managed property should always be non-optional. Can we expect such behavior sometimes in the future at least for new projects or as an opt-in feature?\\n\\nExamples:\\n\\nIf I mark an attribute of type String as non-optional the managed property still uses String? (optional) as type. Is it save to change the type of the managed property manually to String (non-optional)?\\n\\nIf I mark an attribute of type Bool (use scalar type) as optional the managed property still uses Bool (non-optional) as type. The type of the managed property can't be changed manually to Bool? (optional).\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "efd84252-2f93-4ad3-b08d-19636de316cd",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Core Data’s idea of optionality predates the existence of Swift and allows properties to be transiently invalid. For example, when you create a new object with a string property, the initial value (in the absence of a model-defined default) is `nil`, which is fine until the object gets validated (usually at `save()`-time).\n\nIn the case of optional scalars, Core Data is limited by the types that are expressible in Objective-C—there is no such thing as an `Int64` object so for now the optional type can only be expressed as `NSNumber?` :confused:\n\nThat said, this is a common piece of feedback and filing a feedback report on the topic is probably your best bet at seeing where it goes.",
          "ts": "1666287043.552919",
          "thread_ts": "1666286955.670859",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9B=W",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Core Data’s idea of optionality predates the existence of Swift and allows properties to be transiently invalid. For example, when you create a new object with a string property, the initial value (in the absence of a model-defined default) is "
                    },
                    {
                      "type": "text",
                      "text": "nil",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", which is fine until the object gets validated (usually at "
                    },
                    {
                      "type": "text",
                      "text": "save()",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "-time).\n\nIn the case of optional scalars, Core Data is limited by the types that are expressible in Objective-C—there is no such thing as an "
                    },
                    {
                      "type": "text",
                      "text": "Int64",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " object so for now the optional type can only be expressed as "
                    },
                    {
                      "type": "text",
                      "text": "NSNumber?",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "emoji",
                      "name": "confused",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": "\n\nThat said, this is a common piece of feedback and filing a feedback report on the topic is probably your best bet at seeing where it goes."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d8446ab9-f154-4723-abeb-ebbb8d06eef0",
          "type": "message",
          "user": "U04742GGNQY",
          "text": "Hey \u003c@U0449HM5ZE2\u003e!",
          "ts": "1666287132.057009",
          "thread_ts": "1666286955.670859",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "wave",
              "count": 1,
              "users": [
                "U0449HM5ZE2"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+2eu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hey "
                    },
                    {
                      "type": "user",
                      "user_id": "U0449HM5ZE2"
                    },
                    {
                      "type": "text",
                      "text": "!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "39ed3ca8-f312-4c74-9740-8edea32ebc86",
          "type": "message",
          "user": "U046234QRRD",
          "text": "\u003c@U0449HM5ZE2\u003e Thanks. I will file a feedback to this topic as it would be really nice and far more logically for new projects.",
          "ts": "1666287421.199839",
          "thread_ts": "1666286955.670859",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "NW/TD",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0449HM5ZE2"
                    },
                    {
                      "type": "text",
                      "text": " Thanks. I will file a feedback to this topic as it would be really nice and far more logically for new projects."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "3331beec-3234-4c02-809f-e6db96545d7e",
      "type": "message",
      "user": "U0455R18DT2",
      "text": ":racing_car: We’re about halfway through this race — get those questions submitted before we drop the checkered flag!",
      "ts": "1666287000.945389",
      "team": "T03U5MWB2FN",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "28kg",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "emoji",
                  "name": "racing_car",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " We’re about halfway through this race — get those questions submitted before we drop the checkered flag!"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U047J00UMR7\u003e asked\n\u0026gt; I added a `NSPersistentCloudKitContainer` to support data sync between multiple devices of the user. I started with setting up the container with `cloudKitContainerOptions` set to nil to deactivate iCloud at the beginning. \n\u0026gt; This lead with testdata to a .sqlite store file of the size of 80kb. When I then enabled iCloud and used the same test data, the underlaying store file increased to 16mb. \n\u0026gt; With larger datasets it was increased in my test from 3mb to around 130mb. \n\u0026gt; \n\u0026gt; Is this just the space increase I can expect when using Core Data with CloudKit or did I maybe set up something wrong? Feel like thats a lot of extra space for the sync",
      "ts": "1666287154.464479",
      "thread_ts": "1666287154.464479",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 25,
      "latest_reply": "1666288808.846949",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "HHoWU",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U047J00UMR7"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I added a `NSPersistentCloudKitContainer` to support data sync between multiple devices of the user. I started with setting up the container with `cloudKitContainerOptions` set to nil to deactivate iCloud at the beginning. \\nThis lead with testdata to a .sqlite store file of the size of 80kb. When I then enabled iCloud and used the same test data, the underlaying store file increased to 16mb. \\nWith larger datasets it was increased in my test from 3mb to around 130mb. \\n\\nIs this just the space increase I can expect when using Core Data with CloudKit or did I maybe set up something wrong? Feel like thats a lot of extra space for the sync\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "d6a69617-d497-4fb3-8b5c-603653de386d",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "What is the size of your dataset?",
          "ts": "1666287172.623179",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "R5Y",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "What is the size of your dataset?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "72dc697e-8246-447e-ba50-1605e1a4915e",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "The first example (with 80kb increased to 16mb) is 100 main objects. each object has two to many relationships with extra data. 3406 total in one entity and another 307 in the second entity.\nThe 3406 is location points",
          "ts": "1666287440.010399",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OD4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The first example (with 80kb increased to 16mb) is 100 main objects. each object has two to many relationships with extra data. 3406 total in one entity and another 307 in the second entity.\nThe 3406 is location points"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0f69ab51-d396-40b0-88ce-9e2d8dac0b2f",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "The other example started with 800 main objects. Approximately around 24000 location points then and another 2400 or so sets in the other entity.",
          "ts": "1666287553.550619",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ZvWW+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The other example started with 800 main objects. Approximately around 24000 location points then and another 2400 or so sets in the other entity."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "92073e24-7e3e-487d-b704-b4bec8b8cb98",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "\u0026gt; The 3406 is location points\nDo you mean you are persisting CLLocation’s as transformables?",
          "ts": "1666287642.799349",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "wTlj",
              "elements": [
                {
                  "Type": "rich_text_quote",
                  "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"The 3406 is location points\"}]}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Do you mean you are persisting CLLocation’s as transformables?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6a2d7f79-7baf-41aa-98cc-dd57b1f97a38",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "I store some latitude and longitude values for a route, yes",
          "ts": "1666287689.564959",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ZSxPp",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I store some latitude and longitude values for a route, yes"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "da5a6dbc-4c25-4a14-ab57-08bda4338cce",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "they are doubles",
          "ts": "1666287730.343929",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mGNz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "they are doubles"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ebe85cc2-0475-4f2a-85c4-5a5581a82940",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "so you’re just storing two doubles on an entity and *not* CLLocation objects?",
          "ts": "1666287767.681699",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "dC=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "so you’re just storing two doubles on an entity and "
                    },
                    {
                      "type": "text",
                      "text": "not",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " CLLocation objects?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e72fbbe0-0880-42db-a7e8-06ff4b4ae981",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "yes. 2 doubles and a sort index which is an integer16",
          "ts": "1666287788.296189",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/2lu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "yes. 2 doubles and a sort index which is an integer16"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "69324e23-2538-472f-8bc6-9239b39a0769",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "that's all in the entity",
          "ts": "1666287795.007289",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "rvkd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "that's all in the entity"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c35388c0-7ffb-4306-bb66-cc3257b09bd7",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "the other entity is also storing just 2 integers",
          "ts": "1666287839.181699",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yWo",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "the other entity is also storing just 2 integers"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "514e4823-8859-48f9-af94-a3e7cfaa9d4a",
          "type": "message",
          "user": "U047J00UMR7",
          "ts": "1666288149.787479",
          "thread_ts": "1666287154.464479",
          "files": [
            {
              "id": "F047HDMRKGU",
              "created": 1666288143,
              "timestamp": 1666288143,
              "name": "Bildschirmfoto 2022-10-20 um 19.48.57.png",
              "title": "Bildschirmfoto 2022-10-20 um 19.48.57.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U047J00UMR7",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 28068,
              "url": "",
              "url_download": "",
              "url_private": "C04305NR6Q2/F047HDMRKGU-Bildschirmfoto 2022-10-20 um 19.48.57.png",
              "url_private_download": "C04305NR6Q2/F047HDMRKGU-Bildschirmfoto 2022-10-20 um 19.48.57.png",
              "original_h": 226,
              "original_w": 562,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HDMRKGU-2c6a3f538f/bildschirmfoto_2022-10-20_um_19.48.57_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HDMRKGU-2c6a3f538f/bildschirmfoto_2022-10-20_um_19.48.57_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HDMRKGU-2c6a3f538f/bildschirmfoto_2022-10-20_um_19.48.57_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HDMRKGU-2c6a3f538f/bildschirmfoto_2022-10-20_um_19.48.57_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 360,
              "thumb_360_h": 145,
              "thumb_480": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047HDMRKGU-2c6a3f538f/bildschirmfoto_2022-10-20_um_19.48.57_480.png",
              "thumb_480_w": 480,
              "thumb_480_h": 193,
              "thumb_720": "",
              "thumb_720_w": 0,
              "thumb_720_h": 0,
              "thumb_960": "",
              "thumb_960_w": 0,
              "thumb_960_h": 0,
              "thumb_1024": "",
              "thumb_1024_w": 0,
              "thumb_1024_h": 0,
              "permalink": "https://appleevents.enterprise.slack.com/files/U047J00UMR7/F047HDMRKGU/bildschirmfoto_2022-10-20_um_19.48.57.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047HDMRKGU-3055aed9bf",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": null
        },
        {
          "client_msg_id": "eb2c21ea-4c8d-4e69-90e5-4c0ede00da8f",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "Are you able to get the store files via Xcode? You should be able to get the app container.",
          "ts": "1666288243.434699",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "dNx",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Are you able to get the store files via Xcode? You should be able to get the app container."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0075fbe8-fdd0-492b-88e7-83c34751f785",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "I am",
          "ts": "1666288270.804839",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gspd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I am"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "191754e3-dfbc-4f94-bf6e-670ac5e2633f",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "It would be helpful to get a Feedback with the stores attached (if they don’t contain any personal information)",
          "ts": "1666288323.374159",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "17Z",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It would be helpful to get a Feedback with the stores attached (if they don’t contain any personal information)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "485fa16f-4761-4d97-8c36-1684ca115263",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "A feedback via Feedback-Assistent?",
          "ts": "1666288412.080519",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9FP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A feedback via Feedback-Assistent?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a5d98388-1962-4fdd-83da-7c43d95e180b",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "Yes, please",
          "ts": "1666288423.285189",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9cvPu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, please"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f7151979-fd72-46ca-b176-e2e15115158f",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "I can do that. Just the .sqlite file or is something else also needed?",
          "ts": "1666288463.742319",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "nWBsK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I can do that. Just the .sqlite file or is something else also needed?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e5e6b7e6-e22b-4183-8ca8-be2fa3f843be",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "The .sqlite and the -wal files",
          "ts": "1666288517.746799",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CF3",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The .sqlite and the -wal files"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a922f5d7-9901-4caf-addc-e6bdea27651f",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "Will do",
          "ts": "1666288555.662099",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EOkAu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Will do"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "dc5dc43b-3b01-4e97-bff7-b146312776e4",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "Thanks!",
          "ts": "1666288564.536029",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "p7094",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fb7eda58-daa8-4556-a2d4-3ea39a9c5d19",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "Should I add in the feedback that you asked for it to make sure you get it?",
          "ts": "1666288590.780139",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gI4F",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Should I add in the feedback that you asked for it to make sure you get it?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f984725e-de24-40dd-92dd-0806c78de288",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "If you paste the feedback ID I can make sure to get it",
          "ts": "1666288609.335189",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vt5Z",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you paste the feedback ID I can make sure to get it"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "08303024-9432-43ee-bb3c-d2d60f897295",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "FB11707982",
          "ts": "1666288787.983219",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4FkC",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FB11707982"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "27425d72-ca1c-4d8a-8712-2c32e4e14caa",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "I will add the files in a minute",
          "ts": "1666288796.522969",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "X5MD",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I will add the files in a minute"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "32f21fd6-f459-4021-b2f4-ae5010fc10ae",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "Thank you!",
          "ts": "1666288808.846949",
          "thread_ts": "1666287154.464479",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "pA0b",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045MLK9GQ7\u003e asked\n\u0026gt; I have an app that lets the user drag and drop the rows in my tableview to reorder the items.  My Core Data, data model has a userOrder property that is of type Int16.  What is the best way for me to save the new order of the data after the tableview rows have been reordered into Core Data?",
      "ts": "1666287384.159289",
      "thread_ts": "1666287384.159289",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 16,
      "latest_reply": "1666289180.796089",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "whr",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045MLK9GQ7"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have an app that lets the user drag and drop the rows in my tableview to reorder the items.  My Core Data, data model has a userOrder property that is of type Int16.  What is the best way for me to save the new order of the data after the tableview rows have been reordered into Core Data?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "d90b35d9-35d8-4c48-bfe7-626147ecbeb9",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Instead of storing the first object with `userorder == 0`, second with `userOrder == 1`, third with `userOrder == 2`, etc. you will probably have better performance by distributing the indexes sparsely. In fact, Core Data will do this for you if you can model this as an ordered relationship!\n\nTo manage ordered relationships, Core Data  calculates an object’s index in the `UInt16` space as being exactly in the middle of the previous and next objects in line. When the integer space runs out, we step an object out in either direction and evenly redistribute the objects.",
          "ts": "1666287388.470969",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U0462AL317X",
                "U046S5LNEFJ"
              ]
            },
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U0463CWEH99"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "aBV3",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Instead of storing the first object with "
                    },
                    {
                      "type": "text",
                      "text": "userorder == 0",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", second with "
                    },
                    {
                      "type": "text",
                      "text": "userOrder == 1",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", third with "
                    },
                    {
                      "type": "text",
                      "text": "userOrder == 2",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", etc. you will probably have better performance by distributing the indexes sparsely. In fact, Core Data will do this for you if you can model this as an ordered relationship!\n\nTo manage ordered relationships, Core Data  calculates an object’s index in the "
                    },
                    {
                      "type": "text",
                      "text": "UInt16",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " space as being exactly in the middle of the previous and next objects in line. When the integer space runs out, we step an object out in either direction and evenly redistribute the objects."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1f152ec9-718c-4334-960a-ee6f9ae14b38",
          "type": "message",
          "user": "U045MLK9GQ7",
          "text": "\u003c@U0449HM5ZE2\u003e Thank you.  After setting my relationship as “ordered” is there anything specific that I need to do after reordering the data array in my tableview to save the new order into core data?",
          "ts": "1666287602.135959",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "d+N",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0449HM5ZE2"
                    },
                    {
                      "type": "text",
                      "text": " Thank you.  After setting my relationship as “ordered” is there anything specific that I need to do after reordering the data array in my tableview to save the new order into core data?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ffdede21-ad18-4895-9596-ce421eedd078",
          "type": "message",
          "user": "U045MLK9GQ7",
          "text": "\u003c@U0449HM5ZE2\u003e Also, what would I do with the parent core data object in the relationship, as there is only an “ordered” property in the children relationship (to many)?  Please see the attached picture for the to one relationship.",
          "ts": "1666287831.377049",
          "thread_ts": "1666287384.159289",
          "files": [
            {
              "id": "F0470CHJ23H",
              "created": 1666287808,
              "timestamp": 1666287808,
              "name": "2022-10-20_13-43-26.png",
              "title": "2022-10-20_13-43-26.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U045MLK9GQ7",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 42659,
              "url": "",
              "url_download": "",
              "url_private": "C04305NR6Q2/F0470CHJ23H-2022-10-20_13-43-26.png",
              "url_private_download": "C04305NR6Q2/F0470CHJ23H-2022-10-20_13-43-26.png",
              "original_h": 461,
              "original_w": 279,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F0470CHJ23H-5aa6cbe45f/2022-10-20_13-43-26_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F0470CHJ23H-5aa6cbe45f/2022-10-20_13-43-26_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F0470CHJ23H-5aa6cbe45f/2022-10-20_13-43-26_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F0470CHJ23H-5aa6cbe45f/2022-10-20_13-43-26_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 218,
              "thumb_360_h": 360,
              "thumb_480": "",
              "thumb_480_w": 0,
              "thumb_480_h": 0,
              "thumb_720": "",
              "thumb_720_w": 0,
              "thumb_720_h": 0,
              "thumb_960": "",
              "thumb_960_w": 0,
              "thumb_960_h": 0,
              "thumb_1024": "",
              "thumb_1024_w": 0,
              "thumb_1024_h": 0,
              "permalink": "https://appleevents.enterprise.slack.com/files/U045MLK9GQ7/F0470CHJ23H/2022-10-20_13-43-26.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F0470CHJ23H-6be77f944a",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bVZ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0449HM5ZE2"
                    },
                    {
                      "type": "text",
                      "text": " Also, what would I do with the parent core data object in the relationship, as there is only an “ordered” property in the children relationship (to many)?  Please see the attached picture for the to one relationship."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f4619172-d0ae-4fca-9966-26dcb1c4eca1",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "The relationship will be modeled as an `NSOrderedSet`, there will be methods generated on the object for manipulating it.",
          "ts": "1666287838.520829",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "HxL",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The relationship will be modeled as an "
                    },
                    {
                      "type": "text",
                      "text": "NSOrderedSet",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", there will be methods generated on the object for manipulating it."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6c527e89-b5f9-49d7-95a0-e0558e813730",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Yeah this is why I said “if you can model it that way”. If we hypothetically say that these items are “songs” then you’d need another type (say, “playlist”) to own the ordered relationship",
          "ts": "1666287920.087459",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "w12kc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yeah this is why I said “if you can model it that way”. If we hypothetically say that these items are “songs” then you’d need another type (say, “playlist”) to own the ordered relationship"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "07ed7e53-4efa-40f3-af07-48b299a929bb",
          "type": "message",
          "user": "U045MLK9GQ7",
          "text": "\u003c@U0449HM5ZE2\u003e Thank you.  So if you can not set “playlist” as an “ordered” relationship, how would you manage the order of the “playlists” in core data?",
          "ts": "1666287988.468359",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Ununu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0449HM5ZE2"
                    },
                    {
                      "type": "text",
                      "text": " Thank you.  So if you can not set “playlist” as an “ordered” relationship, how would you manage the order of the “playlists” in core data?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e993e656-1049-47b4-8baf-6e143460ca0f",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Either invent another type to be its counterpart (the “user” owns multiple playlists, I guess?) or reinvent that wheel with an integer property of your own :sweat_smile:",
          "ts": "1666288192.553619",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ZFQIg",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Either invent another type to be its counterpart (the “user” owns multiple playlists, I guess?) or reinvent that wheel with an integer property of your own "
                    },
                    {
                      "type": "emoji",
                      "name": "sweat_smile",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "952cf7c3-ff84-4f29-a312-684c25cc1f7f",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "I’m about to embark on this exact same thing in my app. I allow the user to sort records via properties of the records right now, but I’m adding a manual sort option. Instead of using integers, would it be ok to use doubles? Because you can always have 0.5 between 0 and 1, 1.5 between 1 and 2, and so on. Therefore you would never run out of space and never have to redistribute.",
          "ts": "1666288561.517229",
          "thread_ts": "1666287384.159289",
          "edited": {
            "user": "U0463CWEH99",
            "ts": "1666288648.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=bLu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m about to embark on this exact same thing in my app. I allow the user to sort records via properties of the records right now, but I’m adding a manual sort option. Instead of using integers, would it be ok to use doubles? Because you can always have 0.5 between 0 and 1, 1.5 between 1 and 2, and so on. Therefore you would never run out of space and never have to redistribute."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fca29bea-d46f-4f11-b841-519e91c8a402",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "With doubles you also get roundoff error. At the limit you’ll always wind up with collisions and the corresponding need to redistribute values and that’ll be way easier to reason about with integers",
          "ts": "1666288663.662869",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zgw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "With doubles you also get roundoff error. At the limit you’ll always wind up with collisions and the corresponding need to redistribute values and that’ll be way easier to reason about with integers"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5fcfa825-cf41-464e-83af-32501ea6b417",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Ah ok. Thanks for the tip. That’s a good point.",
          "ts": "1666288692.839629",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gr9+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ah ok. Thanks for the tip. That’s a good point."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0ff07bc5-fbf6-48d6-b738-546b5b0b0c41",
          "type": "message",
          "user": "U0463CWEH99",
          "text": "Just out of curiosity, when you re-distribute, do you do the entire set of records? If you have say 100,000 records and those are synced to other devices, that could trigger a massive sync operation. Sorry to hijack the thread.",
          "ts": "1666288815.152149",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "IYJm",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Just out of curiosity, when you re-distribute, do you do the entire set of records? If you have say 100,000 records and those are synced to other devices, that could trigger a massive sync operation. Sorry to hijack the thread."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5ca238f0-702e-44eb-bccb-33b8e7faae9e",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Ordered relationships are probably still your safest bet, even if it means you have to make a “User” singleton (for the “playlist” example)",
          "ts": "1666288816.364369",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5Zru",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ordered relationships are probably still your safest bet, even if it means you have to make a “User” singleton (for the “playlist” example)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5f85f5ba-4517-45a9-b457-bd0d6998ccb5",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "No, only the impacted (numerically adjacent) records and their nearest neighbours—you’re basically stealing free number line space from your neighbours.",
          "ts": "1666288875.639339",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0463CWEH99"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "oxiq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "No, only the impacted (numerically adjacent) records and their nearest neighbours—you’re basically stealing free number line space from your neighbours."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "06c16915-72e5-458a-a2f8-e1b7a759bc5c",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "(also I know we’ve been talking in terms of `UInt16` here but there’s not much of a downside to using `UInt64`, especially if you expect a _lot_ of objects.",
          "ts": "1666288930.222099",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0463CWEH99"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "DCWuD",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "(also I know we’ve been talking in terms of "
                    },
                    {
                      "type": "text",
                      "text": "UInt16",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " here but there’s not much of a downside to using "
                    },
                    {
                      "type": "text",
                      "text": "UInt64",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", especially if you expect a "
                    },
                    {
                      "type": "text",
                      "text": "lot",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " of objects."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f234f162-05e7-4caa-8734-ef8d68e7e75a",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "Before anyone asks “what’s the downside?“, SQLite uses a variable-width encoding for integers (search for “varint” in \u003chttps://www.sqlite.org/fileformat.html\u003e) so a set of evenly distributed values in `0...UINT64_MAX` will take up _slightly_ more space on disk than `0…UINT16_MAX`",
          "ts": "1666289140.192169",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "IuWQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Before anyone asks “what’s the downside?“, SQLite uses a variable-width encoding for integers (search for “varint” in "
                    },
                    {
                      "type": "link",
                      "url": "https://www.sqlite.org/fileformat.html",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": ") so a set of evenly distributed values in "
                    },
                    {
                      "type": "text",
                      "text": "0...UINT64_MAX",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " will take up "
                    },
                    {
                      "type": "text",
                      "text": "slightly",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " more space on disk than "
                    },
                    {
                      "type": "text",
                      "text": "0…UINT16_MAX",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "72ba86f8-93df-410d-83f8-e877b2db7bd7",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "The likelihood of this causing a problem for anyone here is basically zero.",
          "ts": "1666289180.796089",
          "thread_ts": "1666287384.159289",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "8R2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The likelihood of this causing a problem for anyone here is basically zero."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U047J00UMR7\u003e asked\n\u0026gt; I used an app group to store the underlaying sqlite file on iOS like this:\n\u0026gt; \n\u0026gt; ```\n\u0026gt; if let storeURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: \"group.myid\")?.appendingPathComponent(\"file.sqlite\") {\n\u0026gt;     container.persistentStoreDescriptions = [NSPersistentStoreDescription(url: storeURL)]\n\u0026gt; }\n\u0026gt; ```\n\u0026gt;         \n\u0026gt; The same code crashes on tvOS (only device, not simulator)). Am I doing something wrong or is this not supported?\n\u0026gt; The error displayed is:\n\u0026gt; \n\u0026gt; ```\n\u0026gt; Fatal error: Unresolved error Error Domain=NSCocoaErrorDomain Code=513 UserInfo={reason=No permissions to create file; code = 1}, [\"reason\": No permissions to create file; code = 1]\n\u0026gt; ```",
      "ts": "1666287488.961719",
      "thread_ts": "1666287488.961719",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 4,
      "latest_reply": "1666287915.114219",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "e6wYL",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U047J00UMR7"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I used an app group to store the underlaying sqlite file on iOS like this:\\n\\n```\\nif let storeURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: \\\"group.myid\\\")?.appendingPathComponent(\\\"file.sqlite\\\") {\\n    container.persistentStoreDescriptions = [NSPersistentStoreDescription(url: storeURL)]\\n}\\n```\\n        \\nThe same code crashes on tvOS (only device, not simulator)). Am I doing something wrong or is this not supported?\\nThe error displayed is:\\n\\n```\\nFatal error: Unresolved error Error Domain=NSCocoaErrorDomain Code=513 UserInfo={reason=No permissions to create file; code = 1}, [\\\"reason\\\": No permissions to create file; code = 1]\\n```\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "EE02594B-C6FC-4998-99FD-F66CD389E16D",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "AppleTV has a slightly different directory structure than iOS for the user home, documents, etc.",
          "ts": "1666287533.175229",
          "thread_ts": "1666287488.961719",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "M1V",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "AppleTV has a slightly different directory structure than iOS for the user home, documents, etc."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "EB4F3511-9819-402B-96B0-9C96B802AAA2",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "This error is saying you don’t have permission to create the parent directory path or the db file",
          "ts": "1666287560.767889",
          "thread_ts": "1666287488.961719",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9Rm6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This error is saying you "
                    },
                    {
                      "type": "text",
                      "text": "don’t"
                    },
                    {
                      "type": "text",
                      "text": " have permission to create the parent directory path or the db file"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "A68A3970-A8DE-4EC5-B9B2-172AD36DD779",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "You probably want to verify the full path is correct ",
          "ts": "1666287581.464539",
          "thread_ts": "1666287488.961719",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "XOnhp",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You probably want to verify the "
                    },
                    {
                      "type": "text",
                      "text": "f"
                    },
                    {
                      "type": "text",
                      "text": "ull path is correct "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4f41113a-31fc-4200-a9c8-59386f2b77a6",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "I see. I will check how to use app group in AppleTV then. Thanks",
          "ts": "1666287915.114219",
          "thread_ts": "1666287488.961719",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5mL79",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I see. I will check how to use app group in AppleTV then. Thanks"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045NGKNMPH\u003e asked\n\u0026gt; Is it possible to detect changes made to NSPersistentCloudKitContainer from other devices as a background task?  I would like to be able to update widgets (which display info stored using Core Data), without the user having to open up the app first to trigger a sync. :smiley:",
      "ts": "1666287566.039099",
      "thread_ts": "1666287566.039099",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 5,
      "latest_reply": "1666290796.693559",
      "reactions": [
        {
          "name": "eyes",
          "count": 1,
          "users": [
            "U04656V5MGU"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "0Sdie",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045NGKNMPH"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is it possible to detect changes made to NSPersistentCloudKitContainer from other devices as a background task?  I would like to be able to update widgets (which display info stored using Core Data), without the user having to open up the app first to trigger a sync. \"},{\"type\":\"emoji\",\"name\":\"smiley\",\"unicode\":\"1f603\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "b90bad68-0a80-4fe9-8b94-bd57882c204a",
          "type": "message",
          "user": "U0484CTBMCY",
          "text": "This is something we’ve discussed with developers before, but unfortunately we don't have a great solution yet",
          "ts": "1666287598.160169",
          "thread_ts": "1666287566.039099",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xKhMS",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This is something we’ve discussed with developers before, but unfortunately we don't have a great solution yet"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "65e309d2-a63e-4558-b9ab-9b33f2c8e9c6",
          "type": "message",
          "user": "U0484CTBMCY",
          "text": "Could you file a bug with \u003chttp://feedbackassistant.apple.com|feedbackassistant.apple.com\u003e about this? It's nice to have more examples so we can figure out the right way to make this better",
          "ts": "1666287644.903989",
          "thread_ts": "1666287566.039099",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "star-struck",
              "count": 3,
              "users": [
                "U0455R18DT2",
                "U045NGKNMPH",
                "U045XJ72VFG"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "D/f",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Could you file a bug with "
                    },
                    {
                      "type": "link",
                      "url": "http://feedbackassistant.apple.com",
                      "text": "feedbackassistant.apple.com"
                    },
                    {
                      "type": "text",
                      "text": " about this? It's nice to have more examples so we can figure out the right way to make this better"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "020e52eb-4597-4ada-8850-14daf67fc4b8",
          "type": "message",
          "user": "U045NGKNMPH",
          "text": "Thanks very much!  I will file a bug and provide some examples :blush:",
          "ts": "1666288731.603839",
          "thread_ts": "1666287566.039099",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "30l",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks very much!  I will file a bug and provide some examples "
                    },
                    {
                      "type": "emoji",
                      "name": "blush",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d8572be6-7e2d-4b04-bec1-865e03254057",
          "type": "message",
          "user": "U0484CTBMCY",
          "text": "Thanks!",
          "ts": "1666288754.609069",
          "thread_ts": "1666287566.039099",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "B6z",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "cc0c7d5d-566e-4f37-b132-481dc569c7a5",
          "type": "message",
          "user": "U0463PJJB34",
          "text": "If you're syncing your core data store to iCloud can't you use an iCloud push notification to trigger a refresh? So from the `userNotificationCenter()` on `AppDelegate` call `WidgetCenter.shared.reloadAllTimelines()`?",
          "ts": "1666290796.693559",
          "thread_ts": "1666287566.039099",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "D51+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you're syncing your core data store to iCloud can't you use an iCloud push notification to trigger a refresh? So from the "
                    },
                    {
                      "type": "text",
                      "text": "userNotificationCenter()",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " on "
                    },
                    {
                      "type": "text",
                      "text": "AppDelegate",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " call "
                    },
                    {
                      "type": "text",
                      "text": "WidgetCenter.shared.reloadAllTimelines()",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046608Q205\u003e asked\n\u0026gt; I've found the @FetchRequest in SwiftUI to be a terrific way to bind my UI with my Core Data content.  I do have a small problem with using a relationship to get that same seamless binding however (and likely it is my misunderstanding).  Since NSManagedObjects represent 1:m relationships as an NSSet, I have to re-fetch the \"children\" in it's own @FetchRequest to maintain that smooth binding as I display a SwiftUI view for a list of those child Core Data elements (thus losing the benefit of a Core Data relationship property).  Am I missing something in my approach?  Thanks!",
      "ts": "1666287607.723029",
      "thread_ts": "1666287607.723029",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666287833.753379",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "ar0C",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046608Q205"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I've found the @FetchRequest in SwiftUI to be a terrific way to bind my UI with my Core Data content.  I do have a small problem with using a relationship to get that same seamless binding however (and likely it is my misunderstanding).  Since NSManagedObjects represent 1:m relationships as an NSSet, I have to re-fetch the \\\"children\\\" in it's own @FetchRequest to maintain that smooth binding as I display a SwiftUI view for a list of those child Core Data elements (thus losing the benefit of a Core Data relationship property).  Am I missing something in my approach?  Thanks!\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "0ec9711e-ab65-4364-9605-ba17f33dc4e7",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "This sounds similar to another question in which \u003chttps://appledeveloper.slack.com/archives/C04305NR6Q2/p1666286145313589?thread_ts=1666286092.023789\u0026amp;cid=C04305NR6Q2|I recommended using a predicate to filter only objects that have a certain relationship\u003e. I think the same approach should work for you?",
          "ts": "1666287660.588319",
          "thread_ts": "1666287607.723029",
          "attachments": [
            {
              "fallback": "[October 20th, 2022 10:15 AM] 898983932141390027: It’ll be faster to make Core Data do the filtering work by constructing a predicate, something like `NSPredicate(format: \"country = %@\", country)`",
              "id": 1,
              "author_id": "U0449HM5ZE2",
              "author_name": "Scott P (Apple)",
              "author_subname": "Scott P (Apple)",
              "author_link": "https://appledeveloper.slack.com/team/U0449HM5ZE2",
              "author_icon": "https://avatars.slack-edge.com/2022-10-11/4192633114135_1faa7fed630edd4c2e8f_48.png",
              "text": "It’ll be faster to make Core Data do the filtering work by constructing a predicate, something like `NSPredicate(format: \"country = %@\", country)`",
              "from_url": "https://appledeveloper.slack.com/archives/C04305NR6Q2/p1666286145313589?thread_ts=1666286092.023789\u0026amp;cid=C04305NR6Q2",
              "original_url": "https://appledeveloper.slack.com/archives/C04305NR6Q2/p1666286145313589?thread_ts=1666286092.023789\u0026amp;cid=C04305NR6Q2",
              "mrkdwn_in": [
                "text"
              ],
              "blocks": null,
              "footer": "From a thread in #coredata",
              "ts": 1666286145.313589
            }
          ],
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "QM5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This sounds similar to another question in which "
                    },
                    {
                      "type": "link",
                      "url": "https://appledeveloper.slack.com/archives/C04305NR6Q2/p1666286145313589?thread_ts=1666286092.023789\u0026cid=C04305NR6Q2",
                      "text": "I recommended using a predicate to filter only objects that have a certain relationship"
                    },
                    {
                      "type": "text",
                      "text": ". I think the same approach should work for you?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "422fd00d-fd23-4e38-849c-9fb0717bc4e6",
          "type": "message",
          "user": "U046608Q205",
          "text": "Ok, thanks \u003c@U0449HM5ZE2\u003e",
          "ts": "1666287833.753379",
          "thread_ts": "1666287607.723029",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "SQn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok, thanks "
                    },
                    {
                      "type": "user",
                      "user_id": "U0449HM5ZE2"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045ZUY8JHK\u003e asked\n\u0026gt; How does changing the order of objects in a \"ordered\" relationship appear in persistent history? Does the NSPersistentHistoryChange have the parent or child entity? Which properties are in updatedProperties?",
      "ts": "1666287906.608189",
      "thread_ts": "1666287906.608189",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666288214.913539",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "z5fN",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045ZUY8JHK"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How does changing the order of objects in a \\\"ordered\\\" relationship appear in persistent history? Does the NSPersistentHistoryChange have the parent or child entity? Which properties are in updatedProperties?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "1ce558a9-ac60-4722-bc00-f4ca1dc69f47",
          "type": "message",
          "user": "U044UR3FUPK",
          "text": "For the change of ordering, both sides of the Relationship will show up as an NSPersistentHistoryChange and list the relationship in the updatedProperties",
          "ts": "1666288179.218089",
          "thread_ts": "1666287906.608189",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YK2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "For the change of ordering, both sides of the Relationship will show up as an NSPersistentHistoryChange and list the relationship in the updatedProperties"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8D8C34A5-BBD4-404A-AD6E-B50565F1778C",
          "type": "message",
          "user": "U045ZUY8JHK",
          "text": "Neat. Thanks!",
          "ts": "1666288214.913539",
          "thread_ts": "1666287906.608189",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U044UR3FUPK"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gKLy",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Neat. Thanks!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U047J00UMR7\u003e asked\n\u0026gt; If a user switches off iCloud in the Settings app for my app, is all the data automatically deleted, or do I have to clean anything up?",
      "ts": "1666287958.108109",
      "thread_ts": "1666287958.108109",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 2,
      "latest_reply": "1666288028.562239",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "+f+",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U047J00UMR7"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"If a user switches off iCloud in the Settings app for my app, is all the data automatically deleted, or do I have to clean anything up?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "0fdf912e-1134-40d0-8978-cd5451e96701",
          "type": "message",
          "user": "U0441KCTUF9",
          "text": "The data is deleted locally on your behalf.",
          "ts": "1666287985.602239",
          "thread_ts": "1666287958.108109",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U047J00UMR7",
                "U0462AL317X"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Jfz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The data is deleted locally on your behalf."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2f54fdda-44fc-4f32-a229-7d6a8de9f495",
          "type": "message",
          "user": "U047J00UMR7",
          "text": "Thanks",
          "ts": "1666288028.562239",
          "thread_ts": "1666287958.108109",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "kgx",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046608Q205\u003e asked\n\u0026gt; I have a need (related to SwiftUI's .navigationDestination(for: myCoreDataClass) to add Codable to my NSManagedObjects.  I manually generate my NSManagedObject and implement the Codable protocol to achieve this goal.  Is there a better way to handle it?  Thanks.",
      "ts": "1666287960.572949",
      "thread_ts": "1666287960.572949",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 7,
      "latest_reply": "1666288881.155839",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "L1n=D",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046608Q205"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have a need (related to SwiftUI's .navigationDestination(for: myCoreDataClass) to add Codable to my NSManagedObjects.  I manually generate my NSManagedObject and implement the Codable protocol to achieve this goal.  Is there a better way to handle it?  Thanks.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "D7C43A51-2F5F-42FC-ADAB-BEFA4E503BFC",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Codable can’t express references, and even if it could, you can’t accurately encode a single object in a graph by itself ",
          "ts": "1666288019.321949",
          "thread_ts": "1666287960.572949",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9nt",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Codable can’t express references, and even if it could, you can’t accurately encode a single object in a graph by itself "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "79F387D3-E2B8-4E26-A713-120F1B5B1F8F",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Instead you ought to create a transformation appropriate to the subset of the data you need here that can be codable ",
          "ts": "1666288062.337479",
          "thread_ts": "1666287960.572949",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "oIBS",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Instead you ought to create a transformation appropriate to the subset of the data you need here that can be codable "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "C76C9617-BE23-4CC6-8E38-376F8D1D8158",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Consequently I strongly discourage making your subclass Codable as it could be used accidentally in a more general way",
          "ts": "1666288099.256569",
          "thread_ts": "1666287960.572949",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jdTtc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Consequently I strongly discourage making your subclass Codable as it could be used accidentally in a more general "
                    },
                    {
                      "type": "text",
                      "text": "w"
                    },
                    {
                      "type": "text",
                      "text": "ay"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "CE0C8AC6-446F-4940-989E-0BAACF20B75A",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Does navigationDestination really need the data ?  Or just a serialized identity ?",
          "ts": "1666288121.796459",
          "thread_ts": "1666287960.572949",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Ux1K",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Does navigationDestination really need the data ?  Or just a serialized identity ?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "C8E323EC-799D-422F-9BC6-3C88292FF459",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Could you use URIRepresentation of the objectID instead ?",
          "ts": "1666288136.460069",
          "thread_ts": "1666287960.572949",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/b4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Could you use URIRepresentation of the objectID instead ?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d549e891-b2df-4eee-b964-ebe5575aa1bf",
          "type": "message",
          "user": "U046608Q205",
          "text": "Thanks, \u003c@U044UR1MYF3\u003e I do see what you're pointing out (and it explains a random issue I have seen).  In my effort to code for .navigationDestination(for: myCoreDataClass1) versus .navigationDestination(for: myCoreDataClass2) I was hoping not to have to re-fetch for each suppporting SwiftUI view, but I see that I should not  be skipping that step.",
          "ts": "1666288565.074779",
          "thread_ts": "1666287960.572949",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7YJ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks, "
                    },
                    {
                      "type": "user",
                      "user_id": "U044UR1MYF3"
                    },
                    {
                      "type": "text",
                      "text": " I do see what you're pointing out (and it explains a random issue I have seen).  In my effort to code for .navigationDestination(for: myCoreDataClass1) versus .navigationDestination(for: myCoreDataClass2) I was hoping not to have to re-fetch for each suppporting SwiftUI view, but I see that I should not  be skipping that step."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "02DA4E34-7A4C-4BCE-B7A6-1729B23379FC",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Asking the MOC for objectWithID after turning the URL into an objectID by the NSPersistentStoreCoordinator is pretty fast ",
          "ts": "1666288881.155839",
          "thread_ts": "1666287960.572949",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "R2Vr",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Asking the MOC for objectWithID after turning the URL into an objectID by the NSPersistentStoreCoordinator is pretty fast "
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046JND8CKB\u003e asked\n\u0026gt; I want to load multiple values from one entity e.g. Person and display changeable attributes e.g. waist, hips etc. Does batch allow for multiple values in a List or do I need to create a FetchRequest for each value separately in order to be able to view the value, then edit and save a new value. Or is there a better way of going about this? Thanks.",
      "ts": "1666288715.924059",
      "thread_ts": "1666288715.924059",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666289297.078939",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "zmD",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046JND8CKB"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I want to load multiple values from one entity e.g. Person and display changeable attributes e.g. waist, hips etc. Does batch allow for multiple values in a List or do I need to create a FetchRequest for each value separately in order to be able to view the value, then edit and save a new value. Or is there a better way of going about this? Thanks.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "6074e478-02bc-4f94-a3cc-147394a9af1a",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "I’m pretty sure I don’t understand the question, but if these properties are values (read: not relationships) then fetching the right person will get you all the attributes.",
          "ts": "1666289297.078939",
          "thread_ts": "1666288715.924059",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Be0j",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m pretty sure I don’t understand the question, but if these properties are values (read: not relationships) then fetching the right person will get you all the attributes."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0468P6C81G\u003e asked\n\u0026gt; When used in an app extension, `NSPersistentCloudKitContainer` will not have sufficient time to sync a record change to CloudKit. Is there a workaround or suggestion on how to allow the container to sync before an extension is terminated?\n\u0026gt; \n\u0026gt; Would it be reliable to listen for an 'export' event before considering the extension's work complete? Or is that not reliable/throttled?",
      "ts": "1666288723.455969",
      "thread_ts": "1666288723.455969",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 9,
      "latest_reply": "1666290871.004179",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "9FC4o",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0468P6C81G"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When used in an app extension, `NSPersistentCloudKitContainer` will not have sufficient time to sync a record change to CloudKit. Is there a workaround or suggestion on how to allow the container to sync before an extension is terminated?\\n\\nWould it be reliable to listen for an 'export' event before considering the extension's work complete? Or is that not reliable\\/throttled?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "81483660-2B5F-48E2-BDD9-D0FEAE4C9F2E",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Unfortunately task assertions just don’t work the same in widgets and the platform time limits are much much shorter",
          "ts": "1666289031.017359",
          "thread_ts": "1666288723.455969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OQwo",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Unfortunately task assertions just "
                    },
                    {
                      "type": "text",
                      "text": "don’t"
                    },
                    {
                      "type": "text",
                      "text": " work the same in widgets and the platform time limits are much much shorter"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5515125a-d88f-4bbb-9b89-54aab97b23a1",
          "type": "message",
          "user": "U0468P6C81G",
          "text": "I’m thinking not so much of a widget but a share/action extension.",
          "ts": "1666289101.696949",
          "thread_ts": "1666288723.455969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "an/",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m thinking not so much of a widget but a share/action extension."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "bb8c9145-8b24-45d5-8e29-3adb9ae1cc45",
          "type": "message",
          "user": "U0468P6C81G",
          "text": "Or even a Safari App Extension on macOS.\n\nAny suggested workarounds in these situations to allow data to sync to the cloud without needing the parent app to be put into the foreground?",
          "ts": "1666289131.626159",
          "thread_ts": "1666288723.455969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6Xsn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Or even a Safari App Extension on macOS.\n\nAny suggested workarounds in these situations to allow data to sync to the cloud without needing the parent app to be put into the foreground?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "FCFD732F-A8F2-4B00-8018-51AA8FCBFEB0",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "Hmmm.  Not sure about macOS.  A little more flexibility there ",
          "ts": "1666289241.514859",
          "thread_ts": "1666288723.455969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "dTHB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hmmm.  Not sure about macOS.  A little more flexibility there "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "14602F66-FD59-4CF5-9DF4-07EA7DCC8844",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "It’s worth a separate feedback item for that specifically",
          "ts": "1666289283.968019",
          "thread_ts": "1666288723.455969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UvV",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It’s worth a separate feedback item for that specifically"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3b7168a5-4b36-4796-8072-6f7be556f951",
          "type": "message",
          "user": "U0468P6C81G",
          "text": "So one request for each platform, perhaps, with my use cases?",
          "ts": "1666289313.633009",
          "thread_ts": "1666288723.455969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Nrgw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "So one request for each platform, perhaps, with my use cases?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "180AA6D1-24CF-4968-8943-0729BBD8B286",
          "type": "message",
          "user": "U044UR1MYF3",
          "text": "No, just one is fine ",
          "ts": "1666289379.005729",
          "thread_ts": "1666288723.455969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ylzX6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "No, just one is fine "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a81f8533-230b-477f-9e4b-207e5bcb2558",
          "type": "message",
          "user": "U0468P6C81G",
          "text": "Okay. I’ll submit that shortly.\n\nShould that be filed under Core Data or CloudKit?",
          "ts": "1666289597.607519",
          "thread_ts": "1666288723.455969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "N8Lr",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Okay. I’ll submit that shortly.\n\nShould that be filed under Core Data or CloudKit?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0b107ad1-c37a-4ef3-8d66-af9127118ecb",
          "type": "message",
          "user": "U0468P6C81G",
          "text": "Previous FB: FB8974819\nNew FB: FB11708048",
          "ts": "1666290871.004179",
          "thread_ts": "1666288723.455969",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "F7KYL",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Previous FB: FB8974819\nNew FB: FB11708048"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046S1N1ZR6\u003e asked\n\u0026gt; Hi! I’m using Core Data in a SwiftUI app. At some point I have some values updated via a Slider and there is a text field reflecting the value (observing the published property). The behavior I’m seeing is that when undoManager is disabled the object triggers objectWillChange continuously but with the undoManager enabled it only fires when editing is done. Is this expected behavior? What could I do in order to keep undo functionality but also update views depending on that value while is being continuously changed?",
      "ts": "1666288801.447699",
      "thread_ts": "1666288801.447699",
      "subtype": "bot_message",
      "bot_id": "B043H9TSSMP",
      "username": "Ask Apple - coredata",
      "reply_count": 1,
      "latest_reply": "1666289234.379589",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "hy5OY",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046S1N1ZR6"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hi! I\\u2019m using Core Data in a SwiftUI app. At some point I have some values updated via a Slider and there is a text field reflecting the value (observing the published property). The behavior I\\u2019m seeing is that when undoManager is disabled the object triggers objectWillChange continuously but with the undoManager enabled it only fires when editing is done. Is this expected behavior? What could I do in order to keep undo functionality but also update views depending on that value while is being continuously changed?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "2940ec67-c9f2-4868-b8b3-efd138e67968",
          "type": "message",
          "user": "U0449HM5ZE2",
          "text": "This seems worth a Feedback Report with an example project so we can have a closer look.",
          "ts": "1666289234.379589",
          "thread_ts": "1666288801.447699",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U046S1N1ZR6"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "huYn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This seems worth a Feedback Report with an example project so we can have a closer look."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "ac6e1105-72a6-4127-ade4-4cad254a903e",
      "type": "message",
      "user": "U0455R18DT2",
      "text": ":checkered_flag: That’s all the time we have for *Q\u0026amp;A: Core Data*! Thank you for joining us this week, asking awesome questions, and telling us all about your apps. If you still have questions, or encounter issues during development, here are some steps to consider taking next:\n• File Feedback using \u003chttp://feedbackassistant.apple.com/|Feedback Assistant\u003e for any behavior that you feel is unexpected, or even for enhancements you’d like to see in various frameworks and tools!\n• Get code-level support by submitting a \u003chttps://developer.apple.com/support/technical/|Technical Support Incident (TSI)\u003e and receiving support from members of the Developer Technical Support team directly.\n• Check out the \u003chttps://developer.apple.com/forums/|Apple Developer Forums\u003e to interact with other developers from the community, ask questions, or provide help on ones you know the answer to!\nWe’ll be closing up the Q\u0026amp;A workflow now, but we’ll leave the threading open so we can continue to discuss with you for a bit longer! We hope to hear from you all again soon! :racing_car:",
      "ts": "1666288867.847909",
      "edited": {
        "user": "U0455R18DT2",
        "ts": "1666288950.000000"
      },
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "raised_hands",
          "count": 7,
          "users": [
            "U04742GGNQY",
            "U0462AL317X",
            "U046SQBFNS1",
            "U0449HM5ZE2",
            "U0463PJJB34",
            "U047VNWH0HW",
            "U04613VPTSR"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "rdc",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "emoji",
                  "name": "checkered_flag",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " That’s all the time we have for "
                },
                {
                  "type": "text",
                  "text": "Q\u0026A: Core Data",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": "! Thank you for joining us this week, asking awesome questions, and telling us all about your apps. If you still have questions, or encounter issues during development, here are some steps to consider taking next:\n"
                }
              ]
            },
            {
              "Type": "rich_text_list",
              "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"File Feedback using \"},{\"type\":\"link\",\"url\":\"http:\\/\\/feedbackassistant.apple.com\\/\",\"text\":\"Feedback Assistant\"},{\"type\":\"text\",\"text\":\" for any behavior that you feel is unexpected, or even for enhancements you\\u2019d like to see in various frameworks and tools!\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"Get code-level support by submitting a \"},{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/support\\/technical\\/\",\"text\":\"Technical Support Incident (TSI)\"},{\"type\":\"text\",\"text\":\" and receiving support from members of the Developer Technical Support team directly.\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"Check out the \"},{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/forums\\/\",\"text\":\"Apple Developer Forums\"},{\"type\":\"text\",\"text\":\" to interact with other developers from the community, ask questions, or provide help on ones you know the answer to!\"}]}],\"style\":\"bullet\",\"indent\":0,\"border\":0}"
            },
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "\nWe’ll be closing up the Q\u0026A workflow now, but we’ll leave the threading open so we can continue to discuss with you for a bit longer! We hope to hear from you all again soon! "
                },
                {
                  "type": "emoji",
                  "name": "racing_car",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "channel_id": "C04305NR6Q2"
}
