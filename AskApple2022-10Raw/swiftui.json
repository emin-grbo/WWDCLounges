{
  "name": "swiftui",
  "messages": [
    {
      "type": "message",
      "user": "U03V30M0C1K",
      "text": "This content can't be displayed.",
      "ts": "1665433842.046459",
      "pinned_to": [
        "C043025CS59"
      ],
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "wave",
          "count": 74,
          "users": [
            "U046S4P76FJ",
            "U045VNYTJNS",
            "U046ETTUR2M",
            "U045NKLC6SK",
            "U045WLS7EF8",
            "U045WGB2MAS",
            "U045MNL02NB",
            "U046SPY5QTS",
            "U0460ANUMM3",
            "U045NN2P4H5",
            "U045X0LCAP8",
            "U04613G418V",
            "U0466QG3328",
            "U04640ZSQ4T",
            "U045Y0FCP1U",
            "U046GSZUQMP",
            "U046SR82Q56",
            "U046H78PGRF",
            "U04627DJZ8A",
            "U045XU1L18E",
            "U046531D8D8",
            "U0465178M5Z",
            "U046ESTKY9X",
            "U046T0X1Z88",
            "U0465RB3QRZ",
            "U046JMVM9J5",
            "U046VFNJD6C",
            "U045Z2GB294",
            "U04613VPTSR",
            "U04674U8Z60",
            "U045SJ3J1D5",
            "U0464MJTND8",
            "U045Q0LLDRV",
            "U046T34DRPS",
            "U0464MKLKPW",
            "U0464MDV42G",
            "U0463L7KA94",
            "U04636Y7AEN",
            "U0466860CRK",
            "U045W2MK4UW",
            "U04688C097X",
            "U046JKNHM6D",
            "U046HTXUXK3",
            "U0465BHUY78",
            "U0469M1GMU5",
            "U046R2YCDSM",
            "U04627EQP4J",
            "U04607CP4NR",
            "U046F4A0AKB",
            "U046M07NWPN"
          ]
        },
        {
          "name": "swift-blue",
          "count": 44,
          "users": [
            "U046S4P76FJ",
            "U0462LFMHNW",
            "U046ETTUR2M",
            "U045VJUEGT0",
            "U04606886R3",
            "U045WLS7EF8",
            "U046SPY5QTS",
            "U0460ANUMM3",
            "U045NN2P4H5",
            "U04613M1R9T",
            "U046H5P1BR7",
            "U046GSZUQMP",
            "U045X0Y1SEA",
            "U046SR82Q56",
            "U0465178M5Z",
            "U045NJ0Q371",
            "U046T0X1Z88",
            "U046JMVM9J5",
            "U046VFNJD6C",
            "U04613VPTSR",
            "U04674U8Z60",
            "U0464MJTND8",
            "U04631P5B5Z",
            "U0464MDV42G",
            "U0463L7KA94",
            "U045Q0J840P",
            "U04636Y7AEN",
            "U045WBRKHK9",
            "U0466BR75L4",
            "U046HTXUXK3",
            "U0455GWEBLK",
            "U046M07NWPN",
            "U045Y93LFFY",
            "U046FJMTY85",
            "U045WJCT7GW",
            "U045ZRTH5A9",
            "U0467QGN9NG",
            "U045W72PSLE",
            "U0465B4D4DS",
            "U045VNN3MPY",
            "U045X7GEFQW",
            "U046PQBNUKF",
            "U04646FBEPM",
            "U045X13QYNA"
          ]
        },
        {
          "name": "100",
          "count": 11,
          "users": [
            "U045VJUEGT0",
            "U045PB421QX",
            "U046GSZUQMP",
            "U046VFNJD6C",
            "U0463L7KA94",
            "U045PAYCZ55",
            "U046HTXUXK3",
            "U046M07NWPN",
            "U0463AA946N",
            "U0465B4D4DS",
            "U045X13QYNA"
          ]
        },
        {
          "name": "man_dancing",
          "count": 7,
          "users": [
            "U045WJCT7GW",
            "U045XCRUTDL",
            "U045WMCQVF0",
            "U046GSZUQMP",
            "U04674U8Z60",
            "U046A8YBVSS",
            "U0465B4D4DS"
          ]
        },
        {
          "name": "flag-ua",
          "count": 6,
          "users": [
            "U046JMVM9J5",
            "U04687JUW3D",
            "U046KLSN137",
            "U046GSZUQMP",
            "U0465B4D4DS",
            "U046RU8GSP2"
          ]
        },
        {
          "name": "flag-az",
          "count": 3,
          "users": [
            "U045Y9APPPG",
            "U046NQJRMKP",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "thumbsup_all",
          "count": 5,
          "users": [
            "U046797427P",
            "U046TDS4WF6",
            "U046GSZUQMP",
            "U0465B4D4DS",
            "U045X13QYNA"
          ]
        },
        {
          "name": "pride",
          "count": 2,
          "users": [
            "U045Z2GB294",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "flag-tr",
          "count": 3,
          "users": [
            "U0466860CRK",
            "U046GSZUQMP",
            "U045VJUEGT0"
          ]
        },
        {
          "name": "flag-th",
          "count": 2,
          "users": [
            "U04688C097X",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "+1",
          "count": 2,
          "users": [
            "U046JKNHM6D",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "flag-hu",
          "count": 2,
          "users": [
            "U046S4P76FJ",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "es",
          "count": 4,
          "users": [
            "U045MLR4N4F",
            "U046GSZUQMP",
            "U0476FV3AG1",
            "U0471G9UNPJ"
          ]
        },
        {
          "name": "flag-pt",
          "count": 6,
          "users": [
            "U045NJ0Q371",
            "U046HB1QVC6",
            "U046GSZUQMP",
            "U046RF5K0KF",
            "U045P49MYH5",
            "U046JHLUHHV"
          ]
        },
        {
          "name": "flag-ee",
          "count": 2,
          "users": [
            "U0465BHUY78",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "de",
          "count": 3,
          "users": [
            "U046Q257KHP",
            "U046GSZUQMP",
            "U046BTU170T"
          ]
        },
        {
          "name": "white_check_mark",
          "count": 3,
          "users": [
            "U045YHHFMAA",
            "U045R2JDPRV",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "gb",
          "count": 5,
          "users": [
            "U04657BQRD1",
            "U046GSZUQMP",
            "U046JCY4F4H",
            "U0465UU8AR1",
            "U045MLXJX71"
          ]
        },
        {
          "name": "cn",
          "count": 5,
          "users": [
            "U04640E3KAP",
            "U047FBVBYE4",
            "U046GSZUQMP",
            "U045Z2GB294",
            "U046PQBNUKF"
          ]
        },
        {
          "name": "flag-lv",
          "count": 2,
          "users": [
            "U0472UJRXQ9",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "flag-ph",
          "count": 2,
          "users": [
            "U04640SDPPD",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "fr",
          "count": 7,
          "users": [
            "U046LD7DMM3",
            "U046GSZUQMP",
            "U046VFNJD6C",
            "U045X6PBB8F",
            "U045VKE445U",
            "U045VNN3MPY",
            "U047BSWUY6R"
          ]
        },
        {
          "name": "it",
          "count": 2,
          "users": [
            "U04627DJZ8A",
            "U04713BK29G"
          ]
        },
        {
          "name": "raised_hands",
          "count": 1,
          "users": [
            "U0469KJQ23Z"
          ]
        },
        {
          "name": "flag-au",
          "count": 1,
          "users": [
            "U045ZRTH5A9"
          ]
        },
        {
          "name": "flag-uz",
          "count": 1,
          "users": [
            "U0464LD88A3"
          ]
        },
        {
          "name": "flag-il",
          "count": 1,
          "users": [
            "U046A8YBVSS"
          ]
        },
        {
          "name": "flag-in",
          "count": 1,
          "users": [
            "U046HD1TZ6X"
          ]
        },
        {
          "name": "female-technologist::skin-tone-2",
          "count": 1,
          "users": [
            "U046AD35GAK"
          ]
        },
        {
          "name": "flag-ch",
          "count": 1,
          "users": [
            "U046W3K4V44"
          ]
        },
        {
          "name": "flag-hr",
          "count": 1,
          "users": [
            "U04657SB526"
          ]
        },
        {
          "name": "us",
          "count": 2,
          "users": [
            "U04742GGNQY",
            "U046S06TU8Y"
          ]
        },
        {
          "name": "flag-xk",
          "count": 1,
          "users": [
            "U046RUWTEVA"
          ]
        },
        {
          "name": "flag-br",
          "count": 1,
          "users": [
            "U0465B4D4DS"
          ]
        },
        {
          "name": "gratitude-merci",
          "count": 1,
          "users": [
            "U046PD9HVV4"
          ]
        },
        {
          "name": "flag-ma",
          "count": 1,
          "users": [
            "U045VNN3MPY"
          ]
        },
        {
          "name": "kr",
          "count": 3,
          "users": [
            "U045PTKE1CP",
            "U046RB09L3Y",
            "U0473TWCM98"
          ]
        },
        {
          "name": "flag-cd",
          "count": 1,
          "users": [
            "U045ZD12PK7"
          ]
        },
        {
          "name": "flag-sk",
          "count": 1,
          "users": [
            "U046J1YLE7R"
          ]
        },
        {
          "name": "flag-mx",
          "count": 1,
          "users": [
            "U0469BLDSHY"
          ]
        },
        {
          "name": "flag-ca",
          "count": 2,
          "users": [
            "U046KTUHXQA",
            "U046KUR7658"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "header",
          "text": {
            "type": "plain_text",
            "text": "Welcome to Ask Apple",
            "emoji": true
          },
          "block_id": "ASjV9"
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "We're excited to be hosting you in the SwiftUI channel this week! You can find the full schedule of Q\u0026amp;As for SwiftUI by visiting the \u003chttps://apps.apple.com/us/app/apple-developer/id640199958 | Apple Developer app\u003e and \u003chttps://developer.apple.com/events/ask-apple/questions-and-answers/ | website\u003e."
          },
          "block_id": "YcP7p"
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "If you haven’t already, please take a moment to familiarize yourself with \u003chttps://developer.apple.com/news/?id=vpbyzfg4 | how Q\u0026amp;As will work\u003e."
          },
          "block_id": "eRc"
        },
        {
          "type": "header",
          "text": {
            "type": "plain_text",
            "text": "Attendance Policy",
            "emoji": true
          },
          "block_id": "okGT"
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "We want to make sure these spaces are helpful and welcoming for everyone — developers and Apple employees alike. Please review and follow the \u003chttps://developer.apple.com/events/policy/online-event-attendance-policy/ | attendance policy\u003e."
          },
          "block_id": "aiPhs"
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U03V30M0C1K\u003e added a workflow to this channel: *Ask Apple - swiftui*.",
      "ts": "1666019014.991349",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reactions": [
        {
          "name": "raised_hands",
          "count": 6,
          "users": [
            "U0471G9UNPJ",
            "U045PMSCTGX",
            "U0461ACCYSH",
            "U045R2JDPRV",
            "U046S4R8UEP",
            "U04657SB526"
          ]
        },
        {
          "name": "parrot",
          "count": 1,
          "users": [
            "U045VJUEGT0"
          ]
        },
        {
          "name": "swift-blue",
          "count": 1,
          "users": [
            "U046797427P"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "TC4",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U03V30M0C1K"
                },
                {
                  "type": "text",
                  "text": " added a workflow to this channel: "
                },
                {
                  "type": "text",
                  "text": "Ask Apple - swiftui",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "1329c9c7-4728-41d1-be9e-46c87885252c",
      "type": "message",
      "user": "U045J8S8JQZ",
      "text": "We’re excited to kick off a week of Q\u0026amp;A activities! Our first SwiftUI activity will be Tuesday at 10AM PST. We hope you can join us! If you’re unable to tune-in live, you can begin sending in your questions that are related to SwiftUI now. Select the:heavy_plus_sign:icon from the lower left, and find the _Ask A Question_ workflow. Type in your question and it will be delivered directly to the team. We’ll answer as many questions as we can during the 60 minute event on Tuesday. :tada:",
      "ts": "1666019152.799049",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "tada",
          "count": 48,
          "users": [
            "U03V30M0C1K",
            "U046ES912UR",
            "U046G8ED8LR",
            "U046USZCWU8",
            "U046J102475",
            "U046TV7E9S7",
            "U0465R7QB3N",
            "U045NGKNMPH",
            "U0479GPNJ2C",
            "U046SQ2Q108",
            "U046ETGSKNV",
            "U045R2JDPRV",
            "U0471G9UNPJ",
            "U03V8DT125A",
            "U0461ACCYSH",
            "U045Z8Z036H",
            "U0464SKECHJ",
            "U045Q0J840P",
            "U04613G418V",
            "U045MLXJX71",
            "U04635ASQAW",
            "U0465MRJBFW",
            "U046VFNJD6C",
            "U046UKZ6ZS4",
            "U0464NE480L",
            "U045ZR19WK1",
            "U0455GWEBLK",
            "U046S4P76FJ",
            "U045PHMLFFZ",
            "U046SQBF2P7",
            "U0465B4D4DS",
            "U0466JB1G7N",
            "U0460BADXM3",
            "U047LTPUW8G",
            "U046S4R8UEP",
            "U045PBUPRP1",
            "U047AFF0117",
            "U046GSZUQMP",
            "U04657SB526",
            "U046YKS1Q9H",
            "U046QNR7A8H",
            "U046VNH8J9Y",
            "U046JHLUHHV",
            "U045XTG02PR",
            "U045RMUH7AB",
            "U0464HBHA7P",
            "U046LURKWA1",
            "U04676LGCK0"
          ]
        },
        {
          "name": "heart_eyes",
          "count": 13,
          "users": [
            "U045W72PSLE",
            "U046J102475",
            "U045R2JDPRV",
            "U046VFNJD6C",
            "U045ZR19WK1",
            "U0465B4D4DS",
            "U04667MNNA0",
            "U046S4R8UEP",
            "U0455RVLUQG",
            "U046GSZUQMP",
            "U046QNR7A8H",
            "U046VNH8J9Y",
            "U045XTG02PR"
          ]
        },
        {
          "name": "swift-blue",
          "count": 23,
          "users": [
            "U045W72PSLE",
            "U046ETGSKNV",
            "U045Z8Z036H",
            "U045Q0J840P",
            "U046VFNJD6C",
            "U046UKZ6ZS4",
            "U0464NE480L",
            "U045ZR19WK1",
            "U0460FNRH46",
            "U0463PJJB34",
            "U0465B4D4DS",
            "U046PD9HVV4",
            "U0465AXV1J8",
            "U0460BADXM3",
            "U04617U8AUV",
            "U047LTPUW8G",
            "U0455RVLUQG",
            "U046GSZUQMP",
            "U0463L7KA94",
            "U046YKS1Q9H",
            "U046QNR7A8H",
            "U046VNH8J9Y",
            "U045XTG02PR"
          ]
        },
        {
          "name": "orange_heart",
          "count": 6,
          "users": [
            "U0479GPNJ2C",
            "U046VFNJD6C",
            "U0465B4D4DS",
            "U046GSZUQMP",
            "U046QNR7A8H",
            "U045XTG02PR"
          ]
        },
        {
          "name": "star-struck",
          "count": 7,
          "users": [
            "U04688FP4MS",
            "U046VFNJD6C",
            "U0465B4D4DS",
            "U045PB421QX",
            "U046GSZUQMP",
            "U046QNR7A8H",
            "U045XTG02PR"
          ]
        },
        {
          "name": "eyes",
          "count": 6,
          "users": [
            "U046S4P76FJ",
            "U0465B4D4DS",
            "U046S4R8UEP",
            "U046GSZUQMP",
            "U046QNR7A8H",
            "U045XTG02PR"
          ]
        },
        {
          "name": "+1",
          "count": 9,
          "users": [
            "U046RV9P6BS",
            "U046SPUTFTP",
            "U046367SLLB",
            "U0465B4D4DS",
            "U046GSZUQMP",
            "U046QNR7A8H",
            "U045XTG02PR",
            "U046AG9QTLL",
            "U0461C26GTX"
          ]
        },
        {
          "name": "heart",
          "count": 5,
          "users": [
            "U046PD9HVV4",
            "U046M0XQTEJ",
            "U046GSZUQMP",
            "U046QNR7A8H",
            "U045XTG02PR"
          ]
        },
        {
          "name": "kissing_heart",
          "count": 4,
          "users": [
            "U046PD9HVV4",
            "U046GSZUQMP",
            "U046QNR7A8H",
            "U045XTG02PR"
          ]
        },
        {
          "name": "white_check_mark",
          "count": 4,
          "users": [
            "U045Z2GB294",
            "U046GSZUQMP",
            "U046QNR7A8H",
            "U045XTG02PR"
          ]
        },
        {
          "name": "swift-orange",
          "count": 3,
          "users": [
            "U046VNH8J9Y",
            "U045XTG02PR",
            "U046QNR7A8H"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "z1C",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "We’re excited to kick off a week of Q\u0026A activities! Our first SwiftUI activity will be Tuesday at 10AM PST. We hope you can join us! If you’re unable to tune-in live, you can begin sending in your questions that are related to SwiftUI now. Select the"
                },
                {
                  "type": "emoji",
                  "name": "heavy_plus_sign",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": "icon from the lower left, and find the "
                },
                {
                  "type": "text",
                  "text": "Ask A Question",
                  "style": {
                    "italic": true
                  }
                },
                {
                  "type": "text",
                  "text": " workflow. Type in your question and it will be delivered directly to the team. We’ll answer as many questions as we can during the 60 minute event on Tuesday. "
                },
                {
                  "type": "emoji",
                  "name": "tada",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "7b094c07-e467-415e-bcc6-9143236c1973",
      "type": "message",
      "user": "U0453US3GAJ",
      "text": "\u003c!here\u003e\nHi everyone! I am Evelyn, SwiftUI’s integration engineer. I’m excited to start the fun soon!\nIn 25 minutes our SwiftUI engineers, will be answering your questions. Brainstorm those burning questions if you have not done so already!",
      "ts": "1666110991.050369",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "heart",
          "count": 18,
          "users": [
            "U0441J2N9FH",
            "U046AG9QTLL",
            "U046RUWTEVA",
            "U045Z2GB294",
            "U04673H2H8C",
            "U0467CSKP2R",
            "U046SQJ0N04",
            "U0462593A2F",
            "U046S4P76FJ",
            "U046S70K9A4",
            "U045NJ0Q371",
            "U045J8S8JQZ",
            "U045XTG02PR",
            "U0465MRJBFW",
            "U046VFNJD6C",
            "U04714256JC",
            "U04646FBEPM",
            "U046F4A0AKB"
          ]
        },
        {
          "name": "wave::skin-tone-2",
          "count": 1,
          "users": [
            "U0468P6C81G"
          ]
        },
        {
          "name": "wave",
          "count": 11,
          "users": [
            "U046VVDKR5Z",
            "U045LLLQHLM",
            "U0463PJJB34",
            "U046S4P76FJ",
            "U046S70K9A4",
            "U047LTPUW8G",
            "U046XCQCF36",
            "U045XTG02PR",
            "U046068A90D",
            "U046VFNJD6C",
            "U04646FBEPM"
          ]
        },
        {
          "name": "+1",
          "count": 4,
          "users": [
            "U045LLLQHLM",
            "U046068A90D",
            "U046RV9P6BS",
            "U04646FBEPM"
          ]
        },
        {
          "name": "partying_face",
          "count": 4,
          "users": [
            "U03V30M0C1K",
            "U045WJCT7GW",
            "U046VFNJD6C",
            "U04646FBEPM"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "m68f",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "broadcast",
                  "range": "here"
                },
                {
                  "type": "text",
                  "text": "\nHi everyone! I am Evelyn, SwiftUI’s integration engineer. I’m excited to start the fun soon!\nIn 25 minutes our SwiftUI engineers, will be answering your questions. Brainstorm those burning questions if you have not done so already!"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "8ea64e44-2f5a-4fe3-ae52-a341906800d3",
      "type": "message",
      "user": "U045J8S9EU9",
      "text": "Welcome to SwiftU’s first Q\u0026amp;A! We’re looking forward to answering your questions. Select the:heavy_plus_sign:icon from the lower left, and find the _Ask A Question_ workflow. Type in your question and it will be delivered directly to the team. We’ll answer as many questions as we can. While it’s unlikely we’ll be able to address every question, all your submissions are valuable; thank you for taking the time! :rocket:",
      "ts": "1666112400.935599",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "star-struck",
          "count": 8,
          "users": [
            "U03V30M0C1K",
            "U045XTG02PR",
            "U0465NRPTPW",
            "U0453US3GAJ",
            "U045PHMLFFZ",
            "U046VFNJD6C",
            "U046706G7RT",
            "U046F4A0AKB"
          ]
        },
        {
          "name": "gratitude-thank-you",
          "count": 7,
          "users": [
            "U045J8S8JQZ",
            "U047LTPUW8G",
            "U045XTG02PR",
            "U0453US3GAJ",
            "U045PHMLFFZ",
            "U0465AXV1J8",
            "U046VFNJD6C"
          ]
        },
        {
          "name": "+1",
          "count": 1,
          "users": [
            "U046RV9P6BS"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "HRai",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "Welcome to SwiftU’s first Q\u0026A! We’re looking forward to answering your questions. Select the"
                },
                {
                  "type": "emoji",
                  "name": "heavy_plus_sign",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": "icon from the lower left, and find the "
                },
                {
                  "type": "text",
                  "text": "Ask A Question",
                  "style": {
                    "italic": true
                  }
                },
                {
                  "type": "text",
                  "text": " workflow. Type in your question and it will be delivered directly to the team. We’ll answer as many questions as we can. While it’s unlikely we’ll be able to address every question, all your submissions are valuable; thank you for taking the time! "
                },
                {
                  "type": "emoji",
                  "name": "rocket",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04713BK29G\u003e asked\n\u0026gt; While Using NavigationSplitView, when the detail is a List, the open and close of the sidebar reloads the whole detail view, creating a glitch. the cells do not expand or shrink, they just reload with the new frame, and then slide to position. I think the same bug appears in UITable/CollectionView (which  i think is used by list under the hood). Are there some workarounds? \n\u0026gt; If the detail view is a stack, the UI shrinks and expand perfectly",
      "ts": "1666112447.142619",
      "thread_ts": "1666112447.142619",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666112505.216699",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "NuTtD",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04713BK29G"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"While Using NavigationSplitView, when the detail is a List, the open and close of the sidebar reloads the whole detail view, creating a glitch. the cells do not expand or shrink, they just reload with the new frame, and then slide to position. I think the same bug appears in UITable\\/CollectionView (which  i think is used by list under the hood). Are there some workarounds? \\nIf the detail view is a stack, the UI shrinks and expand perfectly\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "4f8a4a88-91ea-41f7-a99e-7dc2012d5505",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "Have you tried with the iOS 16.1 beta? We fixed a number of issues related to NavigationSplitView in 16.1.",
          "ts": "1666112505.216699",
          "thread_ts": "1666112447.142619",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6U/",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Have you tried with the iOS 16.1 beta? We fixed a number of issues related to NavigationSplitView in 16.1."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "7271268a-c8dd-41ee-b5e1-d7f7597e46ec",
      "type": "message",
      "user": "U0453US3GAJ",
      "text": "While our SwiftUI engineers are taking a look at your first round of questions, I thought it would be fun to have a thread for everyone to say hi, and tell everyone a little about yourself! :thread:",
      "ts": "1666112628.817599",
      "thread_ts": "1666112628.817599",
      "reply_count": 27,
      "latest_reply": "1666114961.009189",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "eyes",
          "count": 1,
          "users": [
            "U046SQYESLQ"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "CtG",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "While our SwiftUI engineers are taking a look at your first round of questions, I thought it would be fun to have a thread for everyone to say hi, and tell everyone a little about yourself! "
                },
                {
                  "type": "emoji",
                  "name": "thread",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "d98867e6-639b-4583-b355-390aac092e46",
          "type": "message",
          "user": "U045Z2GB294",
          "text": "Greetings form China！",
          "ts": "1666112657.111169",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U0453US3GAJ",
                "U03V30M0C1K"
              ]
            },
            {
              "name": "wave::skin-tone-2",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Bvbqc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Greetings form China！"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d91d737f-4aba-459c-8573-5debcc73454f",
          "type": "message",
          "user": "U0453US3GAJ",
          "text": "Welcome!! :star-struck:",
          "ts": "1666112676.797869",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Glyp",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Welcome!! "
                    },
                    {
                      "type": "emoji",
                      "name": "star-struck",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "32ca6ffa-a840-47c1-aa7c-f4814656bd0a",
          "type": "message",
          "user": "U046AG9QTLL",
          "text": "Hello from California.",
          "ts": "1666112694.751759",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "bear",
              "count": 1,
              "users": [
                "U0453US3GAJ"
              ]
            },
            {
              "name": "partying_face",
              "count": 1,
              "users": [
                "U03V30M0C1K"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lq0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hello from California."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0347075e-40a5-4702-9cd4-37bb1c97c494",
          "type": "message",
          "user": "U0465NRPTPW",
          "text": ":wave: Hi there from Brooklyn, NY! Thanks for taking the time for our questions today",
          "ts": "1666112698.557079",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "rocket",
              "count": 2,
              "users": [
                "U03V30M0C1K",
                "U0453US3GAJ"
              ]
            },
            {
              "name": "cityscape",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Yv4/",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "emoji",
                      "name": "wave",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " Hi there from Brooklyn, NY! Thanks for taking the time for our questions today"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e23f1b7f-d3ad-4f80-a482-4f925a2ee391",
          "type": "message",
          "user": "U045XTG02PR",
          "text": "Hi! I am Gustavo, from Brazil!",
          "ts": "1666112702.220689",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "tada",
              "count": 1,
              "users": [
                "U03V30M0C1K"
              ]
            },
            {
              "name": "wave",
              "count": 1,
              "users": [
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EUWls",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi! I am Gustavo, from Brazil!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9CEA0C8B-DE65-4EF7-935E-94F5162575FE",
          "type": "message",
          "user": "U046HB1QVC6",
          "text": "Portugal :flag-pt: ",
          "ts": "1666112710.295039",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "wave",
              "count": 1,
              "users": [
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UJT0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Portugal "
                    },
                    {
                      "type": "emoji",
                      "name": "flag-pt",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e4f6c944-0342-43d9-adf5-aead53f05dcd",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "Hello from Melbourne Australia",
          "ts": "1666112710.582179",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "wave::skin-tone-2",
              "count": 2,
              "users": [
                "U03V30M0C1K",
                "U0441J2N9FH"
              ]
            },
            {
              "name": "wave",
              "count": 1,
              "users": [
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "DKV7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hello from Melbourne Australia"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2cb30202-44ae-4a69-90a8-9874be5f5290",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "SwiftUI fan from San Francisco. Best UI framework I've ever used.",
          "ts": "1666112720.662109",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U03V30M0C1K",
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "LikE2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "SwiftUI fan from San Francisco. Best UI framework I've ever used."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "75d8c9f6-3073-4aac-89ea-9f3b8f3400bb",
          "type": "message",
          "user": "U046A4SKZ99",
          "text": "I'm really enjoying using SwiftUI for my new app!",
          "ts": "1666112723.052139",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart_eyes_cat",
              "count": 2,
              "users": [
                "U03V30M0C1K",
                "U0453US3GAJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2X/v",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I'm really enjoying using SwiftUI for my new app!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e7724980-9d63-4548-a495-042a0a1609a9",
          "type": "message",
          "user": "U046608Q205",
          "text": "Yes, thank you for this forum.  Loving SwiftUI from Arizona!",
          "ts": "1666112736.856869",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U03V30M0C1K",
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=KXgn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, thank you for this forum.  Loving SwiftUI from Arizona!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "92bf408d-e3a6-4a8d-9bc5-8a4e47a2aed0",
          "type": "message",
          "user": "U03V30M0C1K",
          "text": "Hi everyone! So glad you’re joining us! My name is Betsy and I’m your SwiftUI Evangelist (but you may have seen me popping in around all these Q\u0026amp;As :wink:). The SwiftUI community continues to be so incredible. Thanks for your questions!",
          "ts": "1666112778.955079",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U0453US3GAJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=w2g",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi everyone! So glad you’re joining us! My name is Betsy and I’m your SwiftUI Evangelist (but you may have seen me popping in around all these Q\u0026As "
                    },
                    {
                      "type": "emoji",
                      "name": "wink",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": "). The SwiftUI community continues to be so incredible. Thanks for your questions!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c2a121d0-3420-4121-8293-f860e2101526",
          "type": "message",
          "user": "U046JND8CKB",
          "text": "James from UK, did my first app in UIKit but my second app is all SwiftUI. Enjoying it even more.",
          "ts": "1666112779.573809",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "smiling_face_with_3_hearts",
              "count": 3,
              "users": [
                "U0453US3GAJ",
                "U03V30M0C1K",
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "MRdK",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "James from UK, did my first app in UIKit but my second app is all SwiftUI. Enjoying it even more."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b04eca08-5d73-4ed0-ab44-6945f5dcab65",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "Thanks for organising this, been wanting to ask many doubts :pray:",
          "ts": "1666112829.779659",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1::skin-tone-2",
              "count": 2,
              "users": [
                "U0441J2N9FH",
                "U03V30M0C1K"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "wKVMe",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks for organising this, been wanting to ask many doubts "
                    },
                    {
                      "type": "emoji",
                      "name": "pray",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e9fef670-f3ba-4b99-b594-1eee091fe9ac",
          "type": "message",
          "user": "U046X9BC3MG",
          "text": "Hello from Chicago!",
          "ts": "1666112830.476489",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "star-struck",
              "count": 1,
              "users": [
                "U0453US3GAJ"
              ]
            },
            {
              "name": "partying_face",
              "count": 1,
              "users": [
                "U0453US3GAJ"
              ]
            },
            {
              "name": "wave::skin-tone-2",
              "count": 1,
              "users": [
                "U03V30M0C1K"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FpO2N",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hello from Chicago!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1b6d78f8-8f1c-4587-b6a6-0b8fcd2aec4f",
          "type": "message",
          "user": "U046W0SMLHZ",
          "text": "Hi from Utah. My app is 100% SwiftUI",
          "ts": "1666112833.143219",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "100",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            },
            {
              "name": "heart_eyes_cat",
              "count": 1,
              "users": [
                "U03V30M0C1K"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3BB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi from Utah. My app is 100% SwiftUI"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1E91BA74-6125-4BB4-B29E-4EED732136B5",
          "type": "message",
          "user": "U046DHPUAKH",
          "text": "Hello from Israel :slightly_smiling_face:",
          "ts": "1666112852.615469",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "wave::skin-tone-2",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            },
            {
              "name": "tada",
              "count": 1,
              "users": [
                "U03V30M0C1K"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UxWW",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hello from Israel "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d8574616-31b6-4128-a4a1-da3761fed305",
          "type": "message",
          "user": "U045P49MYH5",
          "text": "Olá from Portugal :wave: :smile:",
          "ts": "1666112915.297909",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "partying_face",
              "count": 1,
              "users": [
                "U03V30M0C1K"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bkL/5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Olá from Portugal "
                    },
                    {
                      "type": "emoji",
                      "name": "wave",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "emoji",
                      "name": "smile",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "cd15fb32-bbf3-439a-a56f-da796d0e6686",
          "type": "message",
          "user": "U0476JSMVUH",
          "text": "Hi from Ottawa! :wave:",
          "ts": "1666112961.645539",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "rocket",
              "count": 1,
              "users": [
                "U03V30M0C1K"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CZh4t",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi from Ottawa! "
                    },
                    {
                      "type": "emoji",
                      "name": "wave",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6ad86404-30a4-4a28-b351-5c04622a7865",
          "type": "message",
          "user": "U046S70K9A4",
          "text": ":v: Morning from Seattle!  I’m new to Apple development, so I’m all Swift \u0026amp; SwiftUI. No UIKit or Obj-C transition or mixed codebases for me (Yet anyway!)",
          "ts": "1666113020.516709",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "wave",
              "count": 1,
              "users": [
                "U0462658691"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "aQ5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "emoji",
                      "name": "v",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " Morning from Seattle!  I’m new to Apple development, so I’m all Swift \u0026 SwiftUI. No UIKit or Obj-C transition or mixed codebases for me (Yet anyway!)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fff0778f-4471-4785-8125-99a4754bce83",
          "type": "message",
          "user": "U04625ZF30T",
          "text": "Hi! I’m César and am a freelancer. I run an app studio together with my wife. We’ve built a cooking app which is 99.9% SwiftUI and is available on watchOS, macOS, iOS iPadOS and soon tvOS. One codebase to run everywhere. Love it! :boom:",
          "ts": "1666113025.648369",
          "thread_ts": "1666112628.817599",
          "edited": {
            "user": "U04625ZF30T",
            "ts": "1666113035.000000"
          },
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "thumbsup_all",
              "count": 3,
              "users": [
                "U045Z2GB294",
                "U046068A90D",
                "U046963BN78"
              ]
            },
            {
              "name": "star-struck",
              "count": 2,
              "users": [
                "U0462658691",
                "U045VKE445U"
              ]
            },
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "KGk+i",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi! I’m César and am a freelancer. I run an app studio together with my wife. We’ve built a cooking app which is 99.9% SwiftUI and is available on watchOS, macOS, iOS iPadOS and soon tvOS. One codebase to run everywhere. Love it! "
                    },
                    {
                      "type": "emoji",
                      "name": "boom",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "19f1c9d9-6015-4ff6-aa8b-ffeacc7562c2",
          "type": "message",
          "user": "U046068A90D",
          "text": "Hello from Los Angeles, loving SwiftUI!",
          "ts": "1666113075.528009",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ewZ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hello from Los Angeles, loving SwiftUI!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8483413e-825a-408e-b1c3-afeb8cecc4b1",
          "type": "message",
          "user": "U0462658691",
          "text": "Hello from Sweden! I'm still fairly new to programming, gotta admit I love love the community. Well done on making us feeling included :smiling_face_with_3_hearts::flag-se:",
          "ts": "1666113228.191769",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "100",
              "count": 1,
              "users": [
                "U046S70K9A4"
              ]
            },
            {
              "name": "wave",
              "count": 1,
              "users": [
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Rcwr",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hello from Sweden! I'm still fairly new to programming, gotta admit I love love the community. Well done on making us feeling included "
                    },
                    {
                      "type": "emoji",
                      "name": "smiling_face_with_3_hearts",
                      "skin_tone": 0
                    },
                    {
                      "type": "emoji",
                      "name": "flag-se",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3b8263bd-7be2-4c44-9191-2dc2c9cbd3e9",
          "type": "message",
          "user": "U045QG339HV",
          "text": "Good morning from Amsterdam :smile:",
          "ts": "1666113247.537199",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "wave",
              "count": 1,
              "users": [
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2dby",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Good morning from Amsterdam "
                    },
                    {
                      "type": "emoji",
                      "name": "smile",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5c8bb75a-c4ab-415f-b0a3-be71537ba3d2",
          "type": "message",
          "user": "U0461C26GTX",
          "text": "Hello from Dallas",
          "ts": "1666113273.412399",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "rGt",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hello from Dallas"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b5283792-c779-4802-9810-f128e17d3063",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "\u003c@U03V30M0C1K\u003e Will this Slack channel persist after the hour discussion today? It's a lot to try to read in real time.",
          "ts": "1666113476.494809",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "w911",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U03V30M0C1K"
                    },
                    {
                      "type": "text",
                      "text": " Will this Slack channel persist after the hour discussion today? It's a lot to try to read in real time."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5baebecc-aa4d-4843-8fb0-8fbb86d74270",
          "type": "message",
          "user": "U03V30M0C1K",
          "text": "\u003c@U046QGJ6B3M\u003e yes it will! It will remain available after the event as read only and you are welcome to take notes, reread, or simply catch up! And don’t forget, there’s an event all about Layout coming to a channel near you (okay… it’s this channel :joy:) on Thursday! You can check out the schedule here. \u003chttps://developer.apple.com/events/ask-apple/questions-and-answers/\u003e",
          "ts": "1666114487.862419",
          "thread_ts": "1666112628.817599",
          "attachments": [
            {
              "fallback": "Apple Developer: Q\u0026amp;As - Ask Apple - Events - Apple Developer",
              "id": 1,
              "title": "Q\u0026amp;As - Ask Apple - Events - Apple Developer",
              "title_link": "https://developer.apple.com/events/ask-apple/questions-and-answers/",
              "text": "Connect with Apple evangelists, engineers, and designers to get your questions answered, share your learnings, and engage with the worldwide developer community. Learn how to join the conversation.",
              "image_url": "https://developer.apple.com/news/images/og/ask-apple-chat-22-og.jpg",
              "service_name": "Apple Developer",
              "service_icon": "https://developer.apple.com/favicon.ico",
              "from_url": "https://developer.apple.com/events/ask-apple/questions-and-answers/",
              "original_url": "https://developer.apple.com/events/ask-apple/questions-and-answers/",
              "blocks": null
            }
          ],
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "raised_hands",
              "count": 1,
              "users": [
                "U0453US3GAJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jEFgx",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U046QGJ6B3M"
                    },
                    {
                      "type": "text",
                      "text": " yes it will! It will remain available after the event as read only and you are welcome to take notes, reread, or simply catch up! And don’t forget, there’s an event all about Layout coming to a channel near you (okay… it’s this channel "
                    },
                    {
                      "type": "emoji",
                      "name": "joy",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": ") on Thursday! You can check out the schedule here. "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/events/ask-apple/questions-and-answers/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "68d4d509-8995-451b-8236-3e2bb39e2fd9",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "Greetings from San Diego CA. I’m a designer/developer who is building a pro design app in SwiftUI!",
          "ts": "1666114961.009189",
          "thread_ts": "1666112628.817599",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "face_with_cowboy_hat",
              "count": 1,
              "users": [
                "U0453US3GAJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FkZt",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Greetings from San Diego CA. I’m a designer/developer who is building a pro design app in SwiftUI!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04657SB526\u003e asked\n\u0026gt; Are there plans to add \"native\" SwiftUI support for iOS system share sheet without using UIActivityViewController",
      "ts": "1666112706.685879",
      "thread_ts": "1666112706.685879",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666116198.500779",
      "reactions": [
        {
          "name": "+1",
          "count": 5,
          "users": [
            "U046U7LV66L",
            "U04657SB526",
            "U04640SDPPD",
            "U0461R30W3F",
            "U0469NB7686"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "UT1",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04657SB526"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Are there plans to add \\\"native\\\" SwiftUI support for iOS system share sheet without using UIActivityViewController\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "07ce42b7-8ea6-48be-a604-61d7adfb8a78",
          "type": "message",
          "user": "U0455RVLUQG",
          "text": "This is now available! Please check out `ShareLink` \u003chttps://developer.apple.com/documentation/swiftui/sharelink/\u003e",
          "ts": "1666112812.859449",
          "thread_ts": "1666112706.685879",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "tada",
              "count": 5,
              "users": [
                "U03V30M0C1K",
                "U046FL74WRZ",
                "U04657SB526",
                "U046UNB9XLY",
                "U046706G7RT"
              ]
            },
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0469NB7686"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2n2Qm",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This is now available! Please check out "
                    },
                    {
                      "type": "text",
                      "text": "ShareLink",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/sharelink/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "876743d3-8043-46da-8993-09175f7b0faf",
          "type": "message",
          "user": "U04657SB526",
          "text": "Awesome, thank you! :slightly_smiling_face:",
          "ts": "1666116198.500779",
          "thread_ts": "1666112706.685879",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bNsZ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Awesome, thank you! "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046YFT7V0A\u003e asked\n\u0026gt; In one of the early iOS 16 and macOS 13 betas, we saw a new `.contextAction` modifier that was later removed. Is there any recommendation to detect row selections in lists similarly to `NavigationLink,` but without navigating to another view (e.g., to show a sheet or select an option from a list)? A button works for iOS and iPadOS, but not so good for macOS. Also, `.contextAction` supported multi-selection. Is it coming back?",
      "ts": "1666112720.308929",
      "thread_ts": "1666112720.308929",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666114546.407019",
      "reactions": [
        {
          "name": "white_check_mark",
          "count": 1,
          "users": [
            "U046GTS336D"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Snzn",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046YFT7V0A"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"In one of the early iOS 16 and macOS 13 betas, we saw a new `.contextAction` modifier that was later removed. Is there any recommendation to detect row selections in lists similarly to `NavigationLink,` but without navigating to another view (e.g., to show a sheet or select an option from a list)? A button works for iOS and iPadOS, but not so good for macOS. Also, `.contextAction` supported multi-selection. Is it coming back?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "653ae2fa-f913-4f3c-b91b-514063b56280",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "Look at the `primaryAction` parameter of the context menu modifier. (\u003chttps://developer.apple.com/documentation/swiftui/navigationsplitview/contextmenu(forselectiontype:menu:primaryaction:)|docs here\u003e). That API also has a `forSelectionType` parameter that allows you to support multi-selection.",
          "ts": "1666112808.477069",
          "thread_ts": "1666112720.308929",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "raised_hands",
              "count": 1,
              "users": [
                "U046YFT7V0A"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "B0EKq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Look at the "
                    },
                    {
                      "type": "text",
                      "text": "primaryAction",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " parameter of the context menu modifier. ("
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/navigationsplitview/contextmenu(forselectiontype:menu:primaryaction:)",
                      "text": "docs here"
                    },
                    {
                      "type": "text",
                      "text": "). That API also has a "
                    },
                    {
                      "type": "text",
                      "text": "forSelectionType",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " parameter that allows you to support multi-selection."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "39fd735c-30f5-4b14-897c-7e8d94c2bf02",
          "type": "message",
          "user": "U046YFT7V0A",
          "text": "Thank you, Harry!",
          "ts": "1666114546.407019",
          "thread_ts": "1666112720.308929",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "white_check_mark",
              "count": 1,
              "users": [
                "U04640E3KAP"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Ne09",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you, Harry!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0467CSKP2R\u003e asked\n\u0026gt; Is there a suggested way to test @State variables in SwiftUI views? Or is the only way to refactor these variables out to a View Model?",
      "ts": "1666112786.498319",
      "thread_ts": "1666112786.498319",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666113317.482989",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "eXm",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0467CSKP2R"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is there a suggested way to test @State variables in SwiftUI views? Or is the only way to refactor these variables out to a View Model?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "d390babd-3693-475b-ad0c-7037aa19d75d",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "If inside the same view you have a bunch of `@State` properties that are interdependent it might be good to extract that into its own struct so that you can can test invariants in your code.\n\nExtracting that into its own view model is also a strategy, but it’s not necessary.",
          "ts": "1666112801.761449",
          "thread_ts": "1666112786.498319",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U045VKE445U"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yC8B1",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If inside the same view you have a bunch of "
                    },
                    {
                      "type": "text",
                      "text": "@State",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " properties that are interdependent it might be good to extract that into its own struct so that you can can test invariants in your code.\n\nExtracting that into its own view model is also a strategy, but it’s not necessary."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f64ce6e2-f26a-40f3-ac7e-acf92ecae0a8",
          "type": "message",
          "user": "U0467CSKP2R",
          "text": "Thanks!",
          "ts": "1666113317.482989",
          "thread_ts": "1666112786.498319",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "28Ium",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045MMSNB3R\u003e asked\n\u0026gt; Hello, first of all many thanks and congratulations for this initiative. My question is about Textfields.\n\u0026gt; Let’s say we want to create a view similar to iMessage where you see a list of messages (not relevant to this case) and a textfield at the bottom of the view. When the user taps on the textfield, the keyboard appears with a textfield in its toolbar. \n\u0026gt; I’ve tried to add a TextFiled in a ToolbarItemGroup(placement: .bottomBar) and a second one in a ToolbarItemGroup(placement: .keyboard), then with the help of a @FocusState variable I can hide one and change the focus to the keyboard one. It’s a bit hacky and I don't think to have 2 textfields is the way to go. Also following this approach the @FocusState variable gets unresponsive and it can’t be set to nil (returning to a previous view is not removing the keyboard).\n\u0026gt; Is it possible to be done in pure SwiftUI (without using UIKit)?\n\u0026gt; Could you give me some directions to accomplish it?",
      "ts": "1666112940.832819",
      "thread_ts": "1666112940.832819",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666113020.003429",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "eV+2i",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045MMSNB3R"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hello, first of all many thanks and congratulations for this initiative. My question is about Textfields.\\nLet\\u2019s say we want to create a view similar to iMessage where you see a list of messages (not relevant to this case) and a textfield at the bottom of the view. When the user taps on the textfield, the keyboard appears with a textfield in its toolbar. \\nI\\u2019ve tried to add a TextFiled in a ToolbarItemGroup(placement: .bottomBar) and a second one in a ToolbarItemGroup(placement: .keyboard), then with the help of a @FocusState variable I can hide one and change the focus to the keyboard one. It\\u2019s a bit hacky and I don't think to have 2 textfields is the way to go. Also following this approach the @FocusState variable gets unresponsive and it can\\u2019t be set to nil (returning to a previous view is not removing the keyboard).\\nIs it possible to be done in pure SwiftUI (without using UIKit)?\\nCould you give me some directions to accomplish it?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "81cd2bad-8548-4b86-9aab-0d862c0fa034",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "In general, I’d recommend using the\n```.safeAreaInset(edge: .bottom) {\n  MyTextField()\n}```\nfor a permanently at the bottom text field. You can then use focus state to customize its background when its focused or not.\n\nHopefully that works for your design.",
          "ts": "1666113020.003429",
          "thread_ts": "1666112940.832819",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4m0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In general, I’d recommend using the\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\".safeAreaInset(edge: .bottom) {\\n  MyTextField()\\n}\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "for a permanently at the bottom text field. You can then use focus state to customize its background when its focused or not.\n\nHopefully that works for your design."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0462593A2F\u003e asked\n\u0026gt; How do you share state (e.g. ObservableObject) between two subviews from different subtrees, without reactively invoke view body of top-level view?\n\u0026gt; (say I can have StateObject at a parent view and pass the object via EnvironmentObject. However, if the @Published property inside is changed, the parent view and its subtree will be recomputed as well)",
      "ts": "1666113001.452879",
      "thread_ts": "1666113001.452879",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 4,
      "latest_reply": "1666113415.158519",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "YiH",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0462593A2F"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How do you share state (e.g. ObservableObject) between two subviews from different subtrees, without reactively invoke view body of top-level view?\\n(say I can have StateObject at a parent view and pass the object via EnvironmentObject. However, if the @Published property inside is changed, the parent view and its subtree will be recomputed as well)\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "ab9ce6fe-257c-4def-a291-99d515f581ce",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "EnvironmentObject is a great tool for that. If you don’t want for the parent to be updated as well you can just not use `@StateObject` or `@ObservedObject` when you are creating a the object.",
          "ts": "1666113015.378959",
          "thread_ts": "1666113001.452879",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "x",
              "count": 1,
              "users": [
                "U0462593A2F"
              ]
            },
            {
              "name": "white_check_mark",
              "count": 1,
              "users": [
                "U046SQYESLQ"
              ]
            },
            {
              "name": "raised_hands",
              "count": 1,
              "users": [
                "U046SQYESLQ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vaA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "EnvironmentObject is a great tool for that. If you don’t want for the parent to be updated as well you can just not use "
                    },
                    {
                      "type": "text",
                      "text": "@StateObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " or "
                    },
                    {
                      "type": "text",
                      "text": "@ObservedObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " when you are creating a the object."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6d14e48c-d99c-418d-ad85-fe22734c01b9",
          "type": "message",
          "user": "U0462593A2F",
          "text": "meaning just a property in the top-level view, but still pass into `.environmentObject()`?",
          "ts": "1666113173.056509",
          "thread_ts": "1666113001.452879",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "m9E",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "meaning just a property in the top-level view, but still pass into "
                    },
                    {
                      "type": "text",
                      "text": ".environmentObject()",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5d2341f5-e2f4-4c6e-98ef-bed7c95d9cf0",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "Correct",
          "ts": "1666113359.930749",
          "thread_ts": "1666113001.452879",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4EAKx",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Correct"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1303b9f2-7961-4ba4-8b83-d89664367266",
          "type": "message",
          "user": "U0462593A2F",
          "text": "Interesting. I’ll give it a try.\nThanks",
          "ts": "1666113415.158519",
          "thread_ts": "1666113001.452879",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7CL",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Interesting. I’ll give it a try.\nThanks"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "1ba2aac1-f2b5-4df5-ab16-a2181ee9d49e",
      "type": "message",
      "user": "U045J8S9EU9",
      "text": ":rotating_light: Just as a general PSA: As always, we can’t answer questions about future versions of SwiftUI. Additionally, in this format we can’t help with diagnosing problems with specific projects. For that, please reach out on the developer forums! For all your other SwiftUI needs though, keep those questions coming :tada:",
      "ts": "1666113064.495239",
      "thread_ts": "1666113064.495239",
      "reply_count": 2,
      "latest_reply": "1666114518.079759",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "+1",
          "count": 3,
          "users": [
            "U0465AXV1J8",
            "U0464NE480L",
            "U045VKE445U"
          ]
        },
        {
          "name": "+1::skin-tone-2",
          "count": 1,
          "users": [
            "U0455RVLUQG"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "GJHf",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "emoji",
                  "name": "rotating_light",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " Just as a general PSA: As always, we can’t answer questions about future versions of SwiftUI. Additionally, in this format we can’t help with diagnosing problems with specific projects. For that, please reach out on the developer forums! For all your other SwiftUI needs though, keep those questions coming "
                },
                {
                  "type": "emoji",
                  "name": "tada",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "12ef0caa-4c38-4b59-8c79-be41480cd9bb",
          "type": "message",
          "user": "U03V30M0C1K",
          "text": "Developer Technical Support is a wonderful resource for your code-level conundrums, as well! \u003chttps://developer.apple.com/support/technical/\u003e",
          "ts": "1666113315.363019",
          "thread_ts": "1666113064.495239",
          "attachments": [
            {
              "fallback": "Requesting Technical Support - Support - Apple Developer",
              "id": 1,
              "title": "Requesting Technical Support - Support - Apple Developer",
              "title_link": "https://developer.apple.com/support/technical/",
              "text": "Learn how to receive code-level help from an Apple engineer by submitting a Technical Support Incident.",
              "service_name": "developer.apple.com",
              "service_icon": "https://developer.apple.com/favicon.ico",
              "from_url": "https://developer.apple.com/support/technical/",
              "original_url": "https://developer.apple.com/support/technical/",
              "blocks": null
            }
          ],
          "parent_user_id": "U045J8S9EU9",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U0464NE480L",
                "U045J8S9EU9"
              ]
            },
            {
              "name": "+1::skin-tone-2",
              "count": 1,
              "users": [
                "U0455RVLUQG"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OwyjB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Developer Technical Support is a wonderful resource for your code-level conundrums, as well! "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/support/technical/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f4b2dd2e-246c-4131-ba54-ddab943f226d",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "Yes! that as well!",
          "ts": "1666114518.079759",
          "thread_ts": "1666113064.495239",
          "edited": {
            "user": "U045J8S9EU9",
            "ts": "1666114535.000000"
          },
          "parent_user_id": "U045J8S9EU9",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lRu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes! that as well!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046608Q205\u003e asked\n\u0026gt; I was glad to see the new NavigationStack/NavigationPath and it is working well for me.  I would like to know if I can inspect the NavigationPath to see if I arrived at some view via my SearchView (as one example).  \n\u0026gt; \n\u0026gt; I did find an idea using NavigationPath.CodableRepresentation but I am concerned this may not be the best or most sustainable way to inspect my heterogeneous stack elements.  \n\u0026gt;  Thank you!",
      "ts": "1666113066.385909",
      "thread_ts": "1666113066.385909",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666113261.382249",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "a3m",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046608Q205"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I was glad to see the new NavigationStack\\/NavigationPath and it is working well for me.  I would like to know if I can inspect the NavigationPath to see if I arrived at some view via my SearchView (as one example).  \\n\\nI did find an idea using NavigationPath.CodableRepresentation but I am concerned this may not be the best or most sustainable way to inspect my heterogeneous stack elements.  \\n Thank you!\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "ef51f582-fd06-4863-8300-9474ed8fd11c",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "There isn’t a way to introspect the `NavigationPath`. If you need to know the content of the path, a good approach is to use a homogeneous path like:\n\n`@State private var path: [MyEnum]`\n\nThen your `navigationDestination` would switch on the enum type.",
          "ts": "1666113078.647959",
          "thread_ts": "1666113066.385909",
          "edited": {
            "user": "U0455KK3NKU",
            "ts": "1666113097.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "qwNV",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There isn’t a way to introspect the "
                    },
                    {
                      "type": "text",
                      "text": "NavigationPath",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ". If you need to know the content of the path, a good approach is to use a homogeneous path like:\n\n"
                    },
                    {
                      "type": "text",
                      "text": "@State private var path: [MyEnum]",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n\nThen your "
                    },
                    {
                      "type": "text",
                      "text": "navigationDestination",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " would switch on the enum type."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b19852c5-651f-4212-90e0-212cd97ffa75",
          "type": "message",
          "user": "U046608Q205",
          "text": "Thanks, Curt!",
          "ts": "1666113261.382249",
          "thread_ts": "1666113066.385909",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "JzH",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks, Curt!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04602M391B\u003e asked\n\u0026gt; I have a Swift Chart where I listen for drag events and display a RuleMark during the drag. During dragging the y-axis scale gets larger. In my case it goes from 0 to 75 when not dragging and from 0 to 100 during the drag. Is there a way I can prevent that?",
      "ts": "1666113080.886049",
      "thread_ts": "1666113080.886049",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666113517.950889",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "A3gEo",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04602M391B"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have a Swift Chart where I listen for drag events and display a RuleMark during the drag. During dragging the y-axis scale gets larger. In my case it goes from 0 to 75 when not dragging and from 0 to 100 during the drag. Is there a way I can prevent that?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "98809a68-b604-436f-b8e2-9f41eeff9251",
          "type": "message",
          "user": "U045QD234AJ",
          "text": "The default y scale automatically accounts for the rule mark's y value and any annotation around it. You can fix the y scale domain with `.chartYScale(domain: 0 ... 75)` , or try to make sure the rule and any annotation around the rule doesn't exceed 75.",
          "ts": "1666113517.950889",
          "thread_ts": "1666113080.886049",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "d=QP3",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The default y scale automatically accounts for the rule mark's y value and any annotation around it. You can fix the y scale domain with "
                    },
                    {
                      "type": "text",
                      "text": ".chartYScale(domain: 0 ... 75)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " , or try to make sure the rule and any annotation around the rule doesn't exceed 75."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0465NRPTPW\u003e asked\n\u0026gt; Our users continue to report problems with the keyboard safe areas in iOS 16.x. The gist is that keyboard dismissals are occurring without updating the safe areas at all, which leave large keyboard-sized holes in our UI. Is there any update we can get on the feedbacks that we (and some other community members that we're aware of) have filed?\n\u0026gt; \n\u0026gt; To make this question less vague, I've copied some steps from the filed feedback that reproduce this issue.\n\u0026gt; \n\u0026gt; ---\n\u0026gt; To test, try the following steps in the enclosed project:\n\u0026gt; 1. Present the sheet by selecting the button\n\u0026gt; 2. Trigger the keyboard by focusing on the text field\n\u0026gt; 3. Begin interactively dismissing the sheet slowly\n\u0026gt; \n\u0026gt; At this point the system resigns focus from the text field and dismisses the keyboard.\n\u0026gt; \n\u0026gt; 4. Cancel the interactive dismissal gesture\n\u0026gt; \n\u0026gt; Observe that both SheetView children (in yellow and green) are now cut-off where the keyboard had been because it respects the keyboard’s safe areas.\n\u0026gt; \n\u0026gt; ```\n\u0026gt; import SwiftUI\n\u0026gt; \n\u0026gt; @main\n\u0026gt; struct Application: App {\n\u0026gt;     var body: some Scene {\n\u0026gt;         WindowGroup {\n\u0026gt;             ContentView()\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; \n\u0026gt; struct ContentView: View {\n\u0026gt;     @State var isPresented = false\n\u0026gt; \n\u0026gt;     var body: some View {\n\u0026gt;         Button(\"Present\") {\n\u0026gt;             isPresented = true\n\u0026gt;         }\n\u0026gt;         .sheet(isPresented: $isPresented) {\n\u0026gt;             SheetView()\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; \n\u0026gt; struct SheetView: View {\n\u0026gt;     @State var text = \"\"\n\u0026gt; \n\u0026gt;     var body: some View {\n\u0026gt;         ZStack(alignment: .bottom) {\n\u0026gt;             Color.yellow\n\u0026gt;                 .overlay(alignment: .top) {\n\u0026gt;                     TextField(\"Type something here...\", text: $text)\n\u0026gt;                         .padding()\n\u0026gt;                 }\n\u0026gt; \n\u0026gt;             Color.green\n\u0026gt;                 .frame(height: 100)\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; ```",
      "ts": "1666113124.496639",
      "thread_ts": "1666113124.496639",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 5,
      "latest_reply": "1666116067.297639",
      "reactions": [
        {
          "name": "eyes",
          "count": 2,
          "users": [
            "U0478BVCWEM",
            "U04654PA550"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Li=",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0465NRPTPW"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Our users continue to report problems with the keyboard safe areas in iOS 16.x. The gist is that keyboard dismissals are occurring without updating the safe areas at all, which leave large keyboard-sized holes in our UI. Is there any update we can get on the feedbacks that we (and some other community members that we're aware of) have filed?\\n\\nTo make this question less vague, I've copied some steps from the filed feedback that reproduce this issue.\\n\\n---\\nTo test, try the following steps in the enclosed project:\\n1. Present the sheet by selecting the button\\n2. Trigger the keyboard by focusing on the text field\\n3. Begin interactively dismissing the sheet slowly\\n\\nAt this point the system resigns focus from the text field and dismisses the keyboard.\\n\\n4. Cancel the interactive dismissal gesture\\n\\nObserve that both SheetView children (in yellow and green) are now cut-off where the keyboard had been because it respects the keyboard\\u2019s safe areas.\\n\\n```\\nimport SwiftUI\\n\\n@main\\nstruct Application: App {\\n    var body: some Scene {\\n        WindowGroup {\\n            ContentView()\\n        }\\n    }\\n}\\n\\nstruct ContentView: View {\\n    @State var isPresented = false\\n\\n    var body: some View {\\n        Button(\\\"Present\\\") {\\n            isPresented = true\\n        }\\n        .sheet(isPresented: $isPresented) {\\n            SheetView()\\n        }\\n    }\\n}\\n\\nstruct SheetView: View {\\n    @State var text = \\\"\\\"\\n\\n    var body: some View {\\n        ZStack(alignment: .bottom) {\\n            Color.yellow\\n                .overlay(alignment: .top) {\\n                    TextField(\\\"Type something here...\\\", text: $text)\\n                        .padding()\\n                }\\n\\n            Color.green\\n                .frame(height: 100)\\n        }\\n    }\\n}\\n```\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "bf8e8327-b1d8-473e-9316-5b68581fdac6",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "Could you link to the feedback you’ve filed?",
          "ts": "1666113153.874169",
          "thread_ts": "1666113124.496639",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "D9MC",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Could you link to the feedback you’ve filed?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "159cff97-441e-474a-abf3-a4446e80efc0",
          "type": "message",
          "user": "U0465NRPTPW",
          "text": ":wave: FB11618967",
          "ts": "1666113171.653879",
          "thread_ts": "1666113124.496639",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Y5Yb",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "emoji",
                      "name": "wave",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " FB11618967"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "78643522-04ff-4935-a0e4-973102c576a1",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "Thanks! I’ll take a look.",
          "ts": "1666113201.864739",
          "thread_ts": "1666113124.496639",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U0465NRPTPW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3dEyu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks! I’ll take a look."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e6921551-be85-4477-a3ba-a63eafea33d8",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "I also submitted a question similar to this (posting to follow along)",
          "ts": "1666113503.643239",
          "thread_ts": "1666113124.496639",
          "edited": {
            "user": "U045VJUAUDC",
            "ts": "1666113509.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OVh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I also submitted a question similar to this (posting to follow along)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "15693db2-ec22-4f12-99ee-e95f2e9dcda6",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "FB11701808",
          "ts": "1666116067.297639",
          "thread_ts": "1666113124.496639",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "LYxE",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FB11701808"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046C45TVQB\u003e asked\n\u0026gt; Hello! Is there any other method to animate a View according to Model’s change without using onChange modifier?  My code is something like this:\n\u0026gt; \n\u0026gt; @EnvironmentObject var model: MyModel\n\u0026gt; @State var isAnimated: Bool = false\n\u0026gt; \n\u0026gt; var body: some View {\n\u0026gt; \t…\n\u0026gt; \t.onChange(of: modle.state.aChange( { value in\n\u0026gt; \t\twithAnimation(…) {\n\u0026gt; \t\t\tself.isAnimated = value\n\u0026gt; \t\t}\n\u0026gt; \t} \n\u0026gt; }\n\u0026gt; ",
      "ts": "1666113174.743179",
      "thread_ts": "1666113174.743179",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666113739.601759",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "lfJw4",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046C45TVQB"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hello! Is there any other method to animate a View according to Model\\u2019s change without using onChange modifier?  My code is something like this:\\n\\n@EnvironmentObject var model: MyModel\\n@State var isAnimated: Bool = false\\n\\nvar body: some View {\\n\\t\\u2026\\n\\t.onChange(of: modle.state.aChange( { value in\\n\\t\\twithAnimation(\\u2026) {\\n\\t\\t\\tself.isAnimated = value\\n\\t\\t}\\n\\t} \\n}\\n\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "99bed116-7b75-4ffa-9745-742aaa71964d",
          "type": "message",
          "user": "U04583CCP4L",
          "text": "You can animate changes directly using the model (without the extra `@State` property) by using the `.animation(value:)` modifier:\n\n```.animation(.easeInOut, value: model.state)```\nThis will animate any changes that are caused by changes to `model.state`.",
          "ts": "1666113450.151309",
          "thread_ts": "1666113174.743179",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 6,
              "users": [
                "U0461C26GTX",
                "U0470KL5WMP",
                "U04633RHL58",
                "U046UNB9XLY",
                "U046S4P76FJ",
                "U046C45TVQB"
              ]
            },
            {
              "name": "raised_hands",
              "count": 1,
              "users": [
                "U046SQYESLQ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OfL4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can animate changes directly using the model (without the extra "
                    },
                    {
                      "type": "text",
                      "text": "@State",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " property) by using the "
                    },
                    {
                      "type": "text",
                      "text": ".animation(value:)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " modifier:\n\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\".animation(.easeInOut, value: model.state)\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "\nThis will animate any changes that are caused by changes to "
                    },
                    {
                      "type": "text",
                      "text": "model.state",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "C1192A5C-2FD4-48D3-B1EC-B42622D8F639",
          "type": "message",
          "user": "U046C45TVQB",
          "text": "Thanks! I’ll try it!",
          "ts": "1666113739.601759",
          "thread_ts": "1666113174.743179",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Q6gc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks! I’ll try it!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04728WEN68\u003e asked\n\u0026gt; How can I present bottom sheet in iOS 16  that matches dynamic content height? Basically, I want to use view height in presentationDetents.",
      "ts": "1666113175.250429",
      "thread_ts": "1666113175.250429",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666113261.766079",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "6uerv",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04728WEN68"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How can I present bottom sheet in iOS 16  that matches dynamic content height? Basically, I want to use view height in presentationDetents.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "3616a4a0-5183-4c0d-aa6c-9e8149590764",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "Thanks for the question. That’s not currently possible, but is something we’re interested in.",
          "ts": "1666113261.766079",
          "thread_ts": "1666113175.250429",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 5,
              "users": [
                "U0465SGRQTG",
                "U04728WEN68",
                "U046G7MP4KB",
                "U0462SYEK5L",
                "U045VKE445U"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Q+lKQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks for the question. That’s not currently possible, but is something we’re interested in."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0476JSMVUH\u003e asked\n\u0026gt; I'd love to see @ToolbarBuilder or better support for `if condition { ToolbarItem(a) } else { ToolbarItem(b) }`",
      "ts": "1666113177.559599",
      "thread_ts": "1666113177.559599",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666113414.003659",
      "reactions": [
        {
          "name": "heart",
          "count": 2,
          "users": [
            "U045ZGP2QCV",
            "U046SRHR0NL"
          ]
        },
        {
          "name": "thumbsup_all",
          "count": 3,
          "users": [
            "U045PHMLFFZ",
            "U0478BJ4UPK",
            "U046RTBHFQA"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "HDD",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0476JSMVUH"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I'd love to see @ToolbarBuilder or better support for `if condition { ToolbarItem(a) } else { ToolbarItem(b) }`\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "e8a584f9-b744-42c2-a4b1-0105ffb86c8f",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "While you’ll never see a `@ToolbarBuilder` , there is a `@ToolbarContentBuilder` and it gained some new features in iOS 16.\n\nToolbarContentBuilder’s support if else and custom types conforming to `ToolbarContent` now support dynamic properties like `@Environment` / `@EnvironmentObject`.",
          "ts": "1666113360.500389",
          "thread_ts": "1666113177.559599",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "iXAi",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "While you’ll never see a "
                    },
                    {
                      "type": "text",
                      "text": "@ToolbarBuilder",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " , there is a "
                    },
                    {
                      "type": "text",
                      "text": "@ToolbarContentBuilder",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and it gained some new features in iOS 16.\n\nToolbarContentBuilder’s support if else and custom types conforming to "
                    },
                    {
                      "type": "text",
                      "text": "ToolbarContent",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " now support dynamic properties like "
                    },
                    {
                      "type": "text",
                      "text": "@Environment",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " / "
                    },
                    {
                      "type": "text",
                      "text": "@EnvironmentObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "234ea7dd-e501-40c1-8093-ef5c543e6c0a",
          "type": "message",
          "user": "U0476JSMVUH",
          "text": "++ thanks! That's what I need.",
          "ts": "1666113414.003659",
          "thread_ts": "1666113177.559599",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EmGC",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "++ thanks! That's what I need."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046S70K9A4\u003e asked\n\u0026gt; :wave: morning! i'm pretty new to SwiftUI (and Apple dev!) – my question is about Scenes. in pretty much all tutorial and other sample codebases I've been exploring, there's just a single WindowGroup Scene and all the real action is nested within a ContentView() – any guidance or examples on when/if you'd have multiple scenes? or are most apps just nested in a single WindowGroup?",
      "ts": "1666113243.370219",
      "thread_ts": "1666113243.370219",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 6,
      "latest_reply": "1666114139.446029",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "=FHWj",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046S70K9A4"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"emoji\",\"name\":\"wave\",\"unicode\":\"1f44b\"},{\"type\":\"text\",\"text\":\" morning! i'm pretty new to SwiftUI (and Apple dev!) \\u2013 my question is about Scenes. in pretty much all tutorial and other sample codebases I've been exploring, there's just a single WindowGroup Scene and all the real action is nested within a ContentView() \\u2013 any guidance or examples on when\\/if you'd have multiple scenes? or are most apps just nested in a single WindowGroup?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "4990cb93-f6f2-4c77-b09f-ad88e335ab13",
          "type": "message",
          "user": "U046KN49LD7",
          "text": "You mostly need multiple scenes for mult documents apps, just like Pages or Numbers",
          "ts": "1666113333.805639",
          "thread_ts": "1666113243.370219",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "GiHLB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You mostly need multiple scenes for mult documents apps, just like Pages or Numbers"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1f80033e-109c-47bd-bb52-e95152722730",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "Multiple scenes can be useful to build more complex apps, particularly on macOS. For instance, you may wish to have an app that defines both a `WindowGroup` and a `DocumentGroup`, or an app with a `WindowGroup` and an auxiliary `Window` scene. The content view of your scene defines the view content within the windows that the scene creates, but the scenes themselves define the overall structure of your app.",
          "ts": "1666113351.902179",
          "thread_ts": "1666113243.370219",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bJQvI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Multiple scenes can be useful to build more complex apps, particularly on macOS. For instance, you may wish to have an app that defines both a `WindowGroup` and a `DocumentGroup`, or an app with a `WindowGroup` and an auxiliary `Window` scene. The content view of your scene defines the view content within the windows that the scene creates, but the scenes themselves define the overall structure of your app."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c2a757c5-393a-4014-98d4-cd2f8564d1c6",
          "type": "message",
          "user": "U046S70K9A4",
          "text": "thank you both! that’s helpful",
          "ts": "1666113652.227709",
          "thread_ts": "1666113243.370219",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U0455KK1D5G"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ufXt",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "thank you both! that’s helpful"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7c33b7ed-5466-41d5-884e-b04446526722",
          "type": "message",
          "user": "U046S70K9A4",
          "text": "so is every iOS app a single Scene?",
          "ts": "1666113800.167289",
          "thread_ts": "1666113243.370219",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "nqsC",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "so is every iOS app a single Scene?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e86866ca-458b-4e33-b399-6fb83b129e05",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "It doesn't necessarily have to be. On iPadOS you can define multiple scenes and use `OpenWindowAction` to activate them.",
          "ts": "1666114027.923069",
          "thread_ts": "1666113243.370219",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "n2d",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It doesn't necessarily have to be. On iPadOS you can define multiple scenes and use "
                    },
                    {
                      "type": "text",
                      "text": "OpenWindowAction",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to activate them."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "86c41b09-a82e-4c2f-9d6b-99cc1e7356c0",
          "type": "message",
          "user": "U046S70K9A4",
          "text": "thanks Jeff!",
          "ts": "1666114139.446029",
          "thread_ts": "1666113243.370219",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3Du46",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "thanks Jeff!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0471BFLNAY\u003e asked\n\u0026gt; When will it be possible to customise NFC tag reading screen? Currently theres only 1 text view available. We would like to be able to customise this view more than that :) Could you please take it into consideration in future releases?",
      "ts": "1666113278.257259",
      "thread_ts": "1666113278.257259",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666113469.103239",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "NqcL",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0471BFLNAY"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When will it be possible to customise NFC tag reading screen? Currently theres only 1 text view available. We would like to be able to customise this view more than that :) Could you please take it into consideration in future releases?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "8867603a-5d72-4243-90dd-b8a7706b0faa",
          "type": "message",
          "user": "U0441J2N9FH",
          "text": "Please do file Feedback! \u003chttps://feedbackassistant.apple.com\u003e (If you’ve already filed, can you post the FB number in the thread? Thanks!)",
          "ts": "1666113318.087449",
          "thread_ts": "1666113278.257259",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "white_check_mark",
              "count": 2,
              "users": [
                "U0471BFLNAY",
                "U0462SYEK5L"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "tzg+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Please do file Feedback! "
                    },
                    {
                      "type": "link",
                      "url": "https://feedbackassistant.apple.com",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": " (If you’ve already filed, can you post the FB number in the thread? Thanks!)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "338dd5ef-2c24-4440-8f8f-eeab27b18304",
          "type": "message",
          "user": "U0471BFLNAY",
          "text": "I just filled it so it will be in the system under FB number: FB11701684",
          "ts": "1666113469.103239",
          "thread_ts": "1666113278.257259",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            },
            {
              "name": "raised_hands",
              "count": 1,
              "users": [
                "U0462SYEK5L"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "tVE",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I just filled it so it will be in the system under FB number: FB11701684"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045Z5JKR5L\u003e asked\n\u0026gt; How are you supposed to use `navigationDestination(for:)` when the detail view requires a Binding? The value passed to `NavigationLink` must be Hashable, so I can't use a Binding. This means I have to pass an item ID and then manually reconstruct a Binding from that ID in `navigationLink(for:)`. Is this the way to go?",
      "ts": "1666113399.811639",
      "thread_ts": "1666113399.811639",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666114130.000379",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "UDa95",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045Z5JKR5L"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How are you supposed to use `navigationDestination(for:)` when the detail view requires a Binding? The value passed to `NavigationLink` must be Hashable, so I can't use a Binding. This means I have to pass an item ID and then manually reconstruct a Binding from that ID in `navigationLink(for:)`. Is this the way to go?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "526401bc-e5c5-45ba-9dcc-cb53720d7b56",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "Passing an ID and constructing the binding is a reasonable approach. I’d love a Feedback with details on your use case, so we can consider how to make this better.",
          "ts": "1666113412.446049",
          "thread_ts": "1666113399.811639",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "q6L=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Passing an ID and constructing the binding is a reasonable approach. I’d love a Feedback with details on your use case, so we can consider how to make this better."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0dc7c2a4-efc6-43cf-9422-a1eb56adcdfc",
          "type": "message",
          "user": "U046608Q205",
          "text": "```I used this but I might be doing it wrong, appreciate your comments -- my caseMO is a CoreData managed object (sorry for the lack of white space): enum CaseRouter: Hashable, Codable {\n    case dtg(CaseMO)...         navigationModel.navigationPath.append(NavigationModel.CaseRouter.dtg(caseMO)....navigationDestination(for: NavigationModel.CaseRouter.self) { value in\n        \n        switch (value) {\n        case .map(let caseMO):\n          LocationView(caseMO: caseMO)\n        case .dtg(let caseMO):\n          DTGView(caseMO: caseMO)```",
          "ts": "1666114130.000379",
          "thread_ts": "1666113399.811639",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "aDiZ",
              "elements": [
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"I used this but I might be doing it wrong, appreciate your comments -- my caseMO is a CoreData managed object (sorry for the lack of white space): enum CaseRouter: Hashable, Codable {\\n    case dtg(CaseMO)...         navigationModel.navigationPath.append(NavigationModel.CaseRouter.dtg(caseMO)....navigationDestination(for: NavigationModel.CaseRouter.self) { value in\\n        \\n        switch (value) {\\n        case .map(let caseMO):\\n          LocationView(caseMO: caseMO)\\n        case .dtg(let caseMO):\\n          DTGView(caseMO: caseMO)\"}],\"border\":0}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045ZRTH5A9\u003e asked\n\u0026gt; When using the SwiftUI App Lifecycle and DocumentGroup on macOS, is it possible to disable the creation of new files if the app is only designed as a reader of data?",
      "ts": "1666113442.072599",
      "thread_ts": "1666113442.072599",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666113530.296639",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "HfM+",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045ZRTH5A9"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When using the SwiftUI App Lifecycle and DocumentGroup on macOS, is it possible to disable the creation of new files if the app is only designed as a reader of data?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "a5b5cb45-011f-4cbb-af60-3dd903d89b45",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "`DocumentGroup` should provide an initializer for creating a reader app. For example: \u003chttps://developer.apple.com/documentation/swiftui/documentgroup/init(viewing:viewer:)-6dq9n\u003e",
          "ts": "1666113505.875059",
          "thread_ts": "1666113442.072599",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lE=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "DocumentGroup",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " should provide an initializer for creating a reader app. For example: "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/documentgroup/init(viewing:viewer:)-6dq9n",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "845b205f-05e7-4411-aa72-4ef11d2f38cc",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "This will allow for opening files of that content type, but not editing them.",
          "ts": "1666113530.296639",
          "thread_ts": "1666113442.072599",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "VMA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This will allow for opening files of that content type, but not editing them."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0466VBE92Q\u003e asked\n\u0026gt; MVVM was a common architecture in the days of UIKit where by the data a view showed was taken from a separate viewModel class. Is this still applicable in SwiftUI or is the `struct` itself now considered the viewModel?",
      "ts": "1666113516.621429",
      "thread_ts": "1666113516.621429",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 9,
      "latest_reply": "1666115027.566409",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "vOqd",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0466VBE92Q"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"MVVM was a common architecture in the days of UIKit where by the data a view showed was taken from a separate viewModel class. Is this still applicable in SwiftUI or is the `struct` itself now considered the viewModel?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "55dec1a6-46cb-4811-b1d7-b7298e21a71e",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "SwiftUI tries to be agnostic to the overall architecture of your app. Though, in a traditional viewModel sense, I wouldn't advise thinking of `View`s (the struct itself) as view models. That could have consequences like making the view less reusable, and tying business logic to the lifetime of SwiftUI views, which would make handling business logic more difficult than it needs to be.\n\nIn short, we would not suggest using the `View` as the view model. But SwiftUI does provide the tools to implement a classic MVVM architecture (e.g. `StateObject`s, `ObservedObject`s)",
          "ts": "1666113600.321249",
          "thread_ts": "1666113516.621429",
          "edited": {
            "user": "U04583CD3FE",
            "ts": "1666113613.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "70If",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "SwiftUI tries to be agnostic to the overall architecture of your app. Though, in a traditional viewModel sense, I wouldn't advise thinking of "
                    },
                    {
                      "type": "text",
                      "text": "View",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "s (the struct itself) as view models. That could have consequences like making the view less reusable, and tying business logic to the lifetime of SwiftUI views, which would make handling business logic more difficult than it needs to be.\n\nIn short, we would not suggest using the "
                    },
                    {
                      "type": "text",
                      "text": "View",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " as the view model. But SwiftUI does provide the tools to implement a classic MVVM architecture (e.g. "
                    },
                    {
                      "type": "text",
                      "text": "StateObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "s, "
                    },
                    {
                      "type": "text",
                      "text": "ObservedObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "s)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9af24e53-3bbc-47c1-8e40-ff4517eecd72",
          "type": "message",
          "user": "U0460AEFDU5",
          "text": "\u003c@U04583CD3FE\u003e is using @Published properties in SwiftUI views still supported? Recent Xcode versions have been throwing purple view update warnings. \u003chttps://developer.apple.com/forums/thread/711899\u003e",
          "ts": "1666113833.442179",
          "thread_ts": "1666113516.621429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "qhA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U04583CD3FE"
                    },
                    {
                      "type": "text",
                      "text": " is using @Published properties in SwiftUI views still supported? Recent Xcode versions have been throwing purple view update warnings. "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/forums/thread/711899",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ab606233-c98d-4167-9daf-0b38c3a486d4",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "We received some feedbacks for this and believe these purple warnings have been fixed in recent betas. \u003c@U0460AEFDU5\u003e are you running the latest seeds?",
          "ts": "1666114251.326259",
          "thread_ts": "1666113516.621429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+We",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "We received some feedbacks for this and believe these purple warnings have been fixed in recent betas. "
                    },
                    {
                      "type": "user",
                      "user_id": "U0460AEFDU5"
                    },
                    {
                      "type": "text",
                      "text": " are you running the latest seeds?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e826c9c3-7e5a-490d-96d9-4bec8c6052f8",
          "type": "message",
          "user": "U0460AEFDU5",
          "text": "I’m using 14.1 beta 3 (14B5033e), have been getting it a lot still",
          "ts": "1666114300.192709",
          "thread_ts": "1666113516.621429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CtUI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m using 14.1 beta 3 (14B5033e), have been getting it a lot still"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "527bd653-221b-4b12-9a6e-1c9694fd2847",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "I would highly recommend updating to the latest betas. I think that one is a month or more old at this point",
          "ts": "1666114480.719209",
          "thread_ts": "1666113516.621429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ar7QR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I would highly recommend updating to the latest betas. I think that one is a month or more old at this point"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6536a5e5-4c19-4800-984d-f470761cfcda",
          "type": "message",
          "user": "U0460AEFDU5",
          "text": "To my knowledge that is the most recent beta looking at the developer website and also the third party xcodes tool. Maybe I am missing something though",
          "ts": "1666114664.727779",
          "thread_ts": "1666113516.621429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "LGaVU",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "To my knowledge that is the most recent beta looking at the developer website and also the third party xcodes tool. Maybe I am missing something though"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "63f17adf-944f-4dd7-994a-22e9c772c04f",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "Oh that's the Xcode beta number you're talking about, sorry. Which OS are you deploying to and seeing the problem?",
          "ts": "1666114761.622119",
          "thread_ts": "1666113516.621429",
          "edited": {
            "user": "U04583CD3FE",
            "ts": "1666114768.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "eR09",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Oh that's the Xcode beta number you're talking about, sorry. Which OS are you deploying to and seeing the problem?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "027c3e0f-9ed2-47d7-a712-90a425520303",
          "type": "message",
          "user": "U0460AEFDU5",
          "text": "Yes, sorry for not making that clear. Actually as I am starting to work on my project now I haven’t been able to get the warnings to reproduce. But for what it’s worth iOS 16.1, not sure what I changed since yesterday that would resolve it :sweat_smile:",
          "ts": "1666114964.342059",
          "thread_ts": "1666113516.621429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Ra5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, sorry for not making that clear. Actually as I am starting to work on my project now I haven’t been able to get the warnings to reproduce. But for what it’s worth iOS 16.1, not sure what I changed since yesterday that would resolve it "
                    },
                    {
                      "type": "emoji",
                      "name": "sweat_smile",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8a7f8f1d-07b8-4c0f-86a7-b834fe7d6add",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "Great to hear! Keep us posted if you see anymore",
          "ts": "1666115027.566409",
          "thread_ts": "1666113516.621429",
          "edited": {
            "user": "U04583CD3FE",
            "ts": "1666115030.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "AuZ1",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Great to hear! Keep us posted if you see anymore"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046Y4PCTQC\u003e asked\n\u0026gt; In my app I host SwiftUI Views in UIHostingControllers which are all rooted in one UITabBarController. Lately I've noticed onAppear for the SwiftUI views firing at unexpected times -- like when the UITabBarController is created as opposed to when the View itself appears. I'm wondering\n\u0026gt; 1. When exactly should onAppear be called for SwiftUI views hosted in a UITabBarController like this?\n\u0026gt; 2. What is the recommended approach for executing code when a View appears when hosted in a UITabBarController like this?",
      "ts": "1666113543.992689",
      "thread_ts": "1666113543.992689",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666113747.479069",
      "reactions": [
        {
          "name": "eyes",
          "count": 2,
          "users": [
            "U045ZGP2QCV",
            "U0478JLG9K3"
          ]
        },
        {
          "name": "heavy_plus_sign",
          "count": 1,
          "users": [
            "U0472N2F8AU"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Axdy",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046Y4PCTQC"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"In my app I host SwiftUI Views in UIHostingControllers which are all rooted in one UITabBarController. Lately I've noticed onAppear for the SwiftUI views firing at unexpected times -- like when the UITabBarController is created as opposed to when the View itself appears. I'm wondering\\n1. When exactly should onAppear be called for SwiftUI views hosted in a UITabBarController like this?\\n2. What is the recommended approach for executing code when a View appears when hosted in a UITabBarController like this?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "2b08bc52-de37-42b3-b683-80048f595b2f",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "When using a UIHostingController in other kinds of UIViewControllers, you might trigger view loading to occur early by calling into methods of the hosting controller.\n\nFor non-lazy views (like LazyVStack), onAppear will be called once the view of the hosting controller is initialized which is done lazily. Calling layoutSubviews or sizeThatFits on the hosting controllers view can end up initializing the view.\n\nSo if you see views being initialized in your tab controller’s init method, I look at what that init method is doing and in general try to move any work in that init into the tab controller’s viewDidLoad.",
          "ts": "1666113747.479069",
          "thread_ts": "1666113543.992689",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U046Y4PCTQC"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "hhu9R",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "When using a UIHostingController in other kinds of UIViewControllers, you might trigger view loading to occur early by calling into methods of the hosting controller.\n\nFor non-lazy views (like LazyVStack), onAppear will be called once the view of the hosting controller is initialized which is done lazily. Calling layoutSubviews or sizeThatFits on the hosting controllers view can end up initializing the view.\n\nSo if you see views being initialized in your tab controller’s init method, I look at what that init method is doing and in general try to move any work in that init into the tab controller’s viewDidLoad."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045VJUAUDC\u003e asked\n\u0026gt; When setting a FocusState variable to nil, is it expected that when the keyboard dismisses that the room the keyboard was once taking is removed? On iOS 15 this was the case but on iOS 16 it doesn't, just wondering if I need to do something extra on iOS 16 to get the space to remove?",
      "ts": "1666113565.006499",
      "thread_ts": "1666113565.006499",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 7,
      "latest_reply": "1666298473.710699",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "qaij",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045VJUAUDC"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When setting a FocusState variable to nil, is it expected that when the keyboard dismisses that the room the keyboard was once taking is removed? On iOS 15 this was the case but on iOS 16 it doesn't, just wondering if I need to do something extra on iOS 16 to get the space to remove?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "e62fc3d8-3c53-453f-b957-29fc34c2b037",
          "type": "message",
          "user": "U044R32PW4X",
          "text": "It depends on circumstances, but I don't think I'd expect that change between iOS 15 and 16, so it would be worth filing a feedback report about it. If you can reproduce the issue with sample code, that would be very helpful to include in the feedback.",
          "ts": "1666113712.322829",
          "thread_ts": "1666113565.006499",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Jl6cE",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It depends on circumstances, but I don't think I'd expect that change between iOS 15 and 16, so it would be worth filing a feedback report about it. If you can reproduce the issue with sample code, that would be very helpful to include in the feedback."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d23ba08b-d89f-4967-a262-dded01f8ba36",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "Looks like my issue is fairly close to \u003chttps://appledeveloper.slack.com/archives/C043025CS59/p1666113124496639\u003e",
          "ts": "1666113742.734659",
          "thread_ts": "1666113565.006499",
          "attachments": [
            {
              "fallback": "[October 18th, 2022 10:12 AM] Ask Apple - swiftui: \u003c@U0465NRPTPW\u003e asked\n\u0026gt; Our users continue to report problems with the keyboard safe areas in iOS 16.x. The gist is that keyboard dismissals are occurring without updating the safe areas at all, which leave large keyboard-sized holes in our UI. Is there any update we can get on the feedbacks that we (and some other community members that we're aware of) have filed?\n\u0026gt; \n\u0026gt; To make this question less vague, I've copied some steps from the filed feedback that reproduce this issue.\n\u0026gt; \n\u0026gt; ---\n\u0026gt; To test, try the following steps in the enclosed project:\n\u0026gt; 1. Present the sheet by selecting the button\n\u0026gt; 2. Trigger the keyboard by focusing on the text field\n\u0026gt; 3. Begin interactively dismissing the sheet slowly\n\u0026gt; \n\u0026gt; At this point the system resigns focus from the text field and dismisses the keyboard.\n\u0026gt; \n\u0026gt; 4. Cancel the interactive dismissal gesture\n\u0026gt; \n\u0026gt; Observe that both SheetView children (in yellow and green) are now cut-off where the keyboard had been because it respects the keyboard’s safe areas.\n\u0026gt; \n\u0026gt; ```\n\u0026gt; import SwiftUI\n\u0026gt; \n\u0026gt; @main\n\u0026gt; struct Application: App {\n\u0026gt;     var body: some Scene {\n\u0026gt;         WindowGroup {\n\u0026gt;             ContentView()\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; \n\u0026gt; struct ContentView: View {\n\u0026gt;     @State var isPresented = false\n\u0026gt; \n\u0026gt;     var body: some View {\n\u0026gt;         Button(\"Present\") {\n\u0026gt;             isPresented = true\n\u0026gt;         }\n\u0026gt;         .sheet(isPresented: $isPresented) {\n\u0026gt;             SheetView()\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; \n\u0026gt; struct SheetView: View {\n\u0026gt;     @State var text = \"\"\n\u0026gt; \n\u0026gt;     var body: some View {\n\u0026gt;         ZStack(alignment: .bottom) {\n\u0026gt;             Color.yellow\n\u0026gt;                 .overlay(alignment: .top) {\n\u0026gt;                     TextField(\"Type something here...\", text: $text)\n\u0026gt;                         .padding()\n\u0026gt;                 }\n\u0026gt; \n\u0026gt;             Color.green\n\u0026gt;                 .frame(height: 100)\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; ```",
              "id": 1,
              "author_subname": "Ask Apple - swiftui",
              "author_link": "https://appledeveloper.slack.com/services/B043UB9BUQG",
              "author_icon": "https://avatars.slack-edge.com/2022-09-20/4120370126929_5cc197cf176b16fbc203_48.png",
              "text": "\u003c@U0465NRPTPW\u003e asked\n\u0026gt; Our users continue to report problems with the keyboard safe areas in iOS 16.x. The gist is that keyboard dismissals are occurring without updating the safe areas at all, which leave large keyboard-sized holes in our UI. Is there any update we can get on the feedbacks that we (and some other community members that we're aware of) have filed?\n\u0026gt; \n\u0026gt; To make this question less vague, I've copied some steps from the filed feedback that reproduce this issue.\n\u0026gt; \n\u0026gt; ---\n\u0026gt; To test, try the following steps in the enclosed project:\n\u0026gt; 1. Present the sheet by selecting the button\n\u0026gt; 2. Trigger the keyboard by focusing on the text field\n\u0026gt; 3. Begin interactively dismissing the sheet slowly\n\u0026gt; \n\u0026gt; At this point the system resigns focus from the text field and dismisses the keyboard.\n\u0026gt; \n\u0026gt; 4. Cancel the interactive dismissal gesture\n\u0026gt; \n\u0026gt; Observe that both SheetView children (in yellow and green) are now cut-off where the keyboard had been because it respects the keyboard’s safe areas.\n\u0026gt; \n\u0026gt; ```\n\u0026gt; import SwiftUI\n\u0026gt; \n\u0026gt; @main\n\u0026gt; struct Application: App {\n\u0026gt;     var body: some Scene {\n\u0026gt;         WindowGroup {\n\u0026gt;             ContentView()\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; \n\u0026gt; struct ContentView: View {\n\u0026gt;     @State var isPresented = false\n\u0026gt; \n\u0026gt;     var body: some View {\n\u0026gt;         Button(\"Present\") {\n\u0026gt;             isPresented = true\n\u0026gt;         }\n\u0026gt;         .sheet(isPresented: $isPresented) {\n\u0026gt;             SheetView()\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; \n\u0026gt; struct SheetView: View {\n\u0026gt;     @State var text = \"\"\n\u0026gt; \n\u0026gt;     var body: some View {\n\u0026gt;         ZStack(alignment: .bottom) {\n\u0026gt;             Color.yellow\n\u0026gt;                 .overlay(alignment: .top) {\n\u0026gt;                     TextField(\"Type something here...\", text: $text)\n\u0026gt;                         .padding()\n\u0026gt;                 }\n\u0026gt; \n\u0026gt;             Color.green\n\u0026gt;                 .frame(height: 100)\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; ```",
              "from_url": "https://appledeveloper.slack.com/archives/C043025CS59/p1666113124496639",
              "original_url": "https://appledeveloper.slack.com/archives/C043025CS59/p1666113124496639",
              "mrkdwn_in": [
                "text"
              ],
              "blocks": null,
              "footer": "Thread in #swiftui",
              "ts": 1666113124.496639
            }
          ],
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "s2N",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Looks like my issue is fairly close to "
                    },
                    {
                      "type": "link",
                      "url": "https://appledeveloper.slack.com/archives/C043025CS59/p1666113124496639",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "497a48a3-fcc4-431e-824d-dcde078fb5bd",
          "type": "message",
          "user": "U044R32PW4X",
          "text": "Yes, that does sound like a similar sort of issue. We're looking at the feedback report mentioned in that thread.",
          "ts": "1666113945.826189",
          "thread_ts": "1666113565.006499",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+SiE",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, that does sound like a similar sort of issue. We're looking at the feedback report mentioned in that thread."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6a6c1102-e33c-4672-9da3-ab1d414cc870",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "```struct ContentView: View {\n  @State var text: String = \"\"\n  @FocusState var focused: Bool\n\n  var body: some View {\n    ScrollView {\n      TextField(\"Test\", text: $text)\n        .focused($focused)\n      Color.pink.frame(height: 2000)\n    }\n  }\n}```\n",
          "ts": "1666114202.040099",
          "thread_ts": "1666113565.006499",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "open_mouth",
              "count": 2,
              "users": [
                "U0465NRPTPW",
                "U0464M23S4C"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gBOHC",
              "elements": [
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"struct ContentView: View {\\n  @State var text: String = \\\"\\\"\\n  @FocusState var focused: Bool\\n\\n  var body: some View {\\n    ScrollView {\\n      TextField(\\\"Test\\\", text: $text)\\n        .focused($focused)\\n      Color.pink.frame(height: 2000)\\n    }\\n  }\\n}\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": []
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6ef39535-5cde-4b54-aced-c28ec171d186",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "If you make a new project, use that as the content view, run on iOS 16 or 16.1\nTap on the field at the top, scroll to the bottom, hit return on the keyboard",
          "ts": "1666114241.361259",
          "thread_ts": "1666113565.006499",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "37d",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you make a new project, use that as the content view, run on iOS 16 or 16.1\nTap on the field at the top, scroll to the bottom, hit return on the keyboard"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5c52fabb-0fdc-47e5-a567-f0749bc3aa11",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "FB11701808",
          "ts": "1666116080.304209",
          "thread_ts": "1666113565.006499",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 3,
              "users": [
                "U044R32PW4X",
                "U0465NRPTPW",
                "U0462SYEK5L"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "X0dm5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FB11701808"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "15c92a3b-e89d-4816-b357-cf4e30914087",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "Any chance a workaround for this was discovered?",
          "ts": "1666298473.710699",
          "thread_ts": "1666113565.006499",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "o44U5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Any chance a workaround for this was discovered?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04625ZF30T\u003e asked\n\u0026gt; We're using the new NavigationStack with the path argument, but are having trouble \"converting\" the path when the user resizes the window from Regular to Compact in stage manager.\n\u0026gt; \n\u0026gt; In regular-width we have a sidebar with a navigation stack in the detail view. In compact-width we have a tab bar with a navigation-stack in every tab.",
      "ts": "1666113666.878559",
      "thread_ts": "1666113666.878559",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 4,
      "latest_reply": "1666114461.981819",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "B6o",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04625ZF30T"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"We're using the new NavigationStack with the path argument, but are having trouble \\\"converting\\\" the path when the user resizes the window from Regular to Compact in stage manager.\\n\\nIn regular-width we have a sidebar with a navigation stack in the detail view. In compact-width we have a tab bar with a navigation-stack in every tab.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "933810db-111e-4983-88d7-740e6aab6ceb",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "Currently the best approach to this is to build a navigation state model object that holds a canonical representation of the navigation state, but that can vend programmatic bindings purpose-fit to your normal and compact displays. E.g., have multiple paths, one for each tab, in your model, but project just one of those paths for the detail when in a split view.",
          "ts": "1666113682.744569",
          "thread_ts": "1666113666.878559",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "q6MT",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Currently the best approach to this is to build a navigation state model object that holds a canonical representation of the navigation state, but that can vend programmatic bindings purpose-fit to your normal and compact displays. E.g., have multiple paths, one for each tab, in your model, but project just one of those paths for the detail when in a split view."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "cc3319d1-feac-4076-8e2a-b65879946030",
          "type": "message",
          "user": "U04625ZF30T",
          "text": "That’s interesting. Never considered having multiple paths. We currently have a single path-instance that is shared between all tabs and the detail-navigation stack.\n\nThis requires us to add this:\n```.onChange(of: rootNavigationManager.selection) { _ in\n    guard path.count \u0026gt; 0 else { return }\n    path.removeLast(path.count)\n}```\nbut maybe your solution is better :thinking_face:",
          "ts": "1666113971.306569",
          "thread_ts": "1666113666.878559",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "cyu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s interesting. Never considered having multiple paths. We currently have a single path-instance that is shared between all tabs and the detail-navigation stack.\n\nThis requires us to add this:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\".onChange(of: rootNavigationManager.selection) { _ in\\n    guard path.count \u003e 0 else { return }\\n    path.removeLast(path.count)\\n}\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "but maybe your solution is better "
                    },
                    {
                      "type": "emoji",
                      "name": "thinking_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8b6615bb-080d-42b9-bd90-fc518d81762f",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "I really like using a common underlying source of truth and projecting that to the needs of the UI. It’s especially nice, because I can unit test that model to make sure the regular and compact projections are consistent.",
          "ts": "1666114131.461799",
          "thread_ts": "1666113666.878559",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "X1X6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I really like using a common underlying source of truth and projecting that to the needs of the UI. It’s especially nice, because I can unit test that model to make sure the regular and compact projections are consistent."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c9a33200-201b-4257-b9ba-533385d2c5ab",
          "type": "message",
          "user": "U04625ZF30T",
          "text": "Good point. I’ll give it a try and see where it takes me. Thanks for helping me out, I really appreciate it!",
          "ts": "1666114461.981819",
          "thread_ts": "1666113666.878559",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bt+C5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Good point. I’ll give it a try and see where it takes me. Thanks for helping me out, I really appreciate it!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464SKECHJ\u003e asked\n\u0026gt; You guys are doing an awesome job with great APIs and awesome tools. I wouldn't be a developer without the awesome work of you guys, so thank you so much!!.  It would really great if some of the engineers or tech support answered questions on the Apple developer forums. A lot of the questions remain unanswered. I have filed feedbacks and also contacted DTS. DTS looks at the status of the tickets and state they are open. I have feedbacks created for WWDC 2021 that still remain open without comments.  So I feel helpless as I have exhausted all options (Apple Developer Forums, Feedback, DTS). Please let me know how I can ask questions more effectively.\n\u0026gt; Some of the Feedback IDs: FB11661364, FB10128110, FB11565614, FB11517536, FB11428998, FB11275037",
      "ts": "1666113667.290469",
      "thread_ts": "1666113667.290469",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666114132.009919",
      "reactions": [
        {
          "name": "heart",
          "count": 15,
          "users": [
            "U0441J2N9FH",
            "U0471BFLNAY",
            "U046F4RN341",
            "U04740U25U4",
            "U047LTPUW8G",
            "U046VLCE1GR",
            "U0464NE480L",
            "U046X6A39D2",
            "U0466VBE92Q",
            "U0462SYEK5L",
            "U0472N2F8AU",
            "U0464M23S4C",
            "U046706G7RT",
            "U046YMT8Y58",
            "U045Q2F5THV"
          ]
        },
        {
          "name": "heavy_plus_sign",
          "count": 4,
          "users": [
            "U046LRM2C9Z",
            "U046X6A39D2",
            "U0462SYEK5L",
            "U0472N2F8AU"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "9bdc",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464SKECHJ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"You guys are doing an awesome job with great APIs and awesome tools. I wouldn't be a developer without the awesome work of you guys, so thank you so much!!.  It would really great if some of the engineers or tech support answered questions on the Apple developer forums. A lot of the questions remain unanswered. I have filed feedbacks and also contacted DTS. DTS looks at the status of the tickets and state they are open. I have feedbacks created for WWDC 2021 that still remain open without comments.  So I feel helpless as I have exhausted all options (Apple Developer Forums, Feedback, DTS). Please let me know how I can ask questions more effectively.\\nSome of the Feedback IDs: FB11661364, FB10128110, FB11565614, FB11517536, FB11428998, FB11275037\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "633ccf60-1510-414d-9e35-06a147e5bfeb",
          "type": "message",
          "user": "U0441J2N9FH",
          "text": "Hi Muthuveerappan! Sometimes we can’t respond to Feedback directly, but we _do_ appreciate it. It’s essential, in fact, to understand what you’re trying to do with the APIs we build and where they fall short. Thank you so much for taking the time to post and especially to send in Feedback.",
          "ts": "1666114014.143279",
          "thread_ts": "1666113667.290469",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heavy_plus_sign",
              "count": 2,
              "users": [
                "U045J8S9EU9",
                "U0464SKECHJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xTSG",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi Muthuveerappan! Sometimes we can’t respond to Feedback directly, but we "
                    },
                    {
                      "type": "text",
                      "text": "do",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " appreciate it. It’s essential, in fact, to understand what you’re trying to do with the APIs we build and where they fall short. Thank you so much for taking the time to post and especially to send in Feedback."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ff77ffca-c9bd-4d61-9c7b-017a350d86a5",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "Thanks, when you guys have time have a look at them, I have attached sample code, video, steps to reproduce  :slightly_smiling_face: :crossed_fingers:",
          "ts": "1666114132.009919",
          "thread_ts": "1666113667.290469",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9+FO",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks, when you guys have time have a look at them, I have attached sample code, video, steps to reproduce  "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "emoji",
                      "name": "crossed_fingers",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045XTG02PR\u003e asked\n\u0026gt; What is the best way to render a custom screen with circular images  in non-linear positions (with 2 axis)? I am currently using a ZStack with the images being rendered with offset, so that I can position them where I want, but I don't know if this is the most efficient way to do that.",
      "ts": "1666113714.121119",
      "thread_ts": "1666113714.121119",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666113722.799689",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "4SZ",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045XTG02PR"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What is the best way to render a custom screen with circular images  in non-linear positions (with 2 axis)? I am currently using a ZStack with the images being rendered with offset, so that I can position them where I want, but I don't know if this is the most efficient way to do that.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "63d8022b-da94-45b9-ad13-3f092515c21c",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "So long as its performance is good enough to handle your use case smoothly, this seems like a totally reasonable implementation to me. If you are running into performance issues / trying to significantly scale the number of images you’re drawing though, you may want to look into the `.drawingGroup()` and `Canvas` APIs as well, which can both be used for more intensive drawing.",
          "ts": "1666113722.799689",
          "thread_ts": "1666113714.121119",
          "edited": {
            "user": "U045J8S9EU9",
            "ts": "1666113753.000000"
          },
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U045XTG02PR"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ydCBU",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "So long as its performance is good enough to handle your use case smoothly, this seems like a totally reasonable implementation to me. If you are running into performance issues / trying to significantly scale the number of images you’re drawing though, you may want to look into the "
                    },
                    {
                      "type": "text",
                      "text": ".drawingGroup()",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "text",
                      "text": "Canvas",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " APIs as well, which can both be used for more intensive drawing."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0460DFSBQX\u003e asked\n\u0026gt; Hi! I've started adopting NavigationSplitView and am liking it a lot. There are situations where I want to make decisions based on whether the view is collapsed or not (e.g. show a message in the detail view if expanded, or show an alert or other indication if collapsed). Can I assume that if the horizontal size class is compact, it's collapsed? Or is there a more reliable method?",
      "ts": "1666113714.176979",
      "thread_ts": "1666113714.176979",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666113786.312679",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "rhWF",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0460DFSBQX"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hi! I've started adopting NavigationSplitView and am liking it a lot. There are situations where I want to make decisions based on whether the view is collapsed or not (e.g. show a message in the detail view if expanded, or show an alert or other indication if collapsed). Can I assume that if the horizontal size class is compact, it's collapsed? Or is there a more reliable method?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "4b02c87e-6ab5-4bc4-811e-ccc9e6c5a65f",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "I’m glad you like it!\n\nA compact horizontal size class does correspond to a collapsed navigation split view.\n\nI’m interested in making this more explicit, so would love a Feedback with your particular use case.",
          "ts": "1666113786.312679",
          "thread_ts": "1666113714.176979",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U0460DFSBQX",
                "U0462SYEK5L"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "al5Li",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m glad you like it!\n\nA compact horizontal size class does correspond to a collapsed navigation split view.\n\nI’m interested in making this more explicit, so would love a Feedback with your particular use case."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045P29PG0P\u003e asked\n\u0026gt; I have a SwiftUI view that contains 132 UITextFields; I know it's a lot of textfields but that's part of the business logic .\n\u0026gt; After a lot of struggling and memory leaks, I managed to get it to work however focusing from one text field to the next doesn't feel smooth enough and it seems like my CPU usage spikes to 70-100% whenever I type a letter in one of the textfields.\n\u0026gt; I also believe some of my views appear twice when I inspect the UI; not sure why.\n\u0026gt; I have a demo project that I would like to share.",
      "ts": "1666113847.835439",
      "thread_ts": "1666113847.835439",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 7,
      "latest_reply": "1666114144.974449",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Gievy",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045P29PG0P"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have a SwiftUI view that contains 132 UITextFields; I know it's a lot of textfields but that's part of the business logic .\\nAfter a lot of struggling and memory leaks, I managed to get it to work however focusing from one text field to the next doesn't feel smooth enough and it seems like my CPU usage spikes to 70-100% whenever I type a letter in one of the textfields.\\nI also believe some of my views appear twice when I inspect the UI; not sure why.\\nI have a demo project that I would like to share.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "21fd705a-9bca-4e79-8dd7-7542f1009872",
          "type": "message",
          "user": "U045P29PG0P",
          "text": "Where can I link the demo project?",
          "ts": "1666113873.024169",
          "thread_ts": "1666113847.835439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "j95",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Where can I link the demo project?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "436f0bf5-c1ce-4e79-a256-505b61b2a487",
          "type": "message",
          "user": "U045P29PG0P",
          "text": "also fyi; I have the same view implemented 100% in UIKit and it doesn't suffer from any performance issues.",
          "ts": "1666113927.145129",
          "thread_ts": "1666113847.835439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+0O",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "also fyi; I have the same view implemented 100% in UIKit and it doesn't suffer from any performance issues."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ea730025-5a5a-4866-a703-31b75d39f120",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "If you are running into performance issues on iOS using UITextField, you can try avoiding every view being a TextField and render as Text by default and dynamically switch to a TextField when that text is tapped.",
          "ts": "1666113965.023639",
          "thread_ts": "1666113847.835439",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U0469NB7686"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "k5OZm",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you are running into performance issues on iOS using UITextField, you can try avoiding every view being a TextField and render as Text by default and dynamically switch to a TextField when that text is tapped."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2d085f01-8e82-4483-8aa9-f8f67b0370cb",
          "type": "message",
          "user": "U045P29PG0P",
          "text": "That sounds like a good idea. I would have to implement it to see if it would feel natural or not.\nAny chance you guys would like to take a look at the demo project though?",
          "ts": "1666114089.492809",
          "thread_ts": "1666113847.835439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "yNN",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That sounds like a good idea. I would have to implement it to see if it would feel natural or not.\nAny chance you guys would like to take a look at the demo project though?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d6fa4d4b-a60e-451d-9dc2-e37be3c99178",
          "type": "message",
          "user": "U045Z2GB294",
          "text": "how can I call keyboard appear？",
          "ts": "1666114091.393709",
          "thread_ts": "1666113847.835439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "SYu1i",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "how can I call keyboard appear？"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "51f632d9-6517-43b1-846a-5f4b9da12574",
          "type": "message",
          "user": "U045P29PG0P",
          "text": "\u003c@U045Z2GB294\u003e I used something similar to this: \u003chttps://peterfriese.dev/posts/swiftui-list-focus/\u003e",
          "ts": "1666114135.736819",
          "thread_ts": "1666113847.835439",
          "attachments": [
            {
              "fallback": "Peter Friese: Managing Focus in SwiftUI List Views - Make It So - Again! | Peter Friese",
              "id": 1,
              "title": "Managing Focus in SwiftUI List Views - Make It So - Again! | Peter Friese",
              "title_link": "https://peterfriese.dev/posts/swiftui-list-focus/",
              "text": "How to manage focus in SwiftUI List Views",
              "image_url": "https://peterfriese.dev/posts/swiftui-list-focus/header.png",
              "service_name": "Peter Friese",
              "service_icon": "https://peterfriese.dev/images/favicon.png",
              "from_url": "https://peterfriese.dev/posts/swiftui-list-focus/",
              "original_url": "https://peterfriese.dev/posts/swiftui-list-focus/",
              "blocks": null
            }
          ],
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U045Z2GB294"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CSk",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U045Z2GB294"
                    },
                    {
                      "type": "text",
                      "text": " I used something similar to this: "
                    },
                    {
                      "type": "link",
                      "url": "https://peterfriese.dev/posts/swiftui-list-focus/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e92c979d-e6e5-497a-a945-e7be40416246",
          "type": "message",
          "user": "U045P29PG0P",
          "text": "but it's iOS 15+",
          "ts": "1666114144.974449",
          "thread_ts": "1666113847.835439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "hGS3G",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "but it's iOS 15+"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046ETGSKNV\u003e asked\n\u0026gt; What is the best way to share data between multiple views in case this data is coming from the API response? \u2028I used the enviromentObject in the ContentView as a wrapper for all views and inside every view, I use @EnviromentObject to access this data, is this the best approach for this case ? the only issue in this approach is the memory usage increase when I append new data.",
      "ts": "1666113891.076919",
      "thread_ts": "1666113891.076919",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666113903.478659",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "rxX",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046ETGSKNV"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What is the best way to share data between multiple views in case this data is coming from the API response? \\u2028I used the enviromentObject in the ContentView as a wrapper for all views and inside every view, I use @EnviromentObject to access this data, is this the best approach for this case ? the only issue in this approach is the memory usage increase when I append new data.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "d91b6a96-dc0d-4fb0-98a4-8efb6e7e18c9",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "`@EnvironmentObject` / `environmentObject` are probably your best tool for sharing the same model across view hierarchy. Using them should only create a single instance, which is then readable in subviews. That shouldn’t increase memory usage (if if does please file a feedback). It might be that if you are appending more and more data to you model object you are increasing the memory usage; that’s pretty normal regardless of SwiftUI. If that happens a technique for overcoming that is to offload on disk some of that data and just keep in memory the most relevant piece of data and an identifier to be able to fully fetch back the rest.",
          "ts": "1666113903.478659",
          "thread_ts": "1666113891.076919",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 3,
              "users": [
                "U04648HBJN7",
                "U046ETGSKNV",
                "U0462SYEK5L"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ZMxps",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "@EnvironmentObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " / "
                    },
                    {
                      "type": "text",
                      "text": "environmentObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " are probably your best tool for sharing the same model across view hierarchy. Using them should only create a single instance, which is then readable in subviews. That shouldn’t increase memory usage (if if does please file a feedback). It might be that if you are appending more and more data to you model object you are increasing the memory usage; that’s pretty normal regardless of SwiftUI. If that happens a technique for overcoming that is to offload on disk some of that data and just keep in memory the most relevant piece of data and an identifier to be able to fully fetch back the rest."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046ETGSKNV\u003e asked\n\u0026gt; How I can use a toolbar for the keyboard placement to appear above the keyboard without using a NavigationView? If I used it outside the navigation view it will not appear unless I set it inside a navigation view",
      "ts": "1666114092.615049",
      "thread_ts": "1666114092.615049",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 4,
      "latest_reply": "1666114811.532789",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "xcjU",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046ETGSKNV"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How I can use a toolbar for the keyboard placement to appear above the keyboard without using a NavigationView? If I used it outside the navigation view it will not appear unless I set it inside a navigation view\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "dd1da781-595f-46a0-aa97-248857edd8ad",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "If you use a NavigationView, place the toolbar modifier inside the NavigationView. If you don’t use a NavigationView, the toolbar modifier with keyboard placement should work anywhere in your view.",
          "ts": "1666114191.763759",
          "thread_ts": "1666114092.615049",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U046ETGSKNV"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lEC",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you use a NavigationView, place the toolbar modifier inside the NavigationView. If you don’t use a NavigationView, the toolbar modifier with keyboard placement should work anywhere in your view."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "dd0b0420-5012-4cb6-a7cb-c780a296198d",
          "type": "message",
          "user": "U046ETGSKNV",
          "text": "\u003c@U0455KK9C2W\u003e\nAlright, I tried it in a ContentView and it's working but in sheet is doesn't work, so yea it's working with NavigationView and without too, but not working in the sheet view",
          "ts": "1666114567.603099",
          "thread_ts": "1666114092.615049",
          "edited": {
            "user": "U046ETGSKNV",
            "ts": "1666114589.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3kgv0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0455KK9C2W"
                    },
                    {
                      "type": "text",
                      "text": "\nAlright, I tried it in a ContentView and it's working but in sheet is doesn't work, so yea it's working with NavigationView and without too, but not working in the sheet view"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a68a8d23-c19c-41d6-87ac-3937fe4a0b45",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "Please file a feedback for that issue.\n\nIf you sheet is outside the navigation view though, you could try moving that into the navigation view as well to see if that helps.",
          "ts": "1666114693.518799",
          "thread_ts": "1666114092.615049",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UHEEA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Please file a feedback for that issue.\n\nIf you sheet is outside the navigation view though, you could try moving that into the navigation view as well to see if that helps."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0bbd5aa6-0008-483f-899b-834e5eb66624",
          "type": "message",
          "user": "U046ETGSKNV",
          "text": "If I added a navigation view inside the sheet it's appear normally, So I will file a feedback for this issue :ok_hand:",
          "ts": "1666114811.532789",
          "thread_ts": "1666114092.615049",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "IZP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If I added a navigation view inside the sheet it's appear normally, So I will file a feedback for this issue "
                    },
                    {
                      "type": "emoji",
                      "name": "ok_hand",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045Z5JKR5L\u003e asked\n\u0026gt; Is there a difference between `.task` and `.onAppear` if the operation is synchronous? In other words, if I write `Color.green.task { self.someState += }`, is the state mutation guaranteed to run before the view first appears? I'm asking because I like the convenience of using `.task(id: …)` in place of `.onAppear` combined with `.onChange(of:)`.",
      "ts": "1666114092.970879",
      "thread_ts": "1666114092.970879",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666114114.929209",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "R8Nv+",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045Z5JKR5L"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is there a difference between `.task` and `.onAppear` if the operation is synchronous? In other words, if I write `Color.green.task { self.someState += }`, is the state mutation guaranteed to run before the view first appears? I'm asking because I like the convenience of using `.task(id: \\u2026)` in place of `.onAppear` combined with `.onChange(of:)`.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "acb73c88-6935-4320-9f90-7e82d0b6e5c7",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "`onAppear` and `task` are both called just before we run `body` for the first time on a view. For your use case they are effectively behaviorally equivalent.",
          "ts": "1666114114.929209",
          "thread_ts": "1666114092.970879",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1::skin-tone-2",
              "count": 1,
              "users": [
                "U0455RVLUQG"
              ]
            },
            {
              "name": "+1",
              "count": 5,
              "users": [
                "U046ETGSKNV",
                "U0464M23S4C",
                "U045NGKNMPH",
                "U046HFVT8KB",
                "U0469NB7686"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vkp",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "onAppear",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "text",
                      "text": "task",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " are both called just before we run "
                    },
                    {
                      "type": "text",
                      "text": "body",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " for the first time on a view. For your use case they are effectively behaviorally equivalent."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0466JB1G7N\u003e asked\n\u0026gt; Converting `Date` to `String` with Japanese Calendar using Date.FormatStyle does not work on macOS 12.6. However it works well on iOS. Is there any limitation of it on macOS or bug?",
      "ts": "1666114099.228689",
      "thread_ts": "1666114099.228689",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666114205.013459",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "2FgO",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0466JB1G7N"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Converting `Date` to `String` with Japanese Calendar using Date.FormatStyle does not work on macOS 12.6. However it works well on iOS. Is there any limitation of it on macOS or bug?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "3d5fd82f-cba1-4028-8cee-24b8403cf632",
          "type": "message",
          "user": "U045J8S8JQZ",
          "text": "If you haven’t already, please file a feedback via \u003chttps://feedbackassistant.apple.com\u003e and share the feedback number here in a thread",
          "ts": "1666114205.013459",
          "thread_ts": "1666114099.228689",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "BixEW",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you haven’t already, please file a feedback via "
                    },
                    {
                      "type": "link",
                      "url": "https://feedbackassistant.apple.com",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": " and share the feedback number here in a thread"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046LURKWA1\u003e asked\n\u0026gt; I want to programmatically add a value to the navigation path. Essentially what we used to be able to do with the deprecated ‘isActive’ links. Is there anyway to programmatically do this on, I’m assuming, an invisible NavigationLink? \n\u0026gt; \n\u0026gt; For more information I posed a StackOverflow question yesterday: \u003chttps://stackoverflow.com/questions/74104945/ios16-how-to-navigate-through-hidden-links-with-an-optional-value|https://stackoverflow.com/questions/74104945/ios16-how-to-navigate-through-hidden-links-with-an-optional-value\u003e",
      "ts": "1666114203.161469",
      "thread_ts": "1666114203.161469",
      "attachments": [
        {
          "fallback": "Stack Overflow: iOS16 - How to navigate through hidden links with an optional value?",
          "id": 1,
          "title": "iOS16 - How to navigate through hidden links with an optional value?",
          "title_link": "https://stackoverflow.com/questions/74104945/ios16-how-to-navigate-through-hidden-links-with-an-optional-value",
          "text": "I previously used an optional value to click a hidden link to navigate in my app. Something like this example in Hacking With Swift: @State private var selection: String? = nil var body: some View...",
          "thumb_url": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
          "service_name": "Stack Overflow",
          "service_icon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a",
          "from_url": "https://stackoverflow.com/questions/74104945/ios16-how-to-navigate-through-hidden-links-with-an-optional-value",
          "original_url": "https://stackoverflow.com/questions/74104945/ios16-how-to-navigate-through-hidden-links-with-an-optional-value",
          "blocks": null
        }
      ],
      "edited": {
        "user": "B043UB9BUQG",
        "ts": "1666114204.000000"
      },
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 3,
      "latest_reply": "1666114636.986479",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "digT",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046LURKWA1"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I want to programmatically add a value to the navigation path. Essentially what we used to be able to do with the deprecated \\u2018isActive\\u2019 links. Is there anyway to programmatically do this on, I\\u2019m assuming, an invisible NavigationLink? \\n\\nFor more information I posed a StackOverflow question yesterday: \"},{\"type\":\"link\",\"url\":\"https:\\/\\/stackoverflow.com\\/questions\\/74104945\\/ios16-how-to-navigate-through-hidden-links-with-an-optional-value\",\"text\":\"https:\\/\\/stackoverflow.com\\/questions\\/74104945\\/ios16-how-to-navigate-through-hidden-links-with-an-optional-value\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "9ab239f1-1495-403f-9b26-114e2f7561aa",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "If you bind a navigation path — `NavigationStack(path: $myPath)` — then you can just append to the path `myPath.append(data)`.",
          "ts": "1666114223.777899",
          "thread_ts": "1666114203.161469",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FMCXM",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you bind a navigation path — "
                    },
                    {
                      "type": "text",
                      "text": "NavigationStack(path: $myPath)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " — then you can just append to the path "
                    },
                    {
                      "type": "text",
                      "text": "myPath.append(data)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "02050b00-86dc-41ba-8120-58e7ad1ffb6a",
          "type": "message",
          "user": "U046LURKWA1",
          "text": "Thank you so much. Somehow I was missing that. From that I see (if using selection instead of path) you can set `selection = .Destination`  too. Assuming that's correct too?",
          "ts": "1666114556.731899",
          "thread_ts": "1666114203.161469",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gQF",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you so much. Somehow I was missing that. From that I see (if using selection instead of path) you can set "
                    },
                    {
                      "type": "text",
                      "text": "selection = .Destination",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "  too. Assuming that's correct too?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fae4bc60-65a7-4d9e-85a1-81ba127f2dfc",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "Yep! One of the design principles of the navigation API is that you should be able to programmatically configure any navigation state directly.",
          "ts": "1666114636.986479",
          "thread_ts": "1666114203.161469",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U046797427P"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ns4x",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yep! One of the design principles of the navigation API is that you should be able to programmatically configure any navigation state directly."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04625ZF30T\u003e asked\n\u0026gt; Is it possible to attach arguments to the creation of a new window on macOS?\n\u0026gt; \n\u0026gt; We're creating a new managed object in a child context and want both of these sent to a new window. Currently we're doing this by saving a reference to the child context and managed object in a singleton, then opening a new window using a URL which checks in the singleton for the context and managed object.\n\u0026gt; \n\u0026gt; Would be much nicer if we could initiate the new window with custom arguments. This isn't possible yet, right?",
      "ts": "1666114205.817399",
      "thread_ts": "1666114205.817399",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 7,
      "latest_reply": "1666115710.847039",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Y0c",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04625ZF30T"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is it possible to attach arguments to the creation of a new window on macOS?\\n\\nWe're creating a new managed object in a child context and want both of these sent to a new window. Currently we're doing this by saving a reference to the child context and managed object in a singleton, then opening a new window using a URL which checks in the singleton for the context and managed object.\\n\\nWould be much nicer if we could initiate the new window with custom arguments. This isn't possible yet, right?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "cde9509a-8f76-4e88-ae62-d0ec77753207",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "With macOS Ventura, we introduced new API on `WindowGroup` that will let you pass data to the window upon opening it. This can be used in conjunction with `OpenWindowAction` as well.\n\n\n\u003chttps://developer.apple.com/documentation/swiftui/windowgroup/init(for:content:)\u003e\n\n\u003chttps://developer.apple.com/documentation/swiftui/openwindowaction/\u003e",
          "ts": "1666114243.402499",
          "thread_ts": "1666114205.817399",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "raised_hands",
              "count": 2,
              "users": [
                "U046S46MMLG",
                "U046797427P"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+hX",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "With macOS Ventura, we introduced new API on "
                    },
                    {
                      "type": "text",
                      "text": "WindowGroup",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " that will let you pass data to the window upon opening it. This can be used in conjunction with "
                    },
                    {
                      "type": "text",
                      "text": "OpenWindowAction",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " as well.\n\n\n"
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/windowgroup/init(for:content:)",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": "\n\n"
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/openwindowaction/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3c5e2a69-743f-4940-a085-c8224e65d71f",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "Note that your data needs to be either an optional or have a default value specified, since there are occasions where the framework itself will be creating the window - for example when the new window menu item is selected",
          "ts": "1666114284.419149",
          "thread_ts": "1666114205.817399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+9K35",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Note that your data needs to be either an optional or have a default value specified, since there are occasions where the framework itself will be creating the window - for example when the new window menu item is selected"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e76f56f1-567b-475c-a582-b4d3252766f4",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "The data will also be persisted and then passed back to the window upon restoration, provided state restoration is enabled for the user.",
          "ts": "1666114314.064039",
          "thread_ts": "1666114205.817399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9qGPr",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The data will also be persisted and then passed back to the window upon restoration, provided state restoration is enabled for the user."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "bdbf6b9a-3bc3-4eaa-9f07-0f51601f9399",
          "type": "message",
          "user": "U04625ZF30T",
          "text": "OMG WHAT! This is awesome, exactly what I’ve dreamt of! :star-struck:",
          "ts": "1666114346.297749",
          "thread_ts": "1666114205.817399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "z+8/",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "OMG WHAT! This is awesome, exactly what I’ve dreamt of! "
                    },
                    {
                      "type": "emoji",
                      "name": "star-struck",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e2f27eb9-10a2-412d-8c4e-c134a85d15a5",
          "type": "message",
          "user": "U04625ZF30T",
          "text": "\u003c@U0455KK1D5G\u003e I see in the docs that these functions also work on iOS and iPadOS. How will a new window be opened on these platforms? Does the system present it as a modal or as a new scene?",
          "ts": "1666114884.731379",
          "thread_ts": "1666114205.817399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2yQpk",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0455KK1D5G"
                    },
                    {
                      "type": "text",
                      "text": " I see in the docs that these functions also work on iOS and iPadOS. How will a new window be opened on these platforms? Does the system present it as a modal or as a new scene?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "987d3d3a-f103-41ff-97c4-adb63d5b395a",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "Note that it only works on iPadOS. I believe it will create a new scene, ie - 2/3 and 1/3 split.",
          "ts": "1666115637.216109",
          "thread_ts": "1666114205.817399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zdEG=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Note that it only works on iPadOS. I believe it will create a new scene, ie - 2/3 and 1/3 split."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fc373e16-bff0-4721-b8df-c4daebbfcb0e",
          "type": "message",
          "user": "U04625ZF30T",
          "text": "Got it! Thank you! :man-bowing:",
          "ts": "1666115710.847039",
          "thread_ts": "1666114205.817399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "y+fCk",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Got it! Thank you! "
                    },
                    {
                      "type": "emoji",
                      "name": "man-bowing",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464REPUJG\u003e asked\n\u0026gt; What's the best way to handle a canceled/incomplete drag in Swift UI on macOS? For example, consider a Swift UI view with a bunch of items that can be dragged around to reorder them. The .onDrag and .onDrop View methods can handle the case where a drag and drop is successfully performed. But what about the case where the user drags an item and then drops it in an invalid location (e.g., if it's dropped onto the Mac menu bar), or if the user types the Escape key during the drag, or any other situation that ends the drag without a successful drop?\n\u0026gt; \n\u0026gt; I'm interested in this because I need to run some code when a drop doesn't complete successfully, but I can't find any sort of handler or callback where I can put that code. I was looking for something like onDrag(_:preview:cancel:) (rather than just the onDrag(_:preview:) that currently exists in Swift UI) where I could set up the code that will run if the drag is canceled or otherwise doesn't complete successfully.",
      "ts": "1666114271.918429",
      "thread_ts": "1666114271.918429",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 6,
      "latest_reply": "1666115036.709269",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "5KTU",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464REPUJG"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What's the best way to handle a canceled\\/incomplete drag in Swift UI on macOS? For example, consider a Swift UI view with a bunch of items that can be dragged around to reorder them. The .onDrag and .onDrop View methods can handle the case where a drag and drop is successfully performed. But what about the case where the user drags an item and then drops it in an invalid location (e.g., if it's dropped onto the Mac menu bar), or if the user types the Escape key during the drag, or any other situation that ends the drag without a successful drop?\\n\\nI'm interested in this because I need to run some code when a drop doesn't complete successfully, but I can't find any sort of handler or callback where I can put that code. I was looking for something like onDrag(_\"},{\"type\":\"emoji\",\"name\":\"preview\"},{\"type\":\"text\",\"text\":\"cancel:) (rather than just the onDrag(_\"},{\"type\":\"emoji\",\"name\":\"preview\"},{\"type\":\"text\",\"text\":\") that currently exists in Swift UI) where I could set up the code that will run if the drag is canceled or otherwise doesn't complete successfully.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "6bdf136c-332e-425f-a4e1-82b75d7da530",
          "type": "message",
          "user": "U045J8S8JQZ",
          "text": "If you haven’t already, please file a feedback that describes your use case via \u003chttps://feedbackassistant.apple.com\u003e and share the feedback number here in the thread",
          "ts": "1666114309.210269",
          "thread_ts": "1666114271.918429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "uFtv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you haven’t already, please file a feedback that describes your use case via "
                    },
                    {
                      "type": "link",
                      "url": "https://feedbackassistant.apple.com",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": " and share the feedback number here in the thread"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "40c82008-8948-48e4-9249-f1b03d47ed5c",
          "type": "message",
          "user": "U0464REPUJG",
          "text": "Will do. I haven't filed anything because I was not sure there wasn't some existing API that I was missing.",
          "ts": "1666114388.722559",
          "thread_ts": "1666114271.918429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "VR/U",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Will do. I haven't filed anything because I was not sure there wasn't some existing API that I was missing."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "cb38e657-a53a-4fd2-ab66-acd640d40839",
          "type": "message",
          "user": "U045J8S8JQZ",
          "text": "Thank you!",
          "ts": "1666114431.290909",
          "thread_ts": "1666114271.918429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "f93q0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "49712e7c-8b50-4ebe-ac21-a172dadfb7ef",
          "type": "message",
          "user": "U0441J2N9FH",
          "text": "Feedback is always appreciated! If you missed some existing API, someone will often reply with that info. :slightly_smiling_face:",
          "ts": "1666114437.170389",
          "thread_ts": "1666114271.918429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UJrf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Feedback is always appreciated! If you missed some existing API, someone will often reply with that info. "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a432c601-7dac-4151-985d-5ae758a567ec",
          "type": "message",
          "user": "U0464REPUJG",
          "text": "Filed as FB11701751",
          "ts": "1666115024.989069",
          "thread_ts": "1666114271.918429",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            },
            {
              "name": "raised_hands",
              "count": 1,
              "users": [
                "U0462SYEK5L"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "nBRS",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Filed as FB11701751"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1807c480-948e-4647-9f55-ef8e3f1038ed",
          "type": "message",
          "user": "U045J8S8JQZ",
          "text": "Thanks!",
          "ts": "1666115036.709269",
          "thread_ts": "1666114271.918429",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "hU9Z",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0476JSMVUH\u003e asked\n\u0026gt; Looking for best way to format navigation bars on a view by view basis. Currently using UIViewControllerRepresentable and applying appearance and scrollEdgeAppearance to the navigation controller, but would love to do within SwiftUI using modifiers.\n\u0026gt; ```\n\u0026gt; myView\n\u0026gt;  .navigationBarBackground(mode: .onlyWhenScrolling) {\n\u0026gt; Material.bar\n\u0026gt; }\n\u0026gt; ```\n\u0026gt; Just an example, but font colour, background, are a couple of things I'd like to customize both when and when not scrolling un my view.",
      "ts": "1666114322.191909",
      "thread_ts": "1666114322.191909",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666114582.403569",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Nfm",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0476JSMVUH"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Looking for best way to format navigation bars on a view by view basis. Currently using UIViewControllerRepresentable and applying appearance and scrollEdgeAppearance to the navigation controller, but would love to do within SwiftUI using modifiers.\\n```\\nmyView\\n .navigationBarBackground(mode: .onlyWhenScrolling) {\\nMaterial.bar\\n}\\n```\\nJust an example, but font colour, background, are a couple of things I'd like to customize both when and when not scrolling un my view.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "efe6c657-8648-41a6-9d27-6a5190a29e68",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "You can look at the toolbarBackground() modifier for some amount of the customization you are wanting (\u003chttps://developer.apple.com/documentation/swiftui/view/toolbarbackground(_:for:)-5ybst|docs here\u003e). Please file feedbacks for customization support you are still missing.",
          "ts": "1666114404.674199",
          "thread_ts": "1666114322.191909",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3hRo",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can look at the toolbarBackground() modifier for some amount of the customization you are wanting ("
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/view/toolbarbackground(_:for:)-5ybst",
                      "text": "docs here"
                    },
                    {
                      "type": "text",
                      "text": "). Please file feedbacks for customization support you are still missing."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b03dfef2-8cdf-453c-91dd-49139ae2b6d2",
          "type": "message",
          "user": "U0476JSMVUH",
          "text": "Thanks! I'm targeting iOS 15 at the moment, so I missed that, but I'll investigate and file feedback for the future.",
          "ts": "1666114582.403569",
          "thread_ts": "1666114322.191909",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0F1",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks! I'm targeting iOS 15 at the moment, so I missed that, but I'll investigate and file feedback for the future."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04731HHBGC\u003e asked\n\u0026gt; We have a SwiftUI View that has a @FocusState var called “focusedField” whose type is an enum. The view is being presented as a sheet on top of another view. In the sheet view, we are trying to set the focusedField to a particular value of the enum in the onAppear{…} function. However, it seems that the animation of presenting the sheet prevents the focusedField from actually setting its focus. Essentially, the view is not ready to set its focus yet (because it’s still being presented). If we put a slight delay when we call it in onAppear{…}, it works. It is almost like we need on “onDidAppear{…}”\n\u0026gt; \n\u0026gt; Do we need to do something special in a .sheet to set a @FocusState onAppear? Could the animation of presenting the sheet be conflicting with the animation of showing the keyboard (which would happen when the field gets focused)?",
      "ts": "1666114416.229509",
      "thread_ts": "1666114416.229509",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666116012.317779",
      "reactions": [
        {
          "name": "heavy_plus_sign",
          "count": 4,
          "users": [
            "U046LRM2C9Z",
            "U0478BVCWEM",
            "U04731HHBGC",
            "U0464M23S4C"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "+JNY",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04731HHBGC"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"We have a SwiftUI View that has a @FocusState var called \\u201cfocusedField\\u201d whose type is an enum. The view is being presented as a sheet on top of another view. In the sheet view, we are trying to set the focusedField to a particular value of the enum in the onAppear{\\u2026} function. However, it seems that the animation of presenting the sheet prevents the focusedField from actually setting its focus. Essentially, the view is not ready to set its focus yet (because it\\u2019s still being presented). If we put a slight delay when we call it in onAppear{\\u2026}, it works. It is almost like we need on \\u201conDidAppear{\\u2026}\\u201d\\n\\nDo we need to do something special in a .sheet to set a @FocusState onAppear? Could the animation of presenting the sheet be conflicting with the animation of showing the keyboard (which would happen when the field gets focused)?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "7f7430e6-41a8-43ff-8a2d-67d6d7ec5962",
          "type": "message",
          "user": "U044R32PW4X",
          "text": "Hi David, you shouldn't need to do anything special in that case, and it does indeed sound like the modal sheet presentation is interrupting the focus change. Could you file a file a feedback report about it? Include the # here and I can take a look.",
          "ts": "1666114436.218499",
          "thread_ts": "1666114416.229509",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YeZ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi David, you shouldn't need to do anything special in that case, and it does indeed sound like the modal sheet presentation is interrupting the focus change. Could you file a file a feedback report about it? Include the # here and I can take a look."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a18a172f-8e28-4eb5-a81d-61ba758e8748",
          "type": "message",
          "user": "U0478BVCWEM",
          "text": "David’s delay hack is a fairly widely used but imperfect solution to this.  An Apple API would be great.",
          "ts": "1666116012.317779",
          "thread_ts": "1666114416.229509",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "JaggT",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "David’s delay hack is a fairly widely used but imperfect solution to this.  An Apple API would be great."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046QGJ6B3M\u003e asked\n\u0026gt; Will there ever be a way to initialize a @StateObject in a view with parameters to that view struct?",
      "ts": "1666114562.693299",
      "thread_ts": "1666114562.693299",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 15,
      "latest_reply": "1666115662.703059",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "khcCZ",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046QGJ6B3M"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Will there ever be a way to initialize a @StateObject in a view with parameters to that view struct?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "9388091d-17d6-47fd-b187-c07471b6d116",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "It is possible to do that today by manually initializing the `@StateObject` in your init function:\n\n```@StateObject var store: Store\n\ninit(id: UUID) {\n    self._store = StateObject(wrappedValue: Store(id: id))\n}```",
          "ts": "1666114589.919339",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "raised_hands",
              "count": 3,
              "users": [
                "U045PHMLFFZ",
                "U046ETGSKNV",
                "U0464SKECHJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Jr7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It is possible to do that today by manually initializing the "
                    },
                    {
                      "type": "text",
                      "text": "@StateObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " in your init function:\n\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"@StateObject var store: Store\\n\\ninit(id: UUID) {\\n    self._store = StateObject(wrappedValue: Store(id: id))\\n}\"}],\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "01f3c2bf-7e7d-426f-822b-4729049c62e7",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Is that officially supported?",
          "ts": "1666114610.157159",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "k8NNI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Is that officially supported?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8457a539-13fc-4dfa-a823-e88a47bc4281",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "Yes, this is officially supported.",
          "ts": "1666114618.698869",
          "thread_ts": "1666114562.693299",
          "edited": {
            "user": "U045J8S9EU9",
            "ts": "1666114680.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Aczz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, this is officially supported."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f9420502-47a3-4152-889b-f61c7a63a1cc",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Oh wow. I thought it was something that might not work in future.",
          "ts": "1666114637.140559",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/GFuP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Oh wow. I thought it was something that might not work in future."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "02525c9f-177a-4fc9-bf9e-9d3d0a66f565",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "I asked two other questions about Nav Path and .onAppear yesterday; I hope you can get to them today. They're holding up my progress.",
          "ts": "1666114680.277309",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YvSDR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I asked two other questions about Nav Path and .onAppear yesterday; I hope you can get to them today. They're holding up my progress."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4d6be5f1-0aee-4cb7-88df-79833ff5576a",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "According to the documentation the following is stated:\n```You don't call this initializer directly. Instead, declare a property with the @StateObject attribute in a View, App, or Scene, and provide an initial value:```\n\u003chttps://developer.apple.com/documentation/swiftui/stateobject/init(wrappedvalue:)\u003e",
          "ts": "1666114774.111589",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "A8o",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "According to the documentation the following is stated:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"You don't call this initializer directly. Instead, declare a property with the @StateObject attribute in a View, App, or Scene, and provide an initial value:\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/stateobject/init(wrappedvalue:)",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2a9f9473-27fb-4fe4-a066-134d59aecb14",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "So i am a bit confused",
          "ts": "1666114813.755599",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6d2qv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "So i am a bit confused"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ffaa101d-101d-41e2-8799-1268eb945836",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "To clarify a bit more: The underbar definitely makes it look a bit spooky, but there’s nothing wrong with accessing the underlying storage. That note in the documentation is more trying to point people towards the most common usage so they don’t start out trying to initialize their property wrappers directly.\n\nAs a side note, trying to initialize `@State` through its storage _is_ something we’ve cautioned against in the past. Not because it doesn’t work, but because its behavior is rather confusing if you don’t deeply understand how `@State` and identity work.",
          "ts": "1666114908.835669",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "F4rOA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "To clarify a bit more: The underbar definitely makes it look a bit spooky, but there’s nothing wrong with accessing the underlying storage. That note in the documentation is more trying to point people towards the most common usage so they don’t start out trying to initialize their property wrappers directly.\n\nAs a side note, trying to initialize "
                    },
                    {
                      "type": "text",
                      "text": "@State",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " through its storage "
                    },
                    {
                      "type": "text",
                      "text": "is",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " something we’ve cautioned against in the past. Not because it doesn’t work, but because its behavior is rather confusing if you don’t deeply understand how "
                    },
                    {
                      "type": "text",
                      "text": "@State",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and identity work."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1c3c7ae8-a72f-4eda-a6cd-7dd899794a76",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "I suppose that the behavior for `@StateObject` also requires you to understand state and identity as well, but there are many more concrete use cases where it makes sense to do it, so we don’t warn against it as much.",
          "ts": "1666115014.185469",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4nB6O",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I suppose that the behavior for "
                    },
                    {
                      "type": "text",
                      "text": "@StateObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " also requires you to understand state and identity as well, but there are many more concrete use cases where it makes sense to do it, so we don’t warn against it as much."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e649f584-3ba7-49ea-a1d1-9798aae176e1",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "Hopefully that clears things up a bit :sweat_smile:",
          "ts": "1666115028.952799",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 3,
              "users": [
                "U0464SKECHJ",
                "U045ZA653NZ",
                "U046TPX8LN4"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+ZGc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hopefully that clears things up a bit "
                    },
                    {
                      "type": "emoji",
                      "name": "sweat_smile",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "564d351f-c9a9-455c-a18d-1541c5b27e61",
          "type": "message",
          "user": "U046797427P",
          "text": "\u003c@U045J8S9EU9\u003e, can you clarify that point re initializing `@State`? For instance, I have places where I initialize a variable (e.g., here a bool) by passing in a value to init and then `_disableTextFields = State(initialValue: !initialStateEditable)`",
          "ts": "1666115046.054779",
          "thread_ts": "1666114562.693299",
          "edited": {
            "user": "U046797427P",
            "ts": "1666115105.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "o2Sy",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U045J8S9EU9"
                    },
                    {
                      "type": "text",
                      "text": ", can you clarify that point re initializing "
                    },
                    {
                      "type": "text",
                      "text": "@State",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "? For instance, I have places where I initialize a variable (e.g., here a bool) by passing in a value to init and then "
                    },
                    {
                      "type": "text",
                      "text": "_disableTextFields = State(initialValue: !initialStateEditable)",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a798f5d8-8d8c-4849-a0ee-6266c95657c0",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "Thanks a lot \u003c@U045J8S9EU9\u003e \u003c@U045J8SG70R\u003e for the clarification.\nI often find myself wanting to create a `StateObject` from the parent view and pass it to the subview, is that an acceptable solution or not so preferred?",
          "ts": "1666115047.982839",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U046797427P"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ZeZ5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks a lot "
                    },
                    {
                      "type": "user",
                      "user_id": "U045J8S9EU9"
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "user",
                      "user_id": "U045J8SG70R"
                    },
                    {
                      "type": "text",
                      "text": " for the clarification.\nI often find myself wanting to create a "
                    },
                    {
                      "type": "text",
                      "text": "StateObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " from the parent view and pass it to the subview, is that an acceptable solution or not so preferred?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "451ea60b-f34e-4a8b-9243-346f0516da4b",
          "type": "message",
          "user": "U046797427P",
          "text": "~`_disableTextFields = State(initialValue: !initialStateEditable)`~",
          "ts": "1666115056.887609",
          "thread_ts": "1666114562.693299",
          "edited": {
            "user": "U046797427P",
            "ts": "1666115114.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "skyB5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "_disableTextFields = State(initialValue: !initialStateEditable)",
                      "style": {
                        "strike": true,
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2d4a6293-cad8-4d7d-b015-bde8d0f0baa4",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "\u003c@U046797427P\u003e I generally I think that if you need to pass data from the outside of a view it would be better to move to a `@StateObject` . We generally think of `@State` as local state to the view that is owned by the view itself.",
          "ts": "1666115438.354209",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 3,
              "users": [
                "U0464SKECHJ",
                "U046797427P",
                "U046YMT8Y58"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5D4d",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U046797427P"
                    },
                    {
                      "type": "text",
                      "text": " I generally I think that if you need to pass data from the outside of a view it would be better to move to a "
                    },
                    {
                      "type": "text",
                      "text": "@StateObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " . We generally think of "
                    },
                    {
                      "type": "text",
                      "text": "@State",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " as local state to the view that is owned by the view itself."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4348863d-6b0c-4ef8-9526-5efcfc36e29e",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "\u003c@U045J8SG70R\u003e Yeah I was using a `StateObject` (not `State`) model being passed from the parent view to the subview. This is a pattern I haven't noticed much else where and hence the question.",
          "ts": "1666115662.703059",
          "thread_ts": "1666114562.693299",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "R2kxa",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U045J8SG70R"
                    },
                    {
                      "type": "text",
                      "text": " Yeah I was using a "
                    },
                    {
                      "type": "text",
                      "text": "StateObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " (not "
                    },
                    {
                      "type": "text",
                      "text": "State",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ") model being passed from the parent view to the subview. This is a pattern I haven't noticed much else where and hence the question."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046V9VJB2P\u003e asked\n\u0026gt; Will the expanded San Francisco font family (Compressed, Condensed, and Extended) be making it to SwiftUI's Font? - FB10175453",
      "ts": "1666114575.886989",
      "thread_ts": "1666114575.886989",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666397448.696519",
      "reactions": [
        {
          "name": "heavy_plus_sign",
          "count": 2,
          "users": [
            "U0465AXV1J8",
            "U045PHMLFFZ"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "PT5C",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046V9VJB2P"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Will the expanded San Francisco font family (Compressed, Condensed, and Extended) be making it to SwiftUI's Font? - FB10175453\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "97916e43-2608-448d-a2c2-7a19050905c3",
          "type": "message",
          "user": "U044Z1BANMC",
          "text": "Yes, you can use the `fontWidth` modifier to access these.",
          "ts": "1666114631.537609",
          "thread_ts": "1666114575.886989",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U045PHMLFFZ"
              ]
            },
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U047LS5TFPA",
                "U0464M23S4C"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Pswh0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, you can use the "
                    },
                    {
                      "type": "text",
                      "text": "fontWidth",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " modifier to access these."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c651b2b2-ce21-4948-b2f4-b541b46eddde",
          "type": "message",
          "user": "U0469NB7686",
          "text": "Hmm I’m not sure fontWidth is working in the current XCode. I see it in the docs.",
          "ts": "1666397448.696519",
          "thread_ts": "1666114575.886989",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mjW",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hmm I’m not sure fontWidth is working in the current XCode. I see it in the docs."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046QNR7A8H\u003e asked\n\u0026gt; How do we add keyboard shortcuts for increment and decrement actions to SwiftUI Stepper (on MacOS)?",
      "ts": "1666114850.016449",
      "thread_ts": "1666114850.016449",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666117185.107589",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "9Xac",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046QNR7A8H"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How do we add keyboard shortcuts for increment and decrement actions to SwiftUI Stepper (on MacOS)?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "cbe357d3-7b85-4e0e-87bf-c848d93be4b7",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "A way to achieve near similar behavior would be to use `Command`s in menus to provide the same actions. Often, not always, there should be menu items to make it known what keyboard shortcuts are available. But if that doesn't suit your use case, we'd be interested in an Enhancement Request feedback for that.",
          "ts": "1666114944.094159",
          "thread_ts": "1666114850.016449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "uWyle",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A way to achieve near similar behavior would be to use "
                    },
                    {
                      "type": "text",
                      "text": "Command",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "s in menus to provide the same actions. Often, not always, there should be menu items to make it known what keyboard shortcuts are available. But if that doesn't suit your use case, we'd be interested in an Enhancement Request feedback for that."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "B41AD936-0B3F-48AD-8DA4-DE0321389974",
          "type": "message",
          "user": "U046QNR7A8H",
          "text": "Sure, will raise on feedback assistant :crossed_fingers::skin-tone-2:.",
          "ts": "1666117185.107589",
          "thread_ts": "1666114850.016449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "w2WNx",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Sure, will raise on feedback assistant "
                    },
                    {
                      "type": "emoji",
                      "name": "hand_with_index_and_middle_fingers_crossed",
                      "skin_tone": 2
                    },
                    {
                      "type": "text",
                      "text": "."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0466EASFPF\u003e asked\n\u0026gt; I'm using the new navigationLink value, in a navigation stack with a path to a @Published NavigationPath(), wich I then also include in the environment. In the simulator it works perfectly. But on a real device, it freezes the app, and I get the message in the console: Update NavigationRequestObserver tried to update multiple times per frame.\n\u0026gt; \n\u0026gt; I'm using Xcode 14.1 Beta 3, and the newest iOS 16.1 beta release(20B5072b) on a iPhone 12 Pro.\n\u0026gt; \n\u0026gt; Is this a bug with the beta and will be fixed before release, or am I doing something wrong?",
      "ts": "1666114966.543269",
      "thread_ts": "1666114966.543269",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666115363.450829",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "m90",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0466EASFPF"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I'm using the new navigationLink value, in a navigation stack with a path to a @Published NavigationPath(), wich I then also include in the environment. In the simulator it works perfectly. But on a real device, it freezes the app, and I get the message in the console: Update NavigationRequestObserver tried to update multiple times per frame.\\n\\nI'm using Xcode 14.1 Beta 3, and the newest iOS 16.1 beta release(20B5072b) on a iPhone 12 Pro.\\n\\nIs this a bug with the beta and will be fixed before release, or am I doing something wrong?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "59fc68fb-85ac-42df-af22-bbae8f0db1aa",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "Thanks for the question!\n\nThat error message sounds like the configuration is creating a race condition. That would also explain the difference in behavior on the simulator vs. on device. The simulator generally runs faster.\n\nTwo possible next steps:\n- Try only providing the navigation path in one way, such as passing your ObservableObject down and always reading the navigation path from it.\n- File a Feedback with your use case, and we can take a look at the issue.",
          "ts": "1666114984.587649",
          "thread_ts": "1666114966.543269",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "I3CD",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks for the question!\n\nThat error message sounds like the configuration is creating a race condition. That would also explain the difference in behavior on the simulator vs. on device. The simulator generally runs faster.\n\nTwo possible next steps:\n- Try only providing the navigation path in one way, such as passing your ObservableObject down and always reading the navigation path from it.\n- File a Feedback with your use case, and we can take a look at the issue."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "db4b66f7-0e4c-4f76-8a86-835736387ab8",
          "type": "message",
          "user": "U0466EASFPF",
          "text": "Thank you! I will try your first suggestion, if it doesn't solve it I'll file a feedback :slightly_smiling_face:",
          "ts": "1666115363.450829",
          "thread_ts": "1666114966.543269",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0455KK3NKU"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5cW",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you! I will try your first suggestion, if it doesn't solve it I'll file a feedback "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464SKECHJ\u003e asked\n\u0026gt; I am facing trouble with Transferable on macOS\n\u0026gt; - I am unable to work an app that heavily relies on drag and drop so I have shelved it.\n\u0026gt; - Unable to drag multiple car items from FolderDetail List \n\u0026gt; - Single items from a list are draggable but multiple items are not draggable.\n\u0026gt; \n\u0026gt; ## Code\n\u0026gt; ```\n\u0026gt; struct ContentView: View {\n\u0026gt;     \n\u0026gt;     @StateObject private var dataStore = DataStore()\n\u0026gt;     @State private var selectedFolder: Folder?\n\u0026gt; \n\u0026gt;     var body: some View {\n\u0026gt;         NavigationSplitView {\n\u0026gt;             FolderList(selectedFolder: $selectedFolder,\n\u0026gt;                        dataStore: dataStore)\n\u0026gt;         } detail: {\n\u0026gt;             FolderDetail(folder: selectedFolder,\n\u0026gt;                          dataStore: dataStore)\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; \n\u0026gt; struct FolderList: View {\n\u0026gt;     \n\u0026gt;     @Binding var selectedFolder: Folder?\n\u0026gt;     @ObservedObject var dataStore: DataStore\n\u0026gt;     \n\u0026gt;     var body: some View {\n\u0026gt;         List(dataStore.folders, selection: $selectedFolder) { folder in\n\u0026gt;             NavigationLink(value: folder) {\n\u0026gt;                 Text(folder.name)\n\u0026gt;                     .dropDestination(for: Car.self) { cars, location in\n\u0026gt;                         \n\u0026gt;                         print(\"cars = \\(cars) location = \\(location)\")\n\u0026gt;                         \n\u0026gt;                         if let existingCars = dataStore.cars[folder.id] {\n\u0026gt;                             dataStore.cars[folder.id] = existingCars + cars\n\u0026gt;                         } else {\n\u0026gt;                             dataStore.cars[folder.id] = cars\n\u0026gt;                         }\n\u0026gt;                         return true\n\u0026gt;                     }\n\u0026gt;             }\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; \n\u0026gt; struct FolderDetail: View {\n\u0026gt;     let folder: Folder?\n\u0026gt;     @ObservedObject var dataStore: DataStore\n\u0026gt; \n\u0026gt;     @State private var selectedCarIDs = Set\u0026lt;Int\u0026gt;()\n\u0026gt; \n\u0026gt;     var body: some View {\n\u0026gt;         if let folder {\n\u0026gt;             List(dataStore.cars[folder.id] ?? [], selection: $selectedCarIDs) { car in\n\u0026gt;                 Text(car.name)\n\u0026gt;                     .draggable(car)\n\u0026gt;             }\n\u0026gt; \n\u0026gt;         } else {\n\u0026gt;             Text(\"no folder selected\")\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; ```",
      "ts": "1666115021.884559",
      "thread_ts": "1666115021.884559",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 5,
      "latest_reply": "1666116266.015219",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "UuuY",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464SKECHJ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I am facing trouble with Transferable on macOS\\n- I am unable to work an app that heavily relies on drag and drop so I have shelved it.\\n- Unable to drag multiple car items from FolderDetail List \\n- Single items from a list are draggable but multiple items are not draggable.\\n\\n## Code\\n```\\nstruct ContentView: View {\\n    \\n    @StateObject private var dataStore = DataStore()\\n    @State private var selectedFolder: Folder?\\n\\n    var body: some View {\\n        NavigationSplitView {\\n            FolderList(selectedFolder: $selectedFolder,\\n                       dataStore: dataStore)\\n        } detail: {\\n            FolderDetail(folder: selectedFolder,\\n                         dataStore: dataStore)\\n        }\\n    }\\n}\\n\\nstruct FolderList: View {\\n    \\n    @Binding var selectedFolder: Folder?\\n    @ObservedObject var dataStore: DataStore\\n    \\n    var body: some View {\\n        List(dataStore.folders, selection: $selectedFolder) { folder in\\n            NavigationLink(value: folder) {\\n                Text(folder.name)\\n                    .dropDestination(for: Car.self) { cars, location in\\n                        \\n                        print(\\\"cars = \\\\(cars) location = \\\\(location)\\\")\\n                        \\n                        if let existingCars = dataStore.cars[folder.id] {\\n                            dataStore.cars[folder.id] = existingCars + cars\\n                        } else {\\n                            dataStore.cars[folder.id] = cars\\n                        }\\n                        return true\\n                    }\\n            }\\n        }\\n    }\\n}\\n\\nstruct FolderDetail: View {\\n    let folder: Folder?\\n    @ObservedObject var dataStore: DataStore\\n\\n    @State private var selectedCarIDs = Set\u003cInt\u003e()\\n\\n    var body: some View {\\n        if let folder {\\n            List(dataStore.cars[folder.id] ?? [], selection: $selectedCarIDs) { car in\\n                Text(car.name)\\n                    .draggable(car)\\n            }\\n\\n        } else {\\n            Text(\\\"no folder selected\\\")\\n        }\\n    }\\n}\\n```\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "0e2a30d3-f9b6-4a54-817b-ae211070c0c9",
          "type": "message",
          "user": "U045J8S8JQZ",
          "text": "Thank you for describing your use case! We are looking into ways to improve this, and in the meantime I’d suggest using `itemProvider` modifier instead of `draggable`",
          "ts": "1666115126.077529",
          "thread_ts": "1666115021.884559",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0464SKECHJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3=uu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you for describing your use case! We are looking into ways to improve this, and in the meantime I’d suggest using "
                    },
                    {
                      "type": "text",
                      "text": "itemProvider",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " modifier instead of "
                    },
                    {
                      "type": "text",
                      "text": "draggable",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "353b0ab0-92b8-44d6-b69b-6c1bf302aa87",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "Thanks a lot Julia, yeah I have been using `itemProvider` but it too has some odd limitations for which I have filed feedbacks. Hopefully after it is fixed I can resume my project.",
          "ts": "1666115254.188719",
          "thread_ts": "1666115021.884559",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lZK=U",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks a lot Julia, yeah I have been using "
                    },
                    {
                      "type": "text",
                      "text": "itemProvider",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " but it too has some odd limitations for which I have filed feedbacks. Hopefully after it is fixed I can resume my project."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "91d444ff-6ec6-4818-8e2d-dd0c05721632",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "\u003c@U045J8S8JQZ\u003e I am also facing trouble with `TransferRepresentation` on `macOS`.  (`iOS` works fine).\n\nDrag and Drop files from my app to the Finder doesn't work (same code works on iOS)\n\nIs that a known issue?\nFeedback - `FB11275037`",
          "ts": "1666115478.429379",
          "thread_ts": "1666115021.884559",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UEP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U045J8S8JQZ"
                    },
                    {
                      "type": "text",
                      "text": " I am also facing trouble with "
                    },
                    {
                      "type": "text",
                      "text": "TransferRepresentation",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " on "
                    },
                    {
                      "type": "text",
                      "text": "macOS",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ".  ("
                    },
                    {
                      "type": "text",
                      "text": "iOS",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " works fine).\n\nDrag and Drop files from my app to the Finder doesn't work (same code works on iOS)\n\nIs that a known issue?\nFeedback - "
                    },
                    {
                      "type": "text",
                      "text": "FB11275037",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e0d2ca7f-3034-4031-b615-cfebb1c25aba",
          "type": "message",
          "user": "U045J8S8JQZ",
          "text": "Yes, this is something that we are looking into. I’ve got this very feedback in my list of possible improvements",
          "ts": "1666115717.556989",
          "thread_ts": "1666115021.884559",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U0464SKECHJ"
              ]
            },
            {
              "name": "bow",
              "count": 1,
              "users": [
                "U0464SKECHJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ywJ2k",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, this is something that we are looking into. I’ve got this very feedback in my list of possible improvements"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1f12359e-7fa2-4221-a15b-086a35fb5e0f",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "\u003c@U045J8S8JQZ\u003e Feedback ID for original issue is `FB10128110` . Thanks a lot!!",
          "ts": "1666116266.015219",
          "thread_ts": "1666115021.884559",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U045J8S8JQZ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "aKMs",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U045J8S8JQZ"
                    },
                    {
                      "type": "text",
                      "text": " Feedback ID for original issue is "
                    },
                    {
                      "type": "text",
                      "text": "FB10128110",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " . Thanks a lot!!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04625MKBGT\u003e asked\n\u0026gt; navigationdestination weird behaviour why in some situations it just keep loading the same view again and again",
      "ts": "1666115050.106309",
      "thread_ts": "1666115050.106309",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666115200.580919",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "EnXEb",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04625MKBGT"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"navigationdestination weird behaviour why in some situations it just keep loading the same view again and again\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "722744a3-095c-44b9-b735-c67f76de8681",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "I’m sorry you’re having trouble with the API. We fixed a bug with that symptom in the 16.1 betas. Have you tried the latest beta?",
          "ts": "1666115092.112019",
          "thread_ts": "1666115050.106309",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9/Ey1",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m sorry you’re having trouble with the API. We fixed a bug with that symptom in the 16.1 betas. Have you tried the latest beta?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b21803b5-f7c9-4277-a3c2-4511e216dc0a",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "This is one of the questions I asked yesterday. In my app, it calls the router closure three times the first time the view appears, then twice every time after. Is that what you're seeing?",
          "ts": "1666115200.580919",
          "thread_ts": "1666115050.106309",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "JTMUB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This is one of the questions I asked yesterday. In my app, it calls the router closure three times the first time the view appears, then twice every time after. Is that what you're seeing?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045ZGP2QCV\u003e asked\n\u0026gt; `Label` is sometimes (mis)used to provide a text caption for a value (e.g., Account balance $10), but some developers didn't realize the caption would not be read in VoiceOver. Aside from us creating a `LabeledValue` component, does SwiftUI ship with a solution?",
      "ts": "1666115054.768439",
      "thread_ts": "1666115054.768439",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 3,
      "latest_reply": "1666115211.227279",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "lHyzE",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045ZGP2QCV"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"`Label` is sometimes (mis)used to provide a text caption for a value (e.g., Account balance $10), but some developers didn't realize the caption would not be read in VoiceOver. Aside from us creating a `LabeledValue` component, does SwiftUI ship with a solution?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "80fc0e16-4f4f-48c1-895c-2586712ada72",
          "type": "message",
          "user": "U044G2H5KEX",
          "text": "SwiftUI now has a `LabeledContent` view which you may use to annotate some content with a label. \u003chttps://developer.apple.com/documentation/swiftui/labeledcontent\u003e",
          "ts": "1666115082.659799",
          "thread_ts": "1666115054.768439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "XCln",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "SwiftUI now has a "
                    },
                    {
                      "type": "text",
                      "text": "LabeledContent",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " view which you may use to annotate some content with a label. "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/labeledcontent",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d49e5a24-e9ca-4fe3-aee8-b75f6518f0d4",
          "type": "message",
          "user": "U044G2H5KEX",
          "text": "`LabeledContent` even has built in formatter support if you're labeling forgettable content! i.e. `LabeledContent(\"Age\", value: person.age, format: .number)`",
          "ts": "1666115169.213269",
          "thread_ts": "1666115054.768439",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart_eyes",
              "count": 1,
              "users": [
                "U046JMFLKV3"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "KhbB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "LabeledContent",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " even has built in formatter support if you're labeling forgettable content! i.e. "
                    },
                    {
                      "type": "text",
                      "text": "LabeledContent(\"Age\", value: person.age, format: .number)",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "612151b8-9d26-401f-8583-0764971ac727",
          "type": "message",
          "user": "U045ZGP2QCV",
          "text": "Nice, looks like I'll deprecate our own component behind a back port. Thanks for introducing this! Nearly identical API.",
          "ts": "1666115211.227279",
          "thread_ts": "1666115054.768439",
          "edited": {
            "user": "U045ZGP2QCV",
            "ts": "1666115224.000000"
          },
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "star-struck",
              "count": 1,
              "users": [
                "U044G2H5KEX"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0PQ0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Nice, looks like I'll deprecate our own component behind a back port. Thanks for introducing this! Nearly identical API."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045PTKE1CP\u003e asked\n\u0026gt; I know SwiftUI is based on ResultBuilder. So `if` statement acts by tree structure with `buildEither`. Then is there any cautions about using `if` statement in SwiftUI ?",
      "ts": "1666115166.475829",
      "thread_ts": "1666115166.475829",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666115188.705729",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "qSm",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045PTKE1CP"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I know SwiftUI is based on ResultBuilder. So `if` statement acts by tree structure with `buildEither`. Then is there any cautions about using `if` statement in SwiftUI ?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "376b5475-6abc-4513-ad0a-bd161f86a19a",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "The more interesting thing about `if/else` is how they affect the identity of the view. We have a great talk from WWDC that goes into more details about this: \u003chttps://developer.apple.com/videos/play/wwdc2021/10022/\u003e",
          "ts": "1666115188.705729",
          "thread_ts": "1666115166.475829",
          "attachments": [
            {
              "fallback": "Apple Developer: Demystify SwiftUI - WWDC21 - Videos - Apple Developer",
              "id": 1,
              "title": "Demystify SwiftUI - WWDC21 - Videos - Apple Developer",
              "title_link": "https://developer.apple.com/videos/play/wwdc2021/10022/",
              "text": "Peek behind the curtain into the core tenets of SwiftUI philosophy: Identity, Lifetime, and Dependencies. Find out about common patterns,...",
              "image_url": "https://devimages-cdn.apple.com/wwdc-services/images/119/4888/4888_wide_250x141_2x.jpg",
              "service_name": "Apple Developer",
              "service_icon": "https://developer.apple.com/favicon.ico",
              "from_url": "https://developer.apple.com/videos/play/wwdc2021/10022/",
              "original_url": "https://developer.apple.com/videos/play/wwdc2021/10022/",
              "blocks": null
            }
          ],
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "100",
              "count": 3,
              "users": [
                "U0468P6C81G",
                "U045PTKE1CP",
                "U046SQYESLQ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "DZvUf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The more interesting thing about "
                    },
                    {
                      "type": "text",
                      "text": "if/else",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " is how they affect the identity of the view. We have a great talk from WWDC that goes into more details about this: "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/videos/play/wwdc2021/10022/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045WJCT7GW\u003e asked\n\u0026gt; What is the proper way to set a @State var value at init time? I know that @State is supposed to be an internal value but there are occasions where we need to pass in a value from an external source and using .onAppear doesn't seem to always be possible or reliable.",
      "ts": "1666115341.093579",
      "thread_ts": "1666115341.093579",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 3,
      "latest_reply": "1666422229.490329",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "5c3L",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045WJCT7GW"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What is the proper way to set a @State var value at init time? I know that @State is supposed to be an internal value but there are occasions where we need to pass in a value from an external source and using .onAppear doesn't seem to always be possible or reliable.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "5aab9490-263b-4320-9167-f7585c2dd526",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "This thread my be useful: \u003chttps://appledeveloper.slack.com/archives/C043025CS59/p1666114562693299\u003e",
          "ts": "1666115356.065159",
          "thread_ts": "1666115341.093579",
          "attachments": [
            {
              "fallback": "[October 18th, 2022 10:36 AM] Ask Apple - swiftui: \u003c@U046QGJ6B3M\u003e asked\n\u0026gt; Will there ever be a way to initialize a @StateObject in a view with parameters to that view struct?",
              "id": 1,
              "author_subname": "Ask Apple - swiftui",
              "author_link": "https://appledeveloper.slack.com/services/B043UB9BUQG",
              "author_icon": "https://avatars.slack-edge.com/2022-09-20/4120370126929_5cc197cf176b16fbc203_48.png",
              "text": "\u003c@U046QGJ6B3M\u003e asked\n\u0026gt; Will there ever be a way to initialize a @StateObject in a view with parameters to that view struct?",
              "from_url": "https://appledeveloper.slack.com/archives/C043025CS59/p1666114562693299",
              "original_url": "https://appledeveloper.slack.com/archives/C043025CS59/p1666114562693299",
              "mrkdwn_in": [
                "text"
              ],
              "blocks": null,
              "footer": "Thread in #swiftui",
              "ts": 1666114562.693299
            }
          ],
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "X1=k",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This thread my be useful: "
                    },
                    {
                      "type": "link",
                      "url": "https://appledeveloper.slack.com/archives/C043025CS59/p1666114562693299",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f781241e-abc1-4d8f-ab3c-1e6e57146af8",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "The problem is that\n```init(id: UUID) {\n    self._store = StateObject(wrappedValue: Store(id: id))\n}```\ndoesn’t always work for some reason. Maybe `didSet` isn’t called when this is done?",
          "ts": "1666115564.170969",
          "thread_ts": "1666115341.093579",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "sNig",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The problem is that\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"init(id: UUID) {\\n    self._store = StateObject(wrappedValue: Store(id: id))\\n}\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "doesn’t always work for some reason. Maybe "
                    },
                    {
                      "type": "text",
                      "text": "didSet",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " isn’t called when this is done?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "cd7c2c7d-18b7-4a53-89ad-8360491904a5",
          "type": "message",
          "user": "U0466VBE92Q",
          "text": "\u003c@U045WJCT7GW\u003e it will only initialize with that passed in value the very first time the View is created.",
          "ts": "1666422229.490329",
          "thread_ts": "1666115341.093579",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "YhYHs",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U045WJCT7GW"
                    },
                    {
                      "type": "text",
                      "text": " it will only initialize with that passed in value the very first time the View is created."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045PHMLFFZ\u003e asked\n\u0026gt; This might be a really stupid question, but I’ve always been confused about Form() vs List(). What’s the difference between them and when should you use Form() vs List() and vice versa? Thanks! :D",
      "ts": "1666115348.992529",
      "thread_ts": "1666115348.992529",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 3,
      "latest_reply": "1666115976.539169",
      "reactions": [
        {
          "name": "heart",
          "count": 1,
          "users": [
            "U046YMT8Y58"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "K4g8",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045PHMLFFZ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"This might be a really stupid question, but I\\u2019ve always been confused about Form() vs List(). What\\u2019s the difference between them and when should you use Form() vs List() and vice versa? Thanks! :D\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "af4e11ed-c8c5-4d3a-99ab-57790a76e744",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "A form is a way to group many related controls together in a layout appropriate for each platform. While a form and a list look similar on iOS, if you look at macOS you’ll see how the ideal layout for that platform differs. Many controls will look and behave different in a form compared to a list on macOS.\n\nUnlike a form, a list has built in support for dealing with selection so and is meant for displaying scrollable amounts of data.\n\nSo if you are creating a view to display scrollable amounts of content that may interact with selection, using a List will have the best default experience across iOS and macOS. Using a form will have the best default experience across iOS and macOS if you are rendering many related controls.",
          "ts": "1666115448.601059",
          "thread_ts": "1666115348.992529",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "JNehL",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A form is a way to group many related controls together in a layout appropriate for each platform. While a form and a list look similar on iOS, if you look at macOS you’ll see how the ideal layout for that platform differs. Many controls will look and behave different in a form compared to a list on macOS.\n\nUnlike a form, a list has built in support for dealing with selection so and is meant for displaying scrollable amounts of data.\n\nSo if you are creating a view to display scrollable amounts of content that may interact with selection, using a List will have the best default experience across iOS and macOS. Using a form will have the best default experience across iOS and macOS if you are rendering many related controls."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9e955a8d-dc71-4826-a75c-e2dc9be14be3",
          "type": "message",
          "user": "U03V30M0C1K",
          "text": "(pssssst not a stupid question!!!)",
          "ts": "1666115560.428149",
          "thread_ts": "1666115348.992529",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "point_up_2::skin-tone-2",
              "count": 3,
              "users": [
                "U0468P6C81G",
                "U045PHMLFFZ",
                "U046F4A0AKB"
              ]
            },
            {
              "name": "stars",
              "count": 3,
              "users": [
                "U0464REPUJG",
                "U045PHMLFFZ",
                "U0464NE480L"
              ]
            },
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U0465R7QB3N",
                "U0462658691"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "VRsst",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "(pssssst not a stupid question!!!)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "65BA7645-F049-4581-8063-095AD37F3AFC",
          "type": "message",
          "user": "U045PHMLFFZ",
          "text": "\u003c@U03V30M0C1K\u003e \u003c@U0455KK9C2W\u003e Thank you both so much! Really appreciate your answers! :D",
          "ts": "1666115976.539169",
          "thread_ts": "1666115348.992529",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "HCz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U03V30M0C1K"
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "user",
                      "user_id": "U0455KK9C2W"
                    },
                    {
                      "type": "text",
                      "text": " Thank you both so much! Really appreciate your answers! :D"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045TJQ0J8P\u003e asked\n\u0026gt; I am using the symbolSize(by:) method in a chart. Because the values are in millions (population), the automatic chart legend shows the different symbol sizes with the corresponding values. However these are shown in scientific notation (2.5E6 for 2,500,000). Is there a way of changing the number format? Is there a way of customizing the legend? I know you can provide your own view, but it is impossible to determine the different sizes in the chartLegend closure.",
      "ts": "1666115364.961809",
      "thread_ts": "1666115364.961809",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666115602.841559",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "jSF4",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045TJQ0J8P"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I am using the symbolSize(by:) method in a chart. Because the values are in millions (population), the automatic chart legend shows the different symbol sizes with the corresponding values. However these are shown in scientific notation (2.5E6 for 2,500,000). Is there a way of changing the number format? Is there a way of customizing the legend? I know you can provide your own view, but it is impossible to determine the different sizes in the chartLegend closure.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "5ae3f3fe-9f72-423b-8e3d-76a050e7770b",
          "type": "message",
          "user": "U045QD234AJ",
          "text": "There isn't a way to customize the legend right now, except to replace it with your own view. You can use a `.chartSymbolSizeScale(domain: 0 ... 2500000, range: 0 ... 1000)` to fully specify the symbol size scale, this allows you to do your own math to calculate the size of the symbol (e.g., `size = value / 2500000 * 1000`), and then draw the legend with the correct size and label. Note that the size is measured as the area of a circle.",
          "ts": "1666115423.617889",
          "thread_ts": "1666115364.961809",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "m7R66",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There isn't a way to customize the legend right now, except to replace it with your own view. You can use a "
                    },
                    {
                      "type": "text",
                      "text": ".chartSymbolSizeScale(domain: 0 ... 2500000, range: 0 ... 1000)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to fully specify the symbol size scale, this allows you to do your own math to calculate the size of the symbol (e.g., "
                    },
                    {
                      "type": "text",
                      "text": "size = value / 2500000 * 1000",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "), and then draw the legend with the correct size and label. Note that the size is measured as the area of a circle."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b6ac875c-988e-4f66-8fc3-3c7f06c2ce4c",
          "type": "message",
          "user": "U045TJQ0J8P",
          "text": "That’s perfect! Thank you!",
          "ts": "1666115602.841559",
          "thread_ts": "1666115364.961809",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U045QD234AJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "I4k3I",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s perfect! Thank you!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046F4RN341\u003e asked\n\u0026gt; My macOS SwiftUI app was rejected by App Review because it violated a HCI guideline where the Window menu did not contain an entry for re-opening the main window (Cmd+0) when it is closed. I was not able to find a way to do this in SwiftUI so App Review accepted my workaround of quitting the app when the main window is closed. The workaround is not ideal so I’m wondering if it’s possible to make the app compliant to the HCI using just SwiftUI.",
      "ts": "1666115387.310149",
      "thread_ts": "1666115387.310149",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 5,
      "latest_reply": "1666115896.685709",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "VWF",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046F4RN341"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"My macOS SwiftUI app was rejected by App Review because it violated a HCI guideline where the Window menu did not contain an entry for re-opening the main window (Cmd+0) when it is closed. I was not able to find a way to do this in SwiftUI so App Review accepted my workaround of quitting the app when the main window is closed. The workaround is not ideal so I\\u2019m wondering if it\\u2019s possible to make the app compliant to the HCI using just SwiftUI.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "fe434b95-8174-4435-a156-f6d6d5cbfc09",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "Hi - sorry you ran into issues with App Review here. For the `WindowGroup` scene, we add a menu item by default to the `File` menu, for creating new window instances tied to that scene.\n\nAs of macOS Ventura, we also added a new scene type, `Window`, which creates a menu item in the window menu. An App defined with a single `Window` instance will also quit when the window itself is closed.\n\nThese menu items can also be customized via the `keyboardShortcut` modifier.\n\nIf you haven’t already, could you please file a feedback on your issue? I’d like to make sure we investigate why App Review rejected your app as well.",
          "ts": "1666115456.317529",
          "thread_ts": "1666115387.310149",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3kShP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi - sorry you ran into issues with App Review here. For the "
                    },
                    {
                      "type": "text",
                      "text": "WindowGroup",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " scene, we add a menu item by default to the "
                    },
                    {
                      "type": "text",
                      "text": "File",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " menu, for creating new window instances tied to that scene.\n\nAs of macOS Ventura, we also added a new scene type, "
                    },
                    {
                      "type": "text",
                      "text": "Window",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", which creates a menu item in the window menu. An App defined with a single "
                    },
                    {
                      "type": "text",
                      "text": "Window",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " instance will also quit when the window itself is closed.\n\nThese menu items can also be customized via the "
                    },
                    {
                      "type": "text",
                      "text": "keyboardShortcut",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " modifier.\n\nIf you haven’t already, could you please file a feedback on your issue? I’d like to make sure we investigate why App Review rejected your app as well."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ED062AA2-F2E4-4F2F-BD97-868FCB3A6530",
          "type": "message",
          "user": "U046F4RN341",
          "text": "I had filed FB9855975 a while ago",
          "ts": "1666115733.227169",
          "thread_ts": "1666115387.310149",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "XsV",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I had filed FB9855975 a while ago"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "D747FF2D-AB25-4112-9952-98C94322CAFF",
          "type": "message",
          "user": "U046F4RN341",
          "text": "I used AppDelegate to force the app to quit when all the windows are closed and that satisfied appreview",
          "ts": "1666115777.627209",
          "thread_ts": "1666115387.310149",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OAl",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I used AppDelegate to force the app to quit when all the windows are closed and that satisfied appreview"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "584FF951-E500-42C1-8DBC-101B20DE75BD",
          "type": "message",
          "user": "U046F4RN341",
          "text": "But I think developers who want to support macos 11 and 12 still has to use windowgroup and are still subject to this issue when they try to submit their app to the MAS",
          "ts": "1666115819.293469",
          "thread_ts": "1666115387.310149",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "eWR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "But I think developers who want to support macos 11 and 12 still has to use windowgroup and are still subject to this issue when they try to submit their app to the MAS"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "57afc8a1-4453-4bb8-a929-80f09d5f5e73",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "Ok, thank you for the info.",
          "ts": "1666115896.685709",
          "thread_ts": "1666115387.310149",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U046F4RN341"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+WQ3l",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok, thank you for the info."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "2a7fb5ed-e5ed-4cfb-b787-357cea1141ee",
      "type": "message",
      "user": "U0453US3GAJ",
      "text": "We’ve gotten questions about custom styles in widgets. :thread:",
      "ts": "1666115403.004679",
      "thread_ts": "1666115403.004679",
      "reply_count": 15,
      "latest_reply": "1666379091.663329",
      "team": "T03U5MWB2FN",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Exp",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "We’ve gotten questions about custom styles in widgets. "
                },
                {
                  "type": "emoji",
                  "name": "thread",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "643a7d6b-0597-4cfc-903c-7d8d11623805",
          "type": "message",
          "user": "U0455RVLUQG",
          "text": "We’d love to know more about what kinds of views you’re looking to style.",
          "ts": "1666115420.128539",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5eZr0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "We’d love to know more about what kinds of views you’re looking to style."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3848cc23-00c2-4887-b010-510b1593f551",
          "type": "message",
          "user": "U0441J2N9FH",
          "text": "\u003c@U047JR6V6AC\u003e, I think you were one of the folks asking?",
          "ts": "1666115480.520339",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+OU",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U047JR6V6AC"
                    },
                    {
                      "type": "text",
                      "text": ", I think you were one of the folks asking?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "dc771a53-7696-407e-9a2c-c97df98d87bd",
          "type": "message",
          "user": "U047JR6V6AC",
          "text": "Yes! Thanks for the mention! I would love a way to be able to apply a custom style to ProgressView when that ProgressView uses a timerInterval initializer",
          "ts": "1666115514.129809",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0478BJ4UPK"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6VtS",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes! Thanks for the mention! I would love a way to be able to apply a custom style to ProgressView when that ProgressView uses a timerInterval initializer"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d2a7aa01-d3a5-4518-a69e-12ad4bb9080c",
          "type": "message",
          "user": "U047JR6V6AC",
          "text": "A couple of these views, ProgressView and Text, both have these type of initializers but there's not much of a way to customize their behavior beyond that. They're really awesome in that they can self update and provide a seemingly animating view within a Widget or Live Activity. I was a little confused with playing around with them since ProgressView natively supports a ProgressViewStyle modifier, but it does not work with the self-updating variants.",
          "ts": "1666115616.258399",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mneQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A couple of these views, ProgressView and Text, both have these type of initializers but there's not much of a way to customize their behavior beyond that. They're really awesome in that they can self update and provide a seemingly animating view within a Widget or Live Activity. I was a little confused with playing around with them since ProgressView natively supports a ProgressViewStyle modifier, but it does not work with the self-updating variants."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "38e69a4d-3c9a-45bf-9eb2-8d409e9f6716",
          "type": "message",
          "user": "U0478BJ4UPK",
          "text": "Yes, what \u003c@U047JR6V6AC\u003e said! ProgressViewStyle is great, but its `fractionCompleted` value is always nil if progress is relative to a date interval.",
          "ts": "1666115621.210039",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OM0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes, what "
                    },
                    {
                      "type": "user",
                      "user_id": "U047JR6V6AC"
                    },
                    {
                      "type": "text",
                      "text": " said! ProgressViewStyle is great, but its "
                    },
                    {
                      "type": "text",
                      "text": "fractionCompleted",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " value is always nil if progress is relative to a date interval."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "deaf53a9-d204-4f28-9738-0843cccf99eb",
          "type": "message",
          "user": "U0478BJ4UPK",
          "text": "(per \u003chttps://developer.apple.com/documentation/swiftui/progressviewstyleconfiguration/fractioncompleted\u003e)",
          "ts": "1666115641.243819",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=0L",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "(per "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/progressviewstyleconfiguration/fractioncompleted",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": ")"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1392cd80-49ee-46e5-a8d9-1a84e77347c8",
          "type": "message",
          "user": "U0455RVLUQG",
          "text": "Ooh. I think I see how that can happen \u003c@U0478BJ4UPK\u003e! Would you or \u003c@U047JR6V6AC\u003e mind filing a Feedback \u003chttps://feedbackassistant.apple.com/\u003e with a sample project?",
          "ts": "1666115724.677819",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heavy_check_mark",
              "count": 1,
              "users": [
                "U0478BJ4UPK"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "nGv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ooh. I think I see how that can happen "
                    },
                    {
                      "type": "user",
                      "user_id": "U0478BJ4UPK"
                    },
                    {
                      "type": "text",
                      "text": "! Would you or "
                    },
                    {
                      "type": "user",
                      "user_id": "U047JR6V6AC"
                    },
                    {
                      "type": "text",
                      "text": " mind filing a Feedback "
                    },
                    {
                      "type": "link",
                      "url": "https://feedbackassistant.apple.com/",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": " with a sample project?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9e75a749-e0e3-4e5a-b6ba-d52df5ff0774",
          "type": "message",
          "user": "U0455RVLUQG",
          "text": "Thank you \u003c@U0478BJ4UPK\u003e ! (and \u003c@U047JR6V6AC\u003e !)",
          "ts": "1666115878.475649",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "partying_face",
              "count": 1,
              "users": [
                "U0453US3GAJ"
              ]
            },
            {
              "name": "100",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "qTr",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you "
                    },
                    {
                      "type": "user",
                      "user_id": "U0478BJ4UPK"
                    },
                    {
                      "type": "text",
                      "text": " ! (and "
                    },
                    {
                      "type": "user",
                      "user_id": "U047JR6V6AC"
                    },
                    {
                      "type": "text",
                      "text": " !)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7be7398d-f21c-413a-bfbc-c0557800f787",
          "type": "message",
          "user": "U047JR6V6AC",
          "text": "Sure thing, will link that back here once I upload it! Thank you!",
          "ts": "1666115919.568759",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 3,
              "users": [
                "U0441J2N9FH",
                "U0455RVLUQG",
                "U0478BJ4UPK"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lxZJY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Sure thing, will link that back here once I upload it! Thank you!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9fc0fe1e-7b9e-4036-95e3-cd6fcc1e5185",
          "type": "message",
          "user": "U0464REPUJG",
          "text": "I had to abandon using `Button` in one of my macOS app's Swift UI views because I could not style it the way I wanted.\n\nI wanted no border, a custom-colored background that appears on mouse-down (and disappears on mouse up), an image in the middle, and the ability to support a right-click/Control-click context menu plus and any other kind of modifier-clicks. I could not bend `Button` to my will, even with a custom `ButtonStyle`",
          "ts": "1666115990.547559",
          "thread_ts": "1666115403.004679",
          "edited": {
            "user": "U0464REPUJG",
            "ts": "1666116044.000000"
          },
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lBV",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I had to abandon using "
                    },
                    {
                      "type": "text",
                      "text": "Button",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " in one of my macOS app's Swift UI views because I could not style it the way I wanted.\n\nI wanted no border, a custom-colored background that appears on mouse-down (and disappears on mouse up), an image in the middle, and the ability to support a right-click/Control-click context menu plus and any other kind of modifier-clicks. I could not bend "
                    },
                    {
                      "type": "text",
                      "text": "Button",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to my will, even with a custom "
                    },
                    {
                      "type": "text",
                      "text": "ButtonStyle",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4a3040a2-7284-4546-98b1-0b90dd5c93f2",
          "type": "message",
          "user": "U0478BJ4UPK",
          "text": "\u003c@U0464REPUJG\u003e In my experience, the visual styling you want should all be doable. But supporting right-click or any other gestures on a Button has never worked AFAIK. I do something similar in one of my apps and had to use a custom NSButton.",
          "ts": "1666116189.603999",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5bPPc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0464REPUJG"
                    },
                    {
                      "type": "text",
                      "text": " In my experience, the visual styling you want should all be doable. But supporting right-click or any other gestures on a Button has never worked AFAIK. I do something similar in one of my apps and had to use a custom NSButton."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "087c70b0-4b1b-4e11-9fb8-8b49d763930c",
          "type": "message",
          "user": "U0464REPUJG",
          "text": "The mouse-down/up handling in particular seemed wonky to me. My button is also in the middle of a view that accepts drag-and-drop, and hovering a dragged item over the button would often trigger its mouse-down background color to appear…and get stuck that way until clicked. Since I don't have the source to `Button`, I don't know where things were going wrong.",
          "ts": "1666116284.731499",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "100",
              "count": 1,
              "users": [
                "U0478BJ4UPK"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zGh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The mouse-down/up handling in particular seemed wonky to me. My button is also in the middle of a view that accepts drag-and-drop, and hovering a dragged item over the button would often trigger its mouse-down background color to appear…and get stuck that way until clicked. Since I don't have the source to "
                    },
                    {
                      "type": "text",
                      "text": "Button",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", I don't know where things were going wrong."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e8264e59-b6c5-42f0-9b35-7a1704f177c5",
          "type": "message",
          "user": "U0464REPUJG",
          "text": "I ended up having to implement my own sort of button-like thing by trying to handle mouse-down/up events, drag events, modifier-click events, etc. It's a bit of a mess! (But it still works better than trying to use `Button`)",
          "ts": "1666116346.595439",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "wRE9r",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I ended up having to implement my own sort of button-like thing by trying to handle mouse-down/up events, drag events, modifier-click events, etc. It's a bit of a mess! (But it still works better than trying to use "
                    },
                    {
                      "type": "text",
                      "text": "Button",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ")"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f40b8653-752f-49f7-9e1e-fd156880715b",
          "type": "message",
          "user": "U0455RVLUQG",
          "text": "\u003c@U0464REPUJG\u003e wow, curious what's going on there! Would love to look at a Feedback if you wouldn't mind filing.",
          "ts": "1666116876.735799",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=EQ6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0464REPUJG"
                    },
                    {
                      "type": "text",
                      "text": " wow, curious what's going on there! Would love to look at a Feedback if you wouldn't mind filing."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d518fd98-bac5-493b-8917-5c4d01075421",
          "type": "message",
          "user": "U047JR6V6AC",
          "text": "Am briefly able to post, so \u003c@U0455RVLUQG\u003e FB11701889. Thanks so much again!",
          "ts": "1666379091.663329",
          "thread_ts": "1666115403.004679",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U0441J2N9FH",
                "U0455RVLUQG"
              ]
            },
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0455RVLUQG"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "T2R",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Am briefly able to post, so "
                    },
                    {
                      "type": "user",
                      "user_id": "U0455RVLUQG"
                    },
                    {
                      "type": "text",
                      "text": " FB11701889. Thanks so much again!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046LD3LP7U\u003e asked\n\u0026gt; I'm using SwiftUI for the content view of a sheet I'd like to display in an app mostly written in AppKit. What is the best way to have the sheet auto size itself to fit the content of the SwiftUI view I want to display? If I just create an NSHostingController wrapping the view and present it using NSViewController.presentAsSheet(), it shows up super small. The SwiftUI view is just a bunch of checkboxes and buttons, so it should have an intrinsic size that the sheet can use, I just can't figure out how to get AppKit to size the sheet properly.",
      "ts": "1666115483.765239",
      "thread_ts": "1666115483.765239",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666115545.054879",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Tvhm",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046LD3LP7U"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I'm using SwiftUI for the content view of a sheet I'd like to display in an app mostly written in AppKit. What is the best way to have the sheet auto size itself to fit the content of the SwiftUI view I want to display? If I just create an NSHostingController wrapping the view and present it using NSViewController.presentAsSheet(), it shows up super small. The SwiftUI view is just a bunch of checkboxes and buttons, so it should have an intrinsic size that the sheet can use, I just can't figure out how to get AppKit to size the sheet properly.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "7e57f546-c441-4e22-aee7-0aa8e9cfe28d",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "This sounds like a bug. Can you file a feedback and follow up here with the number?",
          "ts": "1666115522.672659",
          "thread_ts": "1666115483.765239",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "tdT4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This sounds like a bug. Can you file a feedback and follow up here with the number?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c390f1f3-3c90-48e6-9100-56aa57177130",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "Any sort of sample project would be very helpful because I haven't seen something like this before.",
          "ts": "1666115545.054879",
          "thread_ts": "1666115483.765239",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Wvi",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Any sort of sample project would be very helpful because I haven't seen something like this before."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "7abab6be-746a-4e62-a735-0e8744407a11",
      "type": "message",
      "user": "U045J8S9EU9",
      "text": ":mega: Hi all! Thank you for the amazing questions, it’s been a blast answering them. We’ve got a few more minutes to answer your questions, so get those last ones in now as we’ll be closing the workflow soon.\n\nWhile you’re at it, mark your calendars! because our next activity, Compose custom layouts with SwiftUI, will take place on _Thursday at 1PM PST_. Please wait to submit your questions for that event until our current event has concluded. Scoping your questions to the upcoming Q\u0026amp;A activity will help us answer more questions efficiently! Thank you for understanding!",
      "ts": "1666115524.739759",
      "thread_ts": "1666115524.739759",
      "reply_count": 2,
      "latest_reply": "1666116277.459449",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "+1",
          "count": 3,
          "users": [
            "U045LLLQHLM",
            "U045PHMLFFZ",
            "U046252SCGK"
          ]
        },
        {
          "name": "alarm_clock",
          "count": 3,
          "users": [
            "U03V30M0C1K",
            "U0453US3GAJ",
            "U045PHMLFFZ"
          ]
        },
        {
          "name": "smiling_face_with_tear",
          "count": 2,
          "users": [
            "U047LS5TFPA",
            "U045PHMLFFZ"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "RUN",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "emoji",
                  "name": "mega",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " Hi all! Thank you for the amazing questions, it’s been a blast answering them. We’ve got a few more minutes to answer your questions, so get those last ones in now as we’ll be closing the workflow soon.\n\nWhile you’re at it, mark your calendars! because our next activity, Compose custom layouts with SwiftUI, will take place on "
                },
                {
                  "type": "text",
                  "text": "Thursday at 1PM PST",
                  "style": {
                    "italic": true
                  }
                },
                {
                  "type": "text",
                  "text": ". Please wait to submit your questions for that event until our current event has concluded. Scoping your questions to the upcoming Q\u0026A activity will help us answer more questions efficiently! Thank you for understanding!"
                }
              ]
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "42d8357f-eb00-40ea-8678-c3bbec26a2fe",
          "type": "message",
          "user": "U045Z2GB294",
          "text": "Hi, I have a problem using LazyVStack ,  VStack inside LazyVStack will lost State when off screen.\n\nimport SwiftUI\n\nclass LazyTestViewModel: ObservableObject {\n  @Published var color: Color = .red\n  var index: Int\n  init(index: Int) {\n    self.index = index\n    print(“===\u0026gt;\u0026gt;\u0026gt; LazyTestViewModel init \\(index)“)\n  }\n\n  deinit {\n    print(“===\u0026gt;\u0026gt;\u0026gt; LazyTestViewModel deinit \\(index)“)\n  }\n}\n\nstruct LazyTestItem: View {\n  @StateObject var vm: LazyTestViewModel\n  @State var title: String\n  let index: Int\n\n  init(index: Int) {\n    self.index = index\n    _vm = StateObject(wrappedValue: LazyTestViewModel(index: index))\n    _title = State(wrappedValue: “\\(index)“)\n  }\n\n  var body: some View {\n    Text(title)\n      .frame(height: 200)\n      .frame(maxWidth: .infinity)\n      .background(vm.color)\n      .contentShape(Rectangle())\n      .onTapGesture {\n        vm.color = .green\n        title = “touched”\n      }\n  }\n}\n\nstruct LazyTestView: View {\n  var body: some View {\n    ScrollView {\n      LazyVStack(spacing: 0) {\n        ForEach(0 ..\u0026lt; 20, id: \\.self) { index in\n          VStack(spacing: 0) {\n            Color.white\n              .frame(height: 20)\n            LazyTestItem(index: index)\n          }\n        }\n      }\n    }\n  }\n}\n\nstruct LazyTestView_Previews: PreviewProvider {\n  static var previews: some View {\n    LazyTestView()\n  }\n}",
          "ts": "1666115712.096099",
          "thread_ts": "1666115524.739759",
          "edited": {
            "user": "U045Z2GB294",
            "ts": "1666115787.000000"
          },
          "parent_user_id": "U045J8S9EU9",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2kCS+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi, I have a problem using LazyVStack ,  VStack inside LazyVStack will lost State when off screen.\n\nimport SwiftUI\n\nclass LazyTestViewModel: ObservableObject {\n  @Published var color: Color = .red\n  var index: Int\n  init(index: Int) {\n    self.index = index\n    print(“===\u003e\u003e\u003e LazyTestViewModel init \\(index)“)\n  }\n\n  deinit {\n    print(“===\u003e\u003e\u003e LazyTestViewModel deinit \\(index)“)\n  }\n}\n\nstruct LazyTestItem: View {\n  @StateObject var vm: LazyTestViewModel\n  @State var title: String\n  let index: Int\n\n  init(index: Int) {\n    self.index = index\n    _vm = StateObject(wrappedValue: LazyTestViewModel(index: index))\n    _title = State(wrappedValue: “\\(index)“)\n  }\n\n  var body: some View {\n    Text(title)\n      .frame(height: 200)\n      .frame(maxWidth: .infinity)\n      .background(vm.color)\n      .contentShape(Rectangle())\n      .onTapGesture {\n        vm.color = .green\n        title = “touched”\n      }\n  }\n}\n\nstruct LazyTestView: View {\n  var body: some View {\n    ScrollView {\n      LazyVStack(spacing: 0) {\n        ForEach(0 ..\u003c 20, id: \\.self) { index in\n          VStack(spacing: 0) {\n            Color.white\n              .frame(height: 20)\n            LazyTestItem(index: index)\n          }\n        }\n      }\n    }\n  }\n}\n\nstruct LazyTestView_Previews: PreviewProvider {\n  static var previews: some View {\n    LazyTestView()\n  }\n}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1ed5530a-e143-4999-a285-f673bf0924be",
          "type": "message",
          "user": "U045Z2GB294",
          "text": "I wait in middle night for answer",
          "ts": "1666116277.459449",
          "thread_ts": "1666115524.739759",
          "parent_user_id": "U045J8S9EU9",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "8clw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I wait in middle night for answer"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045ZGP2QCV\u003e asked\n\u0026gt; For accessibility, is there a difference between Image(decorative:) and .accessibilityHidden()?",
      "ts": "1666115621.087799",
      "thread_ts": "1666115621.087799",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666115649.521819",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "dNv",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045ZGP2QCV"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"For accessibility, is there a difference between Image(decorative:) and .accessibilityHidden()?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "2b8fda17-b2f0-4d75-96fb-3ea63d0acc96",
          "type": "message",
          "user": "U044D824R8V",
          "text": "There's no difference here, using both will hide the image from assistive technologies appropriately!",
          "ts": "1666115649.521819",
          "thread_ts": "1666115621.087799",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "QUA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There's no difference here, using both will hide the image from assistive technologies appropriately!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045NSTKPFZ\u003e asked\n\u0026gt; If I add a context menu to a TABLE how do I determine which row caused the menu to be displayed (without having to select the row)?",
      "ts": "1666115683.725649",
      "thread_ts": "1666115683.725649",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666115692.873109",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "jRM",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045NSTKPFZ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"If I add a context menu to a TABLE how do I determine which row caused the menu to be displayed (without having to select the row)?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "982c69ee-0006-4607-9cdf-d9247d39e288",
          "type": "message",
          "user": "U0452LR9TRB",
          "text": "Add `contextMenu(forSelectionType:)` outside the `Table`. The closure will be called with the tags for the rows that originated the menu.",
          "ts": "1666115692.873109",
          "thread_ts": "1666115683.725649",
          "edited": {
            "user": "U0452LR9TRB",
            "ts": "1666115707.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "20b",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Add "
                    },
                    {
                      "type": "text",
                      "text": "contextMenu(forSelectionType:)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " outside the "
                    },
                    {
                      "type": "text",
                      "text": "Table",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ". The closure will be called with the tags for the rows that originated the menu."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045WJCT7GW\u003e asked\n\u0026gt; What are best practices for controlling update scope in views (to avoid unneeded relayouts or reevaluation of the view tree) when scaling to more complex UI. With more complex UI performance (at least on macOS) quickly drops off due to views being too hungry for updating.",
      "ts": "1666115687.992499",
      "thread_ts": "1666115687.992499",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 7,
      "latest_reply": "1666116129.415489",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "e8u",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045WJCT7GW"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What are best practices for controlling update scope in views (to avoid unneeded relayouts or reevaluation of the view tree) when scaling to more complex UI. With more complex UI performance (at least on macOS) quickly drops off due to views being too hungry for updating.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "f698dd35-a265-4f35-a4c6-68f33357d6bf",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "There are different strategy that you can apply:\n• `ObservableObject` is the unit of invalidation for a view or view hierarchy. You can use different objects conforming to `ObservableObject` to scope your invalidation.\n• Sometimes it can be useful to not rely on `@Published` but get some manual control and publish changes directly to `objectWillChange`\n• Add an intermediate view that extracts only the properties you need, and lean into SwiftUI’s automatic equality checking to early abort the invalidation",
          "ts": "1666115720.742139",
          "thread_ts": "1666115687.992499",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U045WJCT7GW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "TyWR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There are different strategy that you can apply:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_list",
                  "Raw": "{\"type\":\"rich_text_list\",\"elements\":[{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"ObservableObject\",\"style\":{\"code\":true}},{\"type\":\"text\",\"text\":\" is the unit of invalidation for a view or view hierarchy. You can use different objects conforming to \"},{\"type\":\"text\",\"text\":\"ObservableObject\",\"style\":{\"code\":true}},{\"type\":\"text\",\"text\":\" to scope your invalidation.\"}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"Sometimes it can be useful to not rely on \"},{\"type\":\"text\",\"text\":\"@Published\",\"style\":{\"code\":true}},{\"type\":\"text\",\"text\":\" but get some manual control and publish changes directly to \"},{\"type\":\"text\",\"text\":\"objectWillChange\",\"style\":{\"code\":true}}]},{\"type\":\"rich_text_section\",\"elements\":[{\"type\":\"text\",\"text\":\"Add an intermediate view that extracts only the properties you need, and lean into SwiftUI\\u2019s automatic equality checking to early abort the invalidation\"}]}],\"style\":\"bullet\",\"indent\":0,\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b8fda5a5-d3dc-4134-ac2e-0b8935d29cb4",
          "type": "message",
          "user": "U045ZGP2QCV",
          "text": "When window resizing, macOS SwiftUI struggles. Particularly with lazy views. It seems AppKit and SwiftUI recompute at different times.",
          "ts": "1666115737.788189",
          "thread_ts": "1666115687.992499",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 2,
              "users": [
                "U047LS5TFPA",
                "U046TD30QBS"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mz9tt",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "When window resizing, macOS SwiftUI struggles. Particularly with lazy views. It seems AppKit and SwiftUI recompute at different times."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "193bf9f6-a130-4b2f-ac61-7709bed4ecf1",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "Thanks \u003c@U045J8SG70R\u003e. Because our model is quite large and complex we wound up writing our own property wrappers that isolate the var they and ignore all other changes. I’ve also heard of people making wrapper views that do similar things to provide manual control.",
          "ts": "1666115859.584599",
          "thread_ts": "1666115687.992499",
          "edited": {
            "user": "U045WJCT7GW",
            "ts": "1666115945.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "H8N",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks "
                    },
                    {
                      "type": "user",
                      "user_id": "U045J8SG70R"
                    },
                    {
                      "type": "text",
                      "text": ". Because our model is quite large and complex we wound up writing our own property wrappers that isolate the var they and ignore all other changes. I’ve also heard of people making wrapper views that do similar things to provide manual control."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "45e8cecb-d192-4013-bc52-c1e84b7455ea",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "Just a vote :white_check_mark: for making some official SwiftUI tools to make this easier and more standardized.",
          "ts": "1666115929.836109",
          "thread_ts": "1666115687.992499",
          "edited": {
            "user": "U045WJCT7GW",
            "ts": "1666116017.000000"
          },
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "white_check_mark",
              "count": 1,
              "users": [
                "U045ZA653NZ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bGY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Just a vote "
                    },
                    {
                      "type": "emoji",
                      "name": "white_check_mark",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " for making some official SwiftUI tools to make this easier and more standardized."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b2082dbe-2ad2-4eeb-87bd-c874750ab6aa",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "Is having a func `@ViewBuilder` the same as a `struct` the same when breaking views out to isolate them to their passed data?",
          "ts": "1666116006.043089",
          "thread_ts": "1666115687.992499",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+zU",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Is having a func "
                    },
                    {
                      "type": "text",
                      "text": "@ViewBuilder",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " the same as a "
                    },
                    {
                      "type": "text",
                      "text": "struct",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " the same when breaking views out to isolate them to their passed data?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ff385696-2ffd-45e6-b838-0fedf9caafc0",
          "type": "message",
          "user": "U044JKF2JVA",
          "text": "If there are any performance problems you find with specific view constructions (e.g. the one you shared \u003c@U045ZGP2QCV\u003e), please do file Feedbacks with that construction — ideally in a way that can be reproduced standalone.\n\nThose are always useful and allows us to either address a problem in SwiftUI or send back more info on what might be wrong with the construction",
          "ts": "1666116031.141859",
          "thread_ts": "1666115687.992499",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U045WJCT7GW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bF7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If there are any performance problems you find with specific view constructions (e.g. the one you shared "
                    },
                    {
                      "type": "user",
                      "user_id": "U045ZGP2QCV"
                    },
                    {
                      "type": "text",
                      "text": "), please do file Feedbacks with that construction — ideally in a way that can be reproduced standalone.\n\nThose are always useful and allows us to either address a problem in SwiftUI or send back more info on what might be wrong with the construction"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "9db925e8-e42b-47f7-80f8-6c3628931a48",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "One thing we’ve seen is that `@Bindings` can trigger updates down the line so if you’ve a bunch of bound UI (say a bunch of sliders) this is a quick way to bad performance.",
          "ts": "1666116129.415489",
          "thread_ts": "1666115687.992499",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6Sv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "One thing we’ve seen is that "
                    },
                    {
                      "type": "text",
                      "text": "@Bindings",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " can trigger updates down the line so if you’ve a bunch of bound UI (say a bunch of sliders) this is a quick way to bad performance."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045NSTKPFZ\u003e asked\n\u0026gt; Why is there no easy way to map TABLE selected row(s) to the array elements that provide the content of the table? It seems that the only way to do this is to search the array for the matching id value which seems very inefficient for large tables.",
      "ts": "1666115734.107159",
      "thread_ts": "1666115734.107159",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 11,
      "latest_reply": "1666116149.988379",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "ZWbY",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045NSTKPFZ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Why is there no easy way to map TABLE selected row(s) to the array elements that provide the content of the table? It seems that the only way to do this is to search the array for the matching id value which seems very inefficient for large tables.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "b3d469f3-4093-4c60-a935-bcae2e8b01af",
          "type": "message",
          "user": "U0455SYS2SU",
          "text": "Storing selection in terms of array indices is fragile: if there's ever a mutation to the array, the selection becomes out of sync",
          "ts": "1666115796.253449",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "k9iM",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Storing selection in terms of array indices is fragile: if there's ever a mutation to the array, the selection becomes out of sync"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2ec13132-5e2b-4ffe-b2cf-4956a863f7fc",
          "type": "message",
          "user": "U045P29PG0P",
          "text": "\u003c@U0455SYS2SU\u003e so how would you go about implementing that?",
          "ts": "1666115853.397399",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "pNuY/",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0455SYS2SU"
                    },
                    {
                      "type": "text",
                      "text": " so how would you go about implementing that?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c8f705ea-0564-4cc1-9c20-345cd28d260d",
          "type": "message",
          "user": "U0455SYS2SU",
          "text": "Keep the selection in terms of id. To lookup the corresponding elements in the array use the standard built in algorithms like `first(where:)`",
          "ts": "1666115919.993319",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xyM",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Keep the selection in terms of id. To lookup the corresponding elements in the array use the standard built in algorithms like "
                    },
                    {
                      "type": "text",
                      "text": "first(where:)",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2667c767-b259-4582-ab71-53474d554752",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "I use a map of Identifiable Id (UUID) to Element",
          "ts": "1666115930.143299",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EzC5f",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I use a map of Identifiable Id (UUID) to Element"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f31efdfe-27d6-459a-bccb-eead61a487d7",
          "type": "message",
          "user": "U0455SYS2SU",
          "text": "A linear search (as long as it's not in a nested for loop) is very fast",
          "ts": "1666115944.919039",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9pz6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A linear search (as long as it's not in a nested for loop) is very fast"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "33117caf-1b40-4cc0-83f7-285112728336",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Much faster than a linear search for large lists",
          "ts": "1666115945.359579",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "A1cB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Much faster than a linear search for large lists"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c6459d08-34ad-47eb-bf6a-e522a8dd532d",
          "type": "message",
          "user": "U0455SYS2SU",
          "text": "A dictionary is even better!",
          "ts": "1666115955.559019",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "l/h=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A dictionary is even better!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "efa18974-b96f-4c58-a6d1-0d0b8d90452c",
          "type": "message",
          "user": "U045P29PG0P",
          "text": "I see; that makes sense.",
          "ts": "1666115988.170439",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9pbh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I see; that makes sense."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6afd53cf-c317-43b8-a8aa-04aa71f8f313",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "\u003c@U0455SYS2SU\u003e Some things from Smalltalk still work well!",
          "ts": "1666115999.420469",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lBar",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0455SYS2SU"
                    },
                    {
                      "type": "text",
                      "text": " Some things from Smalltalk still work well!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f90d0e34-7fdc-48ad-a418-9d5c0aac0952",
          "type": "message",
          "user": "U0455SYS2SU",
          "text": "The Swift Collections package has an OrderedDictionary that folks might find useful",
          "ts": "1666116028.237019",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7jo6B",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The Swift Collections package has an OrderedDictionary that folks might find useful"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fe62d315-8e47-4339-b1d5-e164f82800d1",
          "type": "message",
          "user": "U045NSTKPFZ",
          "text": "why can't we have something like array controller that works quite well for the NSTableView architecture. It handles these and other issues.",
          "ts": "1666116149.988379",
          "thread_ts": "1666115734.107159",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "8pq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "why can't we have something like array controller that works quite well for the NSTableView architecture. It handles these and other issues."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0462658691\u003e asked\n\u0026gt; In our contextMenu we updated the alert for a button to give the user an option to cancel or confirm an action, which previously only informed about the action taking place. Now the alert won't show anymore and thus the action can't be confirmed. Any ideas on what we might have missed or done wrong?",
      "ts": "1666115736.221399",
      "thread_ts": "1666115736.221399",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 5,
      "latest_reply": "1666116542.563839",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "SNc1",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0462658691"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"In our contextMenu we updated the alert for a button to give the user an option to cancel or confirm an action, which previously only informed about the action taking place. Now the alert won't show anymore and thus the action can't be confirmed. Any ideas on what we might have missed or done wrong?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "dfd283b1-08e1-402b-80bc-07b71dc3f41c",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "\u003c@U0462658691\u003e can you give a little more detail on this one? Which platform? If you could provide a snippet, we might be able to help out",
          "ts": "1666115775.073769",
          "thread_ts": "1666115736.221399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "i/F55",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0462658691"
                    },
                    {
                      "type": "text",
                      "text": " can you give a little more detail on this one? Which platform? If you could provide a snippet, we might be able to help out"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "37ffc4a6-bb81-4e96-a28f-be53c0561e8f",
          "type": "message",
          "user": "U0462658691",
          "text": "```Button(action: {\n                galleryInfo = true\n            }, label: {\n                Label(\"Add to Gallery\", systemImage: \"rectangle.stack.badge.plus\")\n                    .offset(x: 0, y: 2)\n            })\n            .alert(\n                \"Upload to Gallery?\",\n                isPresented: $galleryInfo,\n                actions: {\n                    Button {\n                        Task {\n                            do {\n                                isLoading = true\n                                guard isRecipeValidForGallery() else {\n                                    invalidRecipe = true\n                                    isLoading = false\n                                    return\n                                }\n                                let _ = try await Share.share(recipe: recipe, isAddedToGallery: true)\n                                recipeShared = true\n                            } catch {\n                                shareFailed = true\n                            }\n                            isLoading = false\n                        }\n                    } label: {\n                        Text(\"Yes, upload!\")\n                    }\n                    Button(\"No thanks\", role: .cancel){\n                    }\n                },\n                message: {\n                    Text(\"You're about to upload this recipe to the Kookin Gallery for anyone to see. Do you wish to proceed?\")\n                })\n            .alert(\n                \"Yaay!\",\n                isPresented: $recipeShared,\n                actions: {\n                    Text(\"Ok\")\n                },\n                message: {\n                    Text(\"\\(recipe.safeName) is now available in the Gallery for everyone to see.\")\n                })```",
          "ts": "1666115937.225599",
          "thread_ts": "1666115736.221399",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U04583CD3FE"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "WIt",
              "elements": [
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"Button(action: {\\n                galleryInfo = true\\n            }, label: {\\n                Label(\\\"Add to Gallery\\\", systemImage: \\\"rectangle.stack.badge.plus\\\")\\n                    .offset(x: 0, y: 2)\\n            })\\n            .alert(\\n                \\\"Upload to Gallery?\\\",\\n                isPresented: $galleryInfo,\\n                actions: {\\n                    Button {\\n                        Task {\\n                            do {\\n                                isLoading = true\\n                                guard isRecipeValidForGallery() else {\\n                                    invalidRecipe = true\\n                                    isLoading = false\\n                                    return\\n                                }\\n                                let _ = try await Share.share(recipe: recipe, isAddedToGallery: true)\\n                                recipeShared = true\\n                            } catch {\\n                                shareFailed = true\\n                            }\\n                            isLoading = false\\n                        }\\n                    } label: {\\n                        Text(\\\"Yes, upload!\\\")\\n                    }\\n                    Button(\\\"No thanks\\\", role: .cancel){\\n                    }\\n                },\\n                message: {\\n                    Text(\\\"You're about to upload this recipe to the Kookin Gallery for anyone to see. Do you wish to proceed?\\\")\\n                })\\n            .alert(\\n                \\\"Yaay!\\\",\\n                isPresented: $recipeShared,\\n                actions: {\\n                    Text(\\\"Ok\\\")\\n                },\\n                message: {\\n                    Text(\\\"\\\\(recipe.safeName) is now available in the Gallery for everyone to see.\\\")\\n                })\"}],\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5615efea-d37c-44e3-9337-56b2709dcd75",
          "type": "message",
          "user": "U0462658691",
          "text": "it's for iOS and it's the first alert we're having problems with, the second one works as it should. Thanks!",
          "ts": "1666115984.692709",
          "thread_ts": "1666115736.221399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bqgBT",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "it's for iOS and it's the first alert we're having problems with, the second one works as it should. Thanks!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "318e5f11-33d4-43f3-a097-c889b5eb5ea8",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "That seems like it should work. But maybe something with the `contextMenu` is getting in the way? This could be a bug for us. You could try removing the context menu and seeing if it behaves properly. separately, you may want to set `isLoading = true`  above the `Task` block",
          "ts": "1666116309.808769",
          "thread_ts": "1666115736.221399",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0462658691"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "P+la",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That seems like it should work. But maybe something with the "
                    },
                    {
                      "type": "text",
                      "text": "contextMenu",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " is getting in the way? This could be a bug for us. You could try removing the context menu and seeing if it behaves properly. separately, you may want to set "
                    },
                    {
                      "type": "text",
                      "text": "isLoading = true",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "  above the "
                    },
                    {
                      "type": "text",
                      "text": "Task",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " block"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d9c50a0c-309a-418c-aeb1-0db4df719e46",
          "type": "message",
          "user": "U0462658691",
          "text": "Thanks! Will look in to that tomorrow, it's getting late over here :smile:",
          "ts": "1666116542.563839",
          "thread_ts": "1666115736.221399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "RS6z6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks! Will look in to that tomorrow, it's getting late over here "
                    },
                    {
                      "type": "emoji",
                      "name": "smile",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045ZGP2QCV\u003e asked\n\u0026gt; On macOS, the UndoManager does not display the action title in the Edit menu. In testing the local UndoManager, it does show that the title has been set. Is this a bug or an unrealized programmer error?",
      "ts": "1666115913.509219",
      "thread_ts": "1666115913.509219",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666116049.450169",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "0sy",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045ZGP2QCV"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"On macOS, the UndoManager does not display the action title in the Edit menu. In testing the local UndoManager, it does show that the title has been set. Is this a bug or an unrealized programmer error?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "fe7e0b0f-5beb-4bef-9da7-d15eab2510e8",
          "type": "message",
          "user": "U044R32PW4X",
          "text": "Hi Ryan, the Undo/Redo menu items ought to update to show the undo manager's undo/redo title. In a quick test locally, it does seem to be working for me, so I wonder if there's something about your use case that is getting in the way.\n\nCould you file a feedback report and include some sample code? Reply with the # here and I can take a look.",
          "ts": "1666116049.450169",
          "thread_ts": "1666115913.509219",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "raised_hands",
              "count": 2,
              "users": [
                "U045ZGP2QCV",
                "U0462AL317X"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "DUA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi Ryan, the Undo/Redo menu items ought to update to show the undo manager's undo/redo title. In a quick test locally, it does seem to be working for me, so I wonder if there's something about your use case that is getting in the way.\n\nCould you file a feedback report and include some sample code? Reply with the # here and I can take a look."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U047LS5TFPA\u003e asked\n\u0026gt; When implementing a custom layout how important is it to deal with the edge cases of very small or very large available space?",
      "ts": "1666116140.150009",
      "thread_ts": "1666116140.150009",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666116144.235029",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "rjE",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U047LS5TFPA"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When implementing a custom layout how important is it to deal with the edge cases of very small or very large available space?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "6d4b04d5-3839-41a9-b55a-44ec62a00919",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "As with many things, the answer for this is that it depends on your use case (however unsatisfying an answer that might be :sweat_smile:). Stacks in particular make requests for zero, and infinite available space to determine minimum and maximum size, so at the very least, those cases should be considered. Outside of that, you’re trying to implement a general purpose layout that can be used in a variety of cases, _very_ important! But if you’re just using it yourself and know those cases won’t get hit because of the platform, constraints you’ve imposed, etc., then it can be reasonable to leave them unhandled.",
          "ts": "1666116144.235029",
          "thread_ts": "1666116140.150009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CVRj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "As with many things, the answer for this is that it depends on your use case (however unsatisfying an answer that might be "
                    },
                    {
                      "type": "emoji",
                      "name": "sweat_smile",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": "). Stacks in particular make requests for zero, and infinite available space to determine minimum and maximum size, so at the very least, those cases should be considered. Outside of that, you’re trying to implement a general purpose layout that can be used in a variety of cases, "
                    },
                    {
                      "type": "text",
                      "text": "very",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " important! But if you’re just using it yourself and know those cases won’t get hit because of the platform, constraints you’ve imposed, etc., then it can be reasonable to leave them unhandled."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "839a6218-037b-465a-b7b0-55241c77f56c",
      "type": "message",
      "user": "U0453US3GAJ",
      "text": "We have reached the end of the our time for our Q\u0026amp;A. Thanks to everyone who have joined us and our wonderful SwiftUI engineers.\n\nWe hope you had some fun and join in again at our next Q\u0026amp;A on *Thursday at 1PM PST*! :partying_face:",
      "ts": "1666116220.360309",
      "thread_ts": "1666116220.360309",
      "reply_count": 1,
      "latest_reply": "1666116505.148069",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "raised_hands",
          "count": 21,
          "users": [
            "U045WJCT7GW",
            "U045J8S9EU9",
            "U045PGRV08K",
            "U0471BFLNAY",
            "U046W0SMLHZ",
            "U0462AL317X",
            "U0464SKECHJ",
            "U046JJACQ3H",
            "U046YFT7V0A",
            "U046252SCGK",
            "U046S70K9A4",
            "U046LRM2C9Z",
            "U046797427P",
            "U0462538BS7",
            "U045PHMLFFZ",
            "U046GSZUQMP",
            "U045VKE445U",
            "U044WGBSFEH",
            "U046VFNJD6C",
            "U046SQBFNS1",
            "U046706G7RT"
          ]
        },
        {
          "name": "raised_hands::skin-tone-5",
          "count": 1,
          "users": [
            "U046RCMV1V3"
          ]
        },
        {
          "name": "rocket",
          "count": 6,
          "users": [
            "U03V30M0C1K",
            "U046RCMV1V3",
            "U0471BFLNAY",
            "U046LRM2C9Z",
            "U045PHMLFFZ",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "heart",
          "count": 8,
          "users": [
            "U0471BFLNAY",
            "U04625ZF30T",
            "U0462658691",
            "U0464SKECHJ",
            "U046LRM2C9Z",
            "U046C45TVQB",
            "U045PHMLFFZ",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "swift-blue",
          "count": 8,
          "users": [
            "U04625ZF30T",
            "U046JJACQ3H",
            "U046C45TVQB",
            "U045PHMLFFZ",
            "U046GSZUQMP",
            "U047HDAA5UG",
            "U046VFNJD6C",
            "U046YKS1Q9H"
          ]
        },
        {
          "name": "clap",
          "count": 5,
          "users": [
            "U04625ZF30T",
            "U0464SKECHJ",
            "U046JJACQ3H",
            "U045PHMLFFZ",
            "U046GSZUQMP"
          ]
        },
        {
          "name": "raised_hands::skin-tone-2",
          "count": 1,
          "users": [
            "U0441J2N9FH"
          ]
        },
        {
          "name": "swift-orange",
          "count": 4,
          "users": [
            "U046C45TVQB",
            "U045PHMLFFZ",
            "U046GSZUQMP",
            "U047HDAA5UG"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "4RL1Z",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "We have reached the end of the our time for our Q\u0026A. Thanks to everyone who have joined us and our wonderful SwiftUI engineers.\n\nWe hope you had some fun and join in again at our next Q\u0026A on "
                },
                {
                  "type": "text",
                  "text": "Thursday at 1PM PST",
                  "style": {
                    "bold": true
                  }
                },
                {
                  "type": "text",
                  "text": "! "
                },
                {
                  "type": "emoji",
                  "name": "partying_face",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "dbc88132-d99c-438b-881c-ed26e9ce2ab6",
          "type": "message",
          "user": "U0441J2N9FH",
          "text": "Thanks Evelyn for moderating!! Appreciate you. :heart:",
          "ts": "1666116505.148069",
          "thread_ts": "1666116220.360309",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U0455RVLUQG",
                "U0453US3GAJ"
              ]
            },
            {
              "name": "tada",
              "count": 1,
              "users": [
                "U0453US3GAJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "1rANH",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks Evelyn for moderating!! Appreciate you. "
                    },
                    {
                      "type": "emoji",
                      "name": "heart",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045MLXB6UX\u003e asked\n\u0026gt; How can we build a single \"form\" that implements something like \"NSEditor\", so each individual field can be edited without \"submitting\" until focus leaves the form completely? Think of an XYZ normalized vector input",
      "ts": "1666116429.308139",
      "thread_ts": "1666116429.308139",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666116631.725219",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Ged5s",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045MLXB6UX"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How can we build a single \\\"form\\\" that implements something like \\\"NSEditor\\\", so each individual field can be edited without \\\"submitting\\\" until focus leaves the form completely? Think of an XYZ normalized vector input\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "6d97338e-60fe-49fe-8a73-cb04394a2394",
          "type": "message",
          "user": "U044R32PW4X",
          "text": "Hey Steven, this is an area where we're looking to make improvements. Your suggestion would make for a good feedback report! Any other background/context you can provide about your use case would also be helpful in the report.",
          "ts": "1666116631.725219",
          "thread_ts": "1666116429.308139",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "e7o",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hey Steven, this is an area where we're looking to make improvements. Your suggestion would make for a good feedback report! Any other background/context you can provide about your use case would also be helpful in the report."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "7f61964c-b412-4197-9746-00e7fb59d44a",
      "type": "message",
      "user": "U0453US3GAJ",
      "text": "\u003c!here\u003e\nT-minus 10 minutes before we have another round of Q\u0026amp;A time. Use this time to think of questions you want answered!\n\nOur team is getting ready! See you back here at 1PM PST!",
      "ts": "1666295414.012469",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "partying_face",
          "count": 7,
          "users": [
            "U0464SKECHJ",
            "U045QB05AVD",
            "U0460BADXM3",
            "U04583CAUAG",
            "U03V30M0C1K",
            "U046LKK3L81",
            "U046VFNJD6C"
          ]
        },
        {
          "name": "nerd_face",
          "count": 1,
          "users": [
            "U046S06TU8Y"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "qz76p",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "broadcast",
                  "range": "here"
                },
                {
                  "type": "text",
                  "text": "\nT-minus 10 minutes before we have another round of Q\u0026A time. Use this time to think of questions you want answered!\n\nOur team is getting ready! See you back here at 1PM PST!"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "d01eff1c-1c1b-4f53-8d12-05fe0506b7ca",
      "type": "message",
      "user": "U045J8S8JQZ",
      "text": "Hello!\nOur SwiftUI engineers are actively looking at your questions. If you have not done so already, please select the:heavy_plus_sign:icon from the lower left, and find the _Ask A Question_ workflow. We’re here to answer your layout questions but we’ll also try to get through general questions as well! So please, ask away!",
      "ts": "1666296007.994509",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "star-struck",
          "count": 3,
          "users": [
            "U046DA9R188",
            "U046YTW0LER",
            "U0464SKECHJ"
          ]
        },
        {
          "name": "raised_hands",
          "count": 4,
          "users": [
            "U0460BADXM3",
            "U045QB05AVD",
            "U046S4P76FJ",
            "U046VFNJD6C"
          ]
        },
        {
          "name": "partying_face",
          "count": 4,
          "users": [
            "U045J8S9EU9",
            "U0453US3GAJ",
            "U045WGB2MAS",
            "U046VFNJD6C"
          ]
        },
        {
          "name": "raised_hands::skin-tone-3",
          "count": 1,
          "users": [
            "U0453US3GAJ"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "IY4",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "Hello!\nOur SwiftUI engineers are actively looking at your questions. If you have not done so already, please select the"
                },
                {
                  "type": "emoji",
                  "name": "heavy_plus_sign",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": "icon from the lower left, and find the "
                },
                {
                  "type": "text",
                  "text": "Ask A Question",
                  "style": {
                    "italic": true
                  }
                },
                {
                  "type": "text",
                  "text": " workflow. We’re here to answer your layout questions but we’ll also try to get through general questions as well! So please, ask away!"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "b4602979-d702-4479-8007-2817ec97eb25",
      "type": "message",
      "user": "U0453US3GAJ",
      "text": "While our SwiftUI engineers are typing up their responses — tell us 1 fun fact about yourself! :thread:",
      "ts": "1666296081.569569",
      "thread_ts": "1666296081.569569",
      "reply_count": 7,
      "latest_reply": "1666298002.403859",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "eyes",
          "count": 1,
          "users": [
            "U046797427P"
          ]
        },
        {
          "name": "flushed",
          "count": 1,
          "users": [
            "U0460BADXM3"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "O7k",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "While our SwiftUI engineers are typing up their responses — tell us 1 fun fact about yourself! "
                },
                {
                  "type": "emoji",
                  "name": "thread",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "0231c274-7d7b-4e6c-952a-2983303f550c",
          "type": "message",
          "user": "U046S06TU8Y",
          "text": "I started flying airplanes (age 14) before I could drive a car.",
          "ts": "1666296183.719599",
          "thread_ts": "1666296081.569569",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "exploding_head",
              "count": 5,
              "users": [
                "U0453US3GAJ",
                "U0464SKECHJ",
                "U0460BADXM3",
                "U0476A9RTNZ",
                "U0463CWEH99"
              ]
            },
            {
              "name": "airplane",
              "count": 1,
              "users": [
                "U0460BADXM3"
              ]
            },
            {
              "name": "microphone",
              "count": 1,
              "users": [
                "U046797427P"
              ]
            },
            {
              "name": "arrow_down",
              "count": 1,
              "users": [
                "U046797427P"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OMI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I started flying airplanes (age 14) before I could drive a car."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1b30afc9-8277-4dd0-b958-71b2eba0e18e",
          "type": "message",
          "user": "U046797427P",
          "text": "Before I focussed my time on making an app for things you want to remember,  I used to be a Clinical Neuropsychologist. But the true inspiration for the app wasn’t my past clients with brain injuries, but rather my own substantial difficulty in learning people’s names myself… :)",
          "ts": "1666296208.200809",
          "thread_ts": "1666296081.569569",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "brain",
              "count": 2,
              "users": [
                "U03V30M0C1K",
                "U03V326V960"
              ]
            },
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U046LKK3L81"
              ]
            },
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "79qg",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Before I focussed my time on making an app for things you want to remember,  I used to be a Clinical Neuropsychologist. But the true inspiration for the app wasn’t my past clients with brain injuries, but rather my own substantial difficulty in learning people’s names myself… :)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fb3829de-7207-4c33-bc30-bb7891bf47e3",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "one of my favorite Apple technology stories was getting a text on my Apple watch while windsurfing - relayed from my iPhone that was in a waterproof box in a nearby kayak being paddled by a family member.",
          "ts": "1666296392.910499",
          "thread_ts": "1666296081.569569",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "shell",
              "count": 1,
              "users": [
                "U046797427P"
              ]
            },
            {
              "name": "exploding_head",
              "count": 1,
              "users": [
                "U0468P6C81G"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "D1G",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "one of my favorite Apple technology stories was getting a text on my Apple watch while windsurfing - relayed from my iPhone that was in a waterproof box in a nearby kayak being paddled by a family member."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "619e4956-a441-49dc-ac91-5336e8583d12",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "I worked on the packaging design for the original iPod.",
          "ts": "1666296994.869659",
          "thread_ts": "1666296081.569569",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "raised_hands",
              "count": 2,
              "users": [
                "U0476A9RTNZ",
                "U0463CWEH99"
              ]
            },
            {
              "name": "star-struck",
              "count": 1,
              "users": [
                "U046LKK3L81"
              ]
            },
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "i4Qe",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I worked on the packaging design for the original iPod."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7daaeab0-b26a-4ab5-a7bd-85414166a3f9",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "Can I ask here what the app is to help remember things? :grin: That sounds useful",
          "ts": "1666297109.783669",
          "thread_ts": "1666296081.569569",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "wu+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Can I ask here what the app is to help remember things? "
                    },
                    {
                      "type": "emoji",
                      "name": "grin",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " That sounds useful"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3ae7ae2b-f4b5-4ed7-97c4-4d99a5e0beef",
          "type": "message",
          "user": "U046797427P",
          "text": "\u003c@U046LKK3L81\u003e sure. See \u003chttps://intro.app\u003e / Intro on the app store. It’s a work in progress, with big improvements coming in the upcoming v2.0 redesign.",
          "ts": "1666297266.376579",
          "thread_ts": "1666296081.569569",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U046LKK3L81",
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "sdm",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U046LKK3L81"
                    },
                    {
                      "type": "text",
                      "text": " sure. See "
                    },
                    {
                      "type": "link",
                      "url": "https://intro.app",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": " / Intro on the app store. It’s a work in progress, with big improvements coming in the upcoming v2.0 redesign."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b1bd76aa-19f2-4f08-87f1-671649ed212f",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "How about the Apple folks add some items - maybe after this closes - since you are kinda busy now :grin:",
          "ts": "1666298002.403859",
          "thread_ts": "1666296081.569569",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0V7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "How about the Apple folks add some items - maybe after this closes - since you are kinda busy now "
                    },
                    {
                      "type": "emoji",
                      "name": "grin",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04635ASQAW\u003e asked\n\u0026gt; Multiline `TextField` and `TextEditor` in `VStack`s usually grow to fit their content. They don’t start scrolling their text until they hit an explicit size limit.\n\u0026gt; \n\u0026gt; If you put them inside another `ScrollView` with sibling views, they sometimes hit an unspecified size limit, and you get scrollview-inside-a-scrollview. \n\u0026gt; \n\u0026gt; Do you have any tips on how to ensure a Field/Editor *always* expand to fit their content?",
      "ts": "1666296203.959899",
      "thread_ts": "1666296203.959899",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 11,
      "latest_reply": "1666297121.712369",
      "reactions": [
        {
          "name": "white_check_mark",
          "count": 1,
          "users": [
            "U046XUX30C8"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "=sFi",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04635ASQAW"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Multiline `TextField` and `TextEditor` in `VStack`s usually grow to fit their content. They don\\u2019t start scrolling their text until they hit an explicit size limit.\\n\\nIf you put them inside another `ScrollView` with sibling views, they sometimes hit an unspecified size limit, and you get scrollview-inside-a-scrollview. \\n\\nDo you have any tips on how to ensure a Field\\/Editor *always* expand to fit their content?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "22cb7ccc-8b3b-4119-9321-c214e44fb9d4",
          "type": "message",
          "user": "U04635ASQAW",
          "text": "(FWIW I’ve tried `layoutPriority`, `scrollDisabled`, `fixedSize`, and `frame(maxHeight: .infinity)`)",
          "ts": "1666296235.910569",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "iYHq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "(FWIW I’ve tried `layoutPriority`, `scrollDisabled`, `fixedSize`, and `frame(maxHeight: .infinity)`)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a3087922-4216-4e96-8d98-c255e3c30a6c",
          "type": "message",
          "user": "U0460AEFDU5",
          "text": "Have you tried iOS16's `lineLimit(_:reservesSpace:)`",
          "ts": "1666296314.219779",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=NQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Have you tried iOS16's "
                    },
                    {
                      "type": "text",
                      "text": "lineLimit(_:reservesSpace:)",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "99eb1266-ef9d-4c0a-8d3a-87fc2d86a25e",
          "type": "message",
          "user": "U04635ASQAW",
          "text": "I haven't, just because I want the limit to be infinity and that seems to be the default behavior",
          "ts": "1666296348.206509",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "s7VaO",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I haven't, just because I want the limit to be infinity and that seems to be the default behavior"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "82670522-bda5-4da6-b75a-397b8ebb9968",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "A vertical TextField should always expand to fit its content. A TextEditor should expand to fit its container much like a ScrollView would. For either of these components, you can specify a frame to give it a min / max / explicit height. For a vertical text field, you can use the new line limit customizations.\n\nFor vertical text fields, I would strongly recommend giving it a some form of height limit through a frame or line limit modifier. Fitting a vertical text field to the size of its content is ok for medium length content (a few sentences or paragraphs) but will quickly result in performance problems if dealing with long form content (pages of a book).",
          "ts": "1666296422.757619",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0nSB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A vertical TextField should always expand to fit its content. A TextEditor should expand to fit its container much like a ScrollView would. For either of these components, you can specify a frame to give it a min / max / explicit height. For a vertical text field, you can use the new line limit customizations.\n\nFor vertical text fields, I would strongly recommend giving it a some form of height limit through a frame or line limit modifier. Fitting a vertical text field to the size of its content is ok for medium length content (a few sentences or paragraphs) but will quickly result in performance problems if dealing with long form content (pages of a book)."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "efbc2c71-41b8-4ae6-ab8f-afc210cf960d",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "So I would not recommend trying to have a limit of infinity and placing that in a ScrollView and expecting that to work well.",
          "ts": "1666296458.661439",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "AFh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "So I would not recommend trying to have a limit of infinity and placing that in a ScrollView and expecting that to work well."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f7519533-f65d-4fa4-b240-ffee146d7c1e",
          "type": "message",
          "user": "U04635ASQAW",
          "text": "Thanks \u003c@U0455KK9C2W\u003e — the use case is for a few paragraphs, so I'm not super worried about somebody pasting an entire book in there.",
          "ts": "1666296649.106149",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=od",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks "
                    },
                    {
                      "type": "user",
                      "user_id": "U0455KK9C2W"
                    },
                    {
                      "type": "text",
                      "text": " — the use case is for a few paragraphs, so I'm not super worried about somebody pasting an entire book in there."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6ae22bff-bbd1-4234-bfbf-fa91278a0532",
          "type": "message",
          "user": "U04635ASQAW",
          "text": "It sounds like it *ought* to behave in the way we're describing (always grow unless explicitly limited), but in the cases where I'm seeing it misbehave are bugs?",
          "ts": "1666296695.130819",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "oH/P",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It sounds like it "
                    },
                    {
                      "type": "text",
                      "text": "ought",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to behave in the way we're describing (always grow unless explicitly limited), but in the cases where I'm seeing it misbehave are bugs?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1a5277a2-d709-4c45-a308-0915825dad92",
          "type": "message",
          "user": "U0460AEFDU5",
          "text": "I recall reading a similar question recently (not sure if it was yours or not) and someone had suggested using text views, and swapping to a textfield/editor on demand. Not sure if that would apply here",
          "ts": "1666296832.254449",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Wg4H",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I recall reading a similar question recently (not sure if it was yours or not) and someone had suggested using text views, and swapping to a textfield/editor on demand. Not sure if that would apply here"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f7c799b3-bb29-4f24-a587-cc1cdce51256",
          "type": "message",
          "user": "U04635ASQAW",
          "text": "I saw the same question — it related to having hundreds of fields onscreen, but this case is just 1 or 2 fields that should grow to fit content",
          "ts": "1666296901.236229",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "wV+wc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I saw the same question — it related to having hundreds of fields onscreen, but this case is just 1 or 2 fields that should grow to fit content"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "afb7837a-1683-407e-895c-72a600172996",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "The always grow unless explicitly limited should be the behavior for a `TextField(\"Prompt\", text: $text, axis: .vertical)` and so if you don’t see that behavior, I’d recommend filling bugs. That is not the behavior I expect a TextEditor to have by default.\n\nBut again, if you expect content to be limited to paragraphs, I’d still recommend using a line limit or frame that enforces that.",
          "ts": "1666296981.958979",
          "thread_ts": "1666296203.959899",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "92rkD",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The always grow unless explicitly limited should be the behavior for a "
                    },
                    {
                      "type": "text",
                      "text": "TextField(\"Prompt\", text: $text, axis: .vertical)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and so if you don’t see that behavior, I’d recommend filling bugs. That is not the behavior I expect a TextEditor to have by default.\n\nBut again, if you expect content to be limited to paragraphs, I’d still recommend using a line limit or frame that enforces that."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8651a2a8-d97c-48aa-ae2f-4ab4f3da8122",
          "type": "message",
          "user": "U04635ASQAW",
          "text": "OK! FB11013867 is my feedback on TextEditor.\n\nTextField+axis is better-behaved so I've been using that instead. If I can ever consistently reproduce its autosizing issues I'll file a separate ticket on that.",
          "ts": "1666297121.712369",
          "thread_ts": "1666296203.959899",
          "edited": {
            "user": "U04635ASQAW",
            "ts": "1666297149.000000"
          },
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Tmo",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "OK! FB11013867 is my feedback on TextEditor.\n\nTextField+axis is better-behaved so I've been using that instead. If I can ever consistently reproduce its autosizing issues I'll file a separate ticket on that."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046X1TKCG7\u003e asked\n\u0026gt; How do you avoid everything getting sucked onto the main thread?\n\u0026gt; Anything @Published should probably be modified on main - so should probably be @MainActor\n\u0026gt; \n\u0026gt; But this has an expanding effect on any code that touches the property - and then potentially anything which touches _that_\n\u0026gt; \n\u0026gt; It seems that there should be a way to manage reading from @Published properties on other threads - in a thread-safe way. \n\u0026gt; \n\u0026gt; Are there any standard patterns/approaches to achieve this?",
      "ts": "1666296439.215439",
      "thread_ts": "1666296439.215439",
      "edited": {
        "user": "B043UB9BUQG",
        "ts": "1666296763.000000"
      },
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 8,
      "latest_reply": "1666297805.958469",
      "reactions": [
        {
          "name": "eyes",
          "count": 2,
          "users": [
            "U046KUR7658",
            "U0473TWCM98"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "PD2",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046X1TKCG7"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How do you avoid everything getting sucked onto the main thread?\\nAnything @Published should probably be modified on main - so should probably be @MainActor\\n\\nBut this has an expanding effect on any code that touches the property - and then potentially anything which touches _that_\\n\\nIt seems that there should be a way to manage reading from @Published properties on other threads - in a thread-safe way. \\n\\nAre there any standard patterns\\/approaches to achieve this?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "13ae4180-03e1-4acc-80d0-27c138bb6903",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "Generally speaking you really need to be on the main thread to interact with an UI framework. That is especially important when you are working with reference type because you have to sure that you always have serialized reads to it.\n\nWe actually have a pretty great WWDC talk that goes into a lot of detail about concurrency and SwiftUI, especially when it comes to ObservableObject: \u003chttps://developer.apple.com/videos/play/wwdc2021/10019/\u003e\n\nThat said generally the performance bottleneck are not around writing the @Published properties. The approach that I would suggest is do any kind of expensive or blocking work off the main thread and then hop back on the main thread just to write onto the ObservableObject.",
          "ts": "1666296797.732609",
          "thread_ts": "1666296439.215439",
          "attachments": [
            {
              "fallback": "Apple Developer: Discover concurrency in SwiftUI - WWDC21 - Videos - Apple Developer",
              "id": 1,
              "title": "Discover concurrency in SwiftUI - WWDC21 - Videos - Apple Developer",
              "title_link": "https://developer.apple.com/videos/play/wwdc2021/10019/",
              "text": "Discover how you can use Swift's concurrency features to build even better SwiftUI apps. We'll show you how concurrent workflows interact...",
              "image_url": "https://devimages-cdn.apple.com/wwdc-services/images/119/4885/4885_wide_250x141_2x.jpg",
              "service_name": "Apple Developer",
              "service_icon": "https://developer.apple.com/favicon.ico",
              "from_url": "https://developer.apple.com/videos/play/wwdc2021/10019/",
              "original_url": "https://developer.apple.com/videos/play/wwdc2021/10019/",
              "blocks": null
            }
          ],
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U0464SKECHJ"
              ]
            },
            {
              "name": "raised_hands",
              "count": 2,
              "users": [
                "U046KUR7658",
                "U045ZA653NZ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "D43k",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Generally speaking you really need to be on the main thread to interact with an UI framework. That is especially important when you are working with reference type because you have to sure that you always have serialized reads to it.\n\nWe actually have a pretty great WWDC talk that goes into a lot of detail about concurrency and SwiftUI, especially when it comes to ObservableObject: "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/videos/play/wwdc2021/10019/",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": "\n\nThat said generally the performance bottleneck are not around writing the @Published properties. The approach that I would suggest is do any kind of expensive or blocking work off the main thread and then hop back on the main thread just to write onto the ObservableObject."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6fac99ed-5c1d-461c-9881-c97ddce11459",
          "type": "message",
          "user": "U046X1TKCG7",
          "text": "is there any way to store data such that it can be _read_ from other threads synchronously?",
          "ts": "1666297018.998309",
          "thread_ts": "1666296439.215439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "q0w",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "is there any way to store data such that it can be "
                    },
                    {
                      "type": "text",
                      "text": "read",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " from other threads synchronously?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5b6b1b14-3626-481c-ad6c-9d5110a4ced3",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "\u003c@U045J8SG70R\u003e I have noticed in many cases Apple's framework APIs have a completion handler but it is not sendable. Would those be changed in future to make them sendable as it causes a lot of warnings:\nExample: \u003chttps://developer.apple.com/documentation/widgetkit/timelineprovider/getsnapshot(in:completion:)\u003e",
          "ts": "1666297060.087999",
          "thread_ts": "1666296439.215439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "8UI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U045J8SG70R"
                    },
                    {
                      "type": "text",
                      "text": " I have noticed in many cases Apple's framework APIs have a completion handler but it is not sendable. Would those be changed in future to make them sendable as it causes a lot of warnings:\nExample: "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/widgetkit/timelineprovider/getsnapshot(in:completion:)",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ea99723b-64ef-443f-86fc-9688ed293059",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "\u003c@U046X1TKCG7\u003e That would imply that you want to access that property from multiple thread: the main thread and another thread. In that case you need some sort of locking around the access to guarantee that access to the property is safe, that is not something that `@Published` guarantees today (nor it should because now everyone would have to pay the synchronization price). Also, even with synchronized access to property you are still not guarantee that you the entire object is thread safe or present an “atomic” read to the main thead.\n\nMy suggestion here is that I would architect my data model differently so that you don’t have to run into this issue. Do your async work somewhere else and when you are don’t send that to the main thread.",
          "ts": "1666297303.068059",
          "thread_ts": "1666296439.215439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "L3rT",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U046X1TKCG7"
                    },
                    {
                      "type": "text",
                      "text": " That would imply that you want to access that property from multiple thread: the main thread and another thread. In that case you need some sort of locking around the access to guarantee that access to the property is safe, that is not something that "
                    },
                    {
                      "type": "text",
                      "text": "@Published",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " guarantees today (nor it should because now everyone would have to pay the synchronization price). Also, even with synchronized access to property you are still not guarantee that you the entire object is thread safe or present an “atomic” read to the main thead.\n\nMy suggestion here is that I would architect my data model differently so that you don’t have to run into this issue. Do your async work somewhere else and when you are don’t send that to the main thread."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b2775a45-fbe2-4709-be7f-645fbd8b08d9",
          "type": "message",
          "user": "U046X1TKCG7",
          "text": "thx",
          "ts": "1666297428.138579",
          "thread_ts": "1666296439.215439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "cHNb",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "thx"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8a0d84f4-a46f-45d7-a3e0-cae976b8570c",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "\u003c@U0464SKECHJ\u003e generally evolving an API with a closure to become Sendable would be a source breaking change because it would now require that all of its captures to be sendable as well; and it makes sense for a closure to be sendable only if it need to be moved across concurrency context. That said if you think there are API that would benefit from that please do file feedbacks.",
          "ts": "1666297492.709599",
          "thread_ts": "1666296439.215439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "WIm/l",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U0464SKECHJ"
                    },
                    {
                      "type": "text",
                      "text": " generally evolving an API with a closure to become Sendable would be a source breaking change because it would now require that all of its captures to be sendable as well; and it makes sense for a closure to be sendable only if it need to be moved across concurrency context. That said if you think there are API that would benefit from that please do file feedbacks."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "36178423-5b1a-4715-920d-8207f556f308",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "\u003c@U045J8SG70R\u003e Thanks a lot explaining the complexity involved, IMHO I think it would be moving across concurrency contexts, The feedback ID is `FB11428998`",
          "ts": "1666297688.854239",
          "thread_ts": "1666296439.215439",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 2,
              "users": [
                "U0441J2N9FH",
                "U04654PA550"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vNO",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U045J8SG70R"
                    },
                    {
                      "type": "text",
                      "text": " Thanks a lot explaining the complexity involved, IMHO I think it would be moving across concurrency contexts, The feedback ID is "
                    },
                    {
                      "type": "text",
                      "text": "FB11428998",
                      "style": {
                        "code": true
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "36c69ba6-bd88-44e5-91cb-0c408ae1bded",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "Thank, appreciate you filing a detailed feedback",
          "ts": "1666297805.958469",
          "thread_ts": "1666296439.215439",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U0464SKECHJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "PyFSR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank, appreciate you filing a detailed feedback"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0463FG3ENA\u003e asked\n\u0026gt; Someone documented some WWDC Digital Lounge conversations. There is a question specifically about calling `StateObject(wrappedValue: SomeModeObject(withParam:)` and the answer document states that it is ok. \u003chttps://swiftui-lab.com/random-lessons/#data-10|https://swiftui-lab.com/random-lessons/#data-10\u003e\n\u0026gt; \n\u0026gt; The followup question points out that the documentation specifically says this is ill-advised, but the documentation has not been updated. Did someone misspeak in the Digital Lounge when they said it was ok to use? \n\u0026gt; \n\u0026gt; Thanks for considering answering this question.",
      "ts": "1666296554.694009",
      "thread_ts": "1666296554.694009",
      "attachments": [
        {
          "fallback": "The SwiftUI Lab: Random Lessons from the SwiftUI Digital Lounge - The SwiftUI Lab",
          "id": 1,
          "title": "Random Lessons from the SwiftUI Digital Lounge - The SwiftUI Lab",
          "title_link": "https://swiftui-lab.com/random-lessons/#data-10",
          "text": "One of this year’s WWDC highlights was the introduction of the Digital Lounges. Unfortunately, it was as good as it was ephemeral. In an instant… puff! it was gone! Many weren’t able to attend due to other commitments, lack of time, failure to register, etc. I personally failed to follow them as closely as I ... Read more",
          "image_url": "https://swiftui-lab.com/wp-content/uploads/2021/06/digital-lounge.png",
          "service_name": "The SwiftUI Lab",
          "service_icon": "https://swiftui-lab.com/favicon.ico",
          "from_url": "https://swiftui-lab.com/random-lessons/#data-10",
          "original_url": "https://swiftui-lab.com/random-lessons/#data-10",
          "fields": [
            {
              "title": "Written by",
              "value": "javier",
              "short": true
            },
            {
              "title": "Est. reading time",
              "value": "53 minutes",
              "short": true
            }
          ],
          "blocks": null,
          "ts": 1624286350
        }
      ],
      "edited": {
        "user": "B043UB9BUQG",
        "ts": "1666296555.000000"
      },
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 4,
      "latest_reply": "1666299651.462249",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "2mQE",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0463FG3ENA"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Someone documented some WWDC Digital Lounge conversations. There is a question specifically about calling `StateObject(wrappedValue: SomeModeObject(withParam:)` and the answer document states that it is ok. \"},{\"type\":\"link\",\"url\":\"https:\\/\\/swiftui-lab.com\\/random-lessons\\/#data-10\",\"text\":\"https:\\/\\/swiftui-lab.com\\/random-lessons\\/#data-10\"},{\"type\":\"text\",\"text\":\"\\n\\nThe followup question points out that the documentation specifically says this is ill-advised, but the documentation has not been updated. Did someone misspeak in the Digital Lounge when they said it was ok to use? \\n\\nThanks for considering answering this question.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "f0a28967-7ea6-471d-bd3e-39b80f10049f",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "The response from the Digital Lounge tries to explain the nuances of using that initializer and how that has the potential to create issue. That is the main reason why the documentation tries to be more conservative in its recommendation to using it.\n\nIt’s not always easy to convey this kind of nuance in the documentation but we definitely appreciate if you could file a feedback for improving the documentation.",
          "ts": "1666296563.674389",
          "thread_ts": "1666296554.694009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "kg4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The response from the Digital Lounge tries to explain the nuances of using that initializer and how that has the potential to create issue. That is the main reason why the documentation tries to be more conservative in its recommendation to using it.\n\nIt’s not always easy to convey this kind of nuance in the documentation but we definitely appreciate if you could file a feedback for improving the documentation."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c9cb5612-40f6-424c-a8a0-da00db4dd7fa",
          "type": "message",
          "user": "U0463FG3ENA",
          "text": "Thank you!",
          "ts": "1666296742.383119",
          "thread_ts": "1666296554.694009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "S2hA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "40352a08-088f-4d80-8d0d-fb84cb5aaa89",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Is it a limitation of Swift itself that you can't initialize a StateObject with a parameter to the struct? It seems like fixing that would fix this.",
          "ts": "1666299575.836809",
          "thread_ts": "1666296554.694009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Sz9",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Is it a limitation of Swift itself that you can't initialize a StateObject with a parameter to the struct? It seems like fixing that would fix this."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "484f0bef-49a1-443a-9686-30400e535806",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "I get that \"self\" may not be fully initialized yet, but when the instantiation of the StateObject VM does not depend on the struct's self, but only on the passed parameter, this seems like it should be allowed.",
          "ts": "1666299651.462249",
          "thread_ts": "1666296554.694009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Gg8b",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I get that \"self\" may not be fully initialized yet, but when the instantiation of the StateObject VM does not depend on the struct's self, but only on the passed parameter, this seems like it should be allowed."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045MMSNB3R\u003e asked\n\u0026gt; Let’s say we have a TextField with a lineLimit(1…5).\n\u0026gt; The textfield is in a HStack that is in a VStack, and the VStack contains more views on top of the textfield.\n\u0026gt; The problem I have is that when the textfield grows the rest of the views are not scrolling up and they get overlapped.\n\u0026gt; I don’t know how can I detect when the height of the textfield has changed? Not sure neither if It will be possible to move the other views up reacting to a height change of the textfield...",
      "ts": "1666296594.356939",
      "thread_ts": "1666296594.356939",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666296620.243739",
      "reactions": [
        {
          "name": "white_check_mark",
          "count": 1,
          "users": [
            "U046963BN78"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "1hpg",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045MMSNB3R"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Let\\u2019s say we have a TextField with a lineLimit(1\\u20265).\\nThe textfield is in a HStack that is in a VStack, and the VStack contains more views on top of the textfield.\\nThe problem I have is that when the textfield grows the rest of the views are not scrolling up and they get overlapped.\\nI don\\u2019t know how can I detect when the height of the textfield has changed? Not sure neither if It will be possible to move the other views up reacting to a height change of the textfield...\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "77802190-8691-4f07-a516-0038bd298843",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "Is your content inside of a ScrollView / List / some other scrollable container?",
          "ts": "1666296620.243739",
          "thread_ts": "1666296594.356939",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lTpJ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Is your content inside of a ScrollView / List / some other scrollable container?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046QGJ6B3M\u003e asked\n\u0026gt; I often want to layout various widgets based on the longest or shortest text in a list. What's the best way to measure the size in points of a text in the given font, in the current geometry, given that dynamic text sizes can change while the app is running?",
      "ts": "1666296653.047779",
      "thread_ts": "1666296653.047779",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 6,
      "latest_reply": "1666296903.781359",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "gdhP",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046QGJ6B3M"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I often want to layout various widgets based on the longest or shortest text in a list. What's the best way to measure the size in points of a text in the given font, in the current geometry, given that dynamic text sizes can change while the app is running?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "89132559-34ec-430d-9e61-9244e949bce4",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "Hi! This is supported by our new layout protocol. The full implementation for any custom layout is longer than I can quickly sketch out in a post here, but the general idea would be that you could create a layout which queries the ideal size of its children and orders them accordingly. You could then compose that with a vertical or horizontal stack layout so you don’t need to do all the implementation legwork yourself.",
          "ts": "1666296660.905469",
          "thread_ts": "1666296653.047779",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "9QGw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi! This is supported by our new layout protocol. The full implementation for any custom layout is longer than I can quickly sketch out in a post here, but the general idea would be that you could create a layout which queries the ideal size of its children and orders them accordingly. You could then compose that with a vertical or horizontal stack layout so you don’t need to do all the implementation legwork yourself."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f7dc40a7-f224-444d-9d81-e1650bceff67",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "I get that. My question was more: what's the actual mechanism for measuring how high and wide a piece of text is in the current geometry.",
          "ts": "1666296724.678249",
          "thread_ts": "1666296653.047779",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3anxh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I get that. My question was more: what's the actual mechanism for measuring how high and wide a piece of text is in the current geometry."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0f6d854d-111e-4872-92ba-dc3f1427c9d2",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "func getSize(text: Text) -\u0026gt; CGSize {?}",
          "ts": "1666296758.998339",
          "thread_ts": "1666296653.047779",
          "edited": {
            "user": "U046QGJ6B3M",
            "ts": "1666296782.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4IR8",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "func getSize(text: Text) -\u003e CGSize {?}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b0dfc63f-9b55-4bf4-8cb6-a66d861a60dd",
          "type": "message",
          "user": "U04583CAUAG",
          "text": "\u003chttps://developer.apple.com/documentation/swiftui/layoutsubview/dimensions(in:)\u003e",
          "ts": "1666296846.174369",
          "thread_ts": "1666296653.047779",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "LZhVo",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/documentation/swiftui/layoutsubview/dimensions(in:)",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ba759ae9-3d7b-4dbe-a402-be2cf16bd59e",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Sweet. That looks exactly like what I wanted. Thanks!",
          "ts": "1666296901.413319",
          "thread_ts": "1666296653.047779",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "tada",
              "count": 2,
              "users": [
                "U04583CAUAG",
                "U0478BJ4UPK"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Zrx6t",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Sweet. That looks exactly like what I wanted. Thanks!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4df116db-2e73-4879-a743-b112a3cc4ef1",
          "type": "message",
          "user": "U04583CAUAG",
          "text": "you would call this method on a LayoutSubview to get the dimensions of the Text inside your custom layout",
          "ts": "1666296903.781359",
          "thread_ts": "1666296653.047779",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "GgQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "you would call this method on a LayoutSubview to get the dimensions of the Text inside your custom layout"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046TD30QBS\u003e asked\n\u0026gt; How do I implement a scroll view that's normally aligned at the bottom that doesn't have terrible performance on macOS? I'm following the common solution of rotating the scrollview and each cell inside to get the expected inverted list, and it works, but on macOS it makes CPU usage stay at 100%, so it's only good for iOS at this time.",
      "ts": "1666296704.870689",
      "thread_ts": "1666296704.870689",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 3,
      "latest_reply": "1666299064.509989",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "QPYIF",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046TD30QBS"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How do I implement a scroll view that's normally aligned at the bottom that doesn't have terrible performance on macOS? I'm following the common solution of rotating the scrollview and each cell inside to get the expected inverted list, and it works, but on macOS it makes CPU usage stay at 100%, so it's only good for iOS at this time.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "7f2f1b98-9c6a-4950-9e57-6cba852f62bc",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "You best option would be to use a ScrollView and ScrollViewReader and scroll to the bottom most view in an onAppear or when new content comes in.\n\nI would not recommend trying to rotate the scroll view.",
          "ts": "1666296772.440839",
          "thread_ts": "1666296704.870689",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "SkUgc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You best option would be to use a ScrollView and ScrollViewReader and scroll to the bottom most view in an onAppear or when new content comes in.\n\nI would not recommend trying to rotate the scroll view."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e53ac6fc-2663-44ba-a43b-540209470be9",
          "type": "message",
          "user": "U046TD30QBS",
          "text": "I understand, but the programmatic scroll is visibly jarring and can be inconsistent if the scroll call is done while more content is being added to the scroll view. On any chat app, they already render initially aligned at the bottom. Would you consider this a limitation of SwiftUI? Should I abandon SwiftUI on this screen?",
          "ts": "1666298945.984579",
          "thread_ts": "1666296704.870689",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "558",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I understand, but the programmatic scroll is visibly jarring and can be inconsistent if the scroll call is done while more content is being added to the scroll view. On any chat app, they already render initially aligned at the bottom. Would you consider this a limitation of SwiftUI? Should I abandon SwiftUI on this screen?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7c691dab-a920-4a39-85a2-7ce5d115eac6",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "If you’re not able to use a ScrollViewrReader to accomplish this, then yes I wouldn’t recommend using ScrollView for this use case.",
          "ts": "1666299064.509989",
          "thread_ts": "1666296704.870689",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "GjRmy",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you’re not able to use a ScrollViewrReader to accomplish this, then yes I wouldn’t recommend using ScrollView for this use case."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045P29PG0P\u003e asked\n\u0026gt; Is there a way to use List in a fully customizable way so in a way I could remove indentations, separator lines and even edit the whole frame's padding, etc?\n\u0026gt; I feel like if I need full customization I always go to LazyHStacks instead.",
      "ts": "1666296764.484399",
      "thread_ts": "1666296764.484399",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666296792.381209",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "VJVnD",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045P29PG0P"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is there a way to use List in a fully customizable way so in a way I could remove indentations, separator lines and even edit the whole frame's padding, etc?\\nI feel like if I need full customization I always go to LazyHStacks instead.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "3fe4fc9c-63c6-40e8-81b8-3e795e5b11ce",
          "type": "message",
          "user": "U0452LR9TRB",
          "text": "There are a variety of modifiers that enable this: `listRowSeparator(_:)`, `listRowInsets(_:)`. The entire list padding is not supported, please file a feedback for that.",
          "ts": "1666296792.381209",
          "thread_ts": "1666296764.484399",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=JrnO",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There are a variety of modifiers that enable this: "
                    },
                    {
                      "type": "text",
                      "text": "listRowSeparator(_:)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", "
                    },
                    {
                      "type": "text",
                      "text": "listRowInsets(_:)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ". The entire list padding is not supported, please file a feedback for that."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0476JSMVUH\u003e asked\n\u0026gt; Is there a way to programmatically set the focus of the search field in the `.searchable()` modifier?",
      "ts": "1666296795.353389",
      "thread_ts": "1666296795.353389",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 4,
      "latest_reply": "1666298934.703979",
      "reactions": [
        {
          "name": "eyes",
          "count": 1,
          "users": [
            "U045W2MK4UW"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "qKJkf",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0476JSMVUH"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is there a way to programmatically set the focus of the search field in the `.searchable()` modifier?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "ef033984-9bbf-4820-b6e0-09bd637849b8",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "You can programmatically dismiss the search field using the `dismissSearch` environment property. There is no API at this time to programmatically focus the search field.",
          "ts": "1666296848.945429",
          "thread_ts": "1666296795.353389",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "disappointed_relieved",
              "count": 1,
              "users": [
                "U0464M23S4C"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "w2Y",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can programmatically dismiss the search field using the "
                    },
                    {
                      "type": "text",
                      "text": "dismissSearch",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " environment property. There is no API at this time to programmatically focus the search field."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4df7ee1d-e225-4f78-b5c0-5f0cd04c915a",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Could @FocusState work?",
          "ts": "1666297104.854199",
          "thread_ts": "1666296795.353389",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "L2pC7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Could @FocusState work?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a9589993-b462-4c62-9962-ea09528cde83",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "No. There’s nothing that you can attach the `focused(_:equals)` modifier to hook that up correctly.",
          "ts": "1666297157.043489",
          "thread_ts": "1666296795.353389",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "HkMY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "No. There’s nothing that you can attach the "
                    },
                    {
                      "type": "text",
                      "text": "focused(_:equals)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " modifier to hook that up correctly."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "bd5901f3-65e9-4c3e-b0eb-d3a4a498593c",
          "type": "message",
          "user": "U0476JSMVUH",
          "text": "Thanks. Feedback filed: FB11708327",
          "ts": "1666298934.703979",
          "thread_ts": "1666296795.353389",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7VT",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks. Feedback filed: FB11708327"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046VDLDYKT\u003e asked\n\u0026gt; I'm facing a problem when I using @Binding. The projectedValue of Binding will reset to the initial value in some cases.\n\u0026gt; \n\u0026gt; code\n\u0026gt; ```\n\u0026gt; import SwiftUI\n\u0026gt; import UIKit\n\u0026gt; \n\u0026gt; struct EditingView: View {\n\u0026gt;   @State var text: String = \"initial\"\n\u0026gt; \n\u0026gt;   var body: some View {\n\u0026gt;     DemoTextView(text: $text)\n\u0026gt;   }\n\u0026gt; }\n\u0026gt; \n\u0026gt; struct DemoTextView: UIViewRepresentable {\n\u0026gt;   @Binding var text: String\n\u0026gt; \n\u0026gt;   func makeUIView(context: Context) -\u0026gt; UITextView {\n\u0026gt;     let textView = UITextView()\n\u0026gt;     textView.delegate = context.coordinator\n\u0026gt;     return textView\n\u0026gt;   }\n\u0026gt; \n\u0026gt;   func updateUIView(_ textView: UITextView, context: Context) {\n\u0026gt;     print(\"text: \\(text), coordinator.text \\(context.coordinator.text)\")\n\u0026gt; \n\u0026gt;     textView.text = text\n\u0026gt; \n\u0026gt;   }\n\u0026gt; \n\u0026gt;   func makeCoordinator() -\u0026gt; Coordinator {\n\u0026gt;     return Coordinator(text: $text)\n\u0026gt;   }\n\u0026gt; \n\u0026gt;   final class Coordinator: NSObject, UITextViewDelegate {\n\u0026gt;     @Binding var text: String\n\u0026gt; \n\u0026gt;     init(text: Binding\u0026lt;String\u0026gt;) {\n\u0026gt;       _text = text\n\u0026gt;     }\n\u0026gt; \n\u0026gt;     func textViewDidChange(_ textView: UITextView) {\n\u0026gt;       print(\"textViewDidChange: \\(text)\")\n\u0026gt; \n\u0026gt;       text = textView.text\n\u0026gt;     }\n\u0026gt;   }\n\u0026gt; }\n\u0026gt; ```\n\u0026gt; \n\u0026gt; If you type something in the textfield and check the debugger log, the log in `textViewDidChange(_:)` is correct,  but the log in `updateUIView(: context:)` always says that `context.coordinator.text` value is `initial`, which is the initial value of `EditingView.text`.\n\u0026gt; \n\u0026gt; I would like to know is there anything wrong with my usage of @Binding or UIViewRepresentable that caused this issue?",
      "ts": "1666296886.810949",
      "thread_ts": "1666296886.810949",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666296902.563949",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "tVj5",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046VDLDYKT"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I'm facing a problem when I using @Binding. The projectedValue of Binding will reset to the initial value in some cases.\\n\\ncode\\n```\\nimport SwiftUI\\nimport UIKit\\n\\nstruct EditingView: View {\\n  @State var text: String = \\\"initial\\\"\\n\\n  var body: some View {\\n    DemoTextView(text: $text)\\n  }\\n}\\n\\nstruct DemoTextView: UIViewRepresentable {\\n  @Binding var text: String\\n\\n  func makeUIView(context: Context) -\u003e UITextView {\\n    let textView = UITextView()\\n    textView.delegate = context.coordinator\\n    return textView\\n  }\\n\\n  func updateUIView(_ textView: UITextView, context: Context) {\\n    print(\\\"text: \\\\(text), coordinator.text \\\\(context.coordinator.text)\\\")\\n\\n    textView.text = text\\n\\n  }\\n\\n  func makeCoordinator() -\u003e Coordinator {\\n    return Coordinator(text: $text)\\n  }\\n\\n  final class Coordinator: NSObject, UITextViewDelegate {\\n    @Binding var text: String\\n\\n    init(text: Binding\u003cString\u003e) {\\n      _text = text\\n    }\\n\\n    func textViewDidChange(_ textView: UITextView) {\\n      print(\\\"textViewDidChange: \\\\(text)\\\")\\n\\n      text = textView.text\\n    }\\n  }\\n}\\n```\\n\\nIf you type something in the textfield and check the debugger log, the log in `textViewDidChange(_:)` is correct,  but the log in `updateUIView(: context:)` always says that `context.coordinator.text` value is `initial`, which is the initial value of `EditingView.text`.\\n\\nI would like to know is there anything wrong with my usage of @Binding or UIViewRepresentable that caused this issue?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "77ec35e8-abd9-4afb-a8a8-e3191498ef75",
          "type": "message",
          "user": "U0452LR9TRB",
          "text": "Your binding might have changed its location, you need to handle the binding _itself_ changing; so your `updateUIView` needs to have `coordinator._text = $text`. That might help, can't say whether it will fix this specific bug.",
          "ts": "1666296902.563949",
          "thread_ts": "1666296886.810949",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U046VDLDYKT"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gN3p",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Your binding might have changed its location, you need to handle the binding "
                    },
                    {
                      "type": "text",
                      "text": "itself",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " changing; so your "
                    },
                    {
                      "type": "text",
                      "text": "updateUIView",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " needs to have "
                    },
                    {
                      "type": "text",
                      "text": "coordinator._text = $text",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ". That might help, can't say whether it will fix this specific bug."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046KUR7658\u003e asked\n\u0026gt; How do you build a WrappingHStack? A WrappingHStack is UI Element that works in a very similar way to HStack, but automatically positions overflowing elements on next lines. Our current solution involve a GeometryReader with a lot of frame calculations. Is there is a better approach to this problem?",
      "ts": "1666297075.866589",
      "thread_ts": "1666297075.866589",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666299787.614429",
      "reactions": [
        {
          "name": "+1",
          "count": 4,
          "users": [
            "U046234QRRD",
            "U04713BK29G",
            "U0479LNTCTS",
            "U045WJCT7GW"
          ]
        },
        {
          "name": "eyes",
          "count": 4,
          "users": [
            "U046797427P",
            "U0465NRPTPW",
            "U046Q036MD2",
            "U046KTUHXQA"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "wkW",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046KUR7658"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How do you build a WrappingHStack? A WrappingHStack is UI Element that works in a very similar way to HStack, but automatically positions overflowing elements on next lines. Our current solution involve a GeometryReader with a lot of frame calculations. Is there is a better approach to this problem?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "83762CD1-CB7D-4C88-9B18-A1CD2889437C",
          "type": "message",
          "user": "U046S4P76FJ",
          "text": "If you can afford to use the latest OS versions, you can implement custom arrangements using the Layout protocol. \n\nPlease check out my Flow layout implementation, this might just be what you need:\n\u003chttps://github.com/tevelee/SwiftUI-Flow|https://github.com/tevelee/SwiftUI-Flow\u003e",
          "ts": "1666299787.614429",
          "thread_ts": "1666297075.866589",
          "attachments": [
            {
              "fallback": "GitHub: GitHub - tevelee/SwiftUI-Flow: Flow Layout implemented in SwiftUI",
              "id": 1,
              "title": "GitHub - tevelee/SwiftUI-Flow: Flow Layout implemented in SwiftUI",
              "title_link": "https://github.com/tevelee/SwiftUI-Flow",
              "text": "Flow Layout implemented in SwiftUI. Contribute to tevelee/SwiftUI-Flow development by creating an account on GitHub.",
              "image_url": "https://opengraph.githubassets.com/f526f62956993c0104421d5f73428c2a0fc4991056fa547dae7b7b8b353e2812/tevelee/SwiftUI-Flow",
              "service_name": "GitHub",
              "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
              "from_url": "https://github.com/tevelee/SwiftUI-Flow",
              "original_url": "https://github.com/tevelee/SwiftUI-Flow",
              "blocks": null
            }
          ],
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U046KUR7658",
                "U046VDLDYKT"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "1rZc",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you can afford to use the latest OS versions, you can implement custom arrangements using the Layout protocol."
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "text",
                      "text": "\n\nPlease check out my Flow layout implementation, this might just be what you need:\n"
                    },
                    {
                      "type": "link",
                      "url": "https://github.com/tevelee/SwiftUI-Flow",
                      "text": "https://github.com/tevelee/SwiftUI-Flow"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464SKECHJ\u003e asked\n\u0026gt; # Problem:\n\u0026gt; On macOS in a NavigationSplitView when the menu button is added to the detail view toolbar, it seems to look disabled\n\u0026gt; It is actually is not disabled but looks disabled, am I missing something? (FB11661364)\n\u0026gt; \n\u0026gt; \n\u0026gt; ```\n\u0026gt; struct ContentView: View {\n\u0026gt;     \n\u0026gt;     @State private var selectedNumber: Int?\n\u0026gt;     \n\u0026gt;     var body: some View {\n\u0026gt;         \n\u0026gt;         NavigationSplitView {\n\u0026gt;             List(0..\u0026lt;100, selection: $selectedNumber) { number in\n\u0026gt;                 Text(\"cell \\(number)\")\n\u0026gt;             }\n\u0026gt;         } detail: {\n\u0026gt;             Text(\"Detail\")\n\u0026gt;                 .toolbar {\n\u0026gt;                     ToolbarItem {\n\u0026gt;                         Menu {\n\u0026gt;                             Button(\"aa\") {}\n\u0026gt;                             Button(\"bb\") {}\n\u0026gt;                         } label: {\n\u0026gt;                             Label(\"Add Bookmark\", systemImage: \"book\")\n\u0026gt;                         }\n\u0026gt;                     }\n\u0026gt;                 }\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; ```",
      "ts": "1666297096.402109",
      "thread_ts": "1666297096.402109",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 8,
      "latest_reply": "1666298448.205689",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "3KYOA",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464SKECHJ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"# Problem:\\nOn macOS in a NavigationSplitView when the menu button is added to the detail view toolbar, it seems to look disabled\\nIt is actually is not disabled but looks disabled, am I missing something? (FB11661364)\\n\\n\\n```\\nstruct ContentView: View {\\n    \\n    @State private var selectedNumber: Int?\\n    \\n    var body: some View {\\n        \\n        NavigationSplitView {\\n            List(0..\u003c100, selection: $selectedNumber) { number in\\n                Text(\\\"cell \\\\(number)\\\")\\n            }\\n        } detail: {\\n            Text(\\\"Detail\\\")\\n                .toolbar {\\n                    ToolbarItem {\\n                        Menu {\\n                            Button(\\\"aa\\\") {}\\n                            Button(\\\"bb\\\") {}\\n                        } label: {\\n                            Label(\\\"Add Bookmark\\\", systemImage: \\\"book\\\")\\n                        }\\n                    }\\n                }\\n        }\\n    }\\n}\\n```\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "82da0879-8ac3-4f59-9e4a-48a03d87da45",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "Running this code, I see a similar effect, the toolbar button often looks disabled, but not always. And once I hover over it, is remains enabled until backgrounding and then foregrounding the app Is that consistent with what you've seen \u003c@U0464SKECHJ\u003e?",
          "ts": "1666297152.453939",
          "thread_ts": "1666297096.402109",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0464SKECHJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "JIBg",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Running this code, I see a similar effect, the toolbar button often looks disabled, but not always. And once I hover over it, is remains enabled until backgrounding and then foregrounding the app Is that consistent with what you've seen "
                    },
                    {
                      "type": "user",
                      "user_id": "U0464SKECHJ"
                    },
                    {
                      "type": "text",
                      "text": "?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ce047ee8-e0bf-41b6-9d44-a8534b324e19",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "Thank you for this repo. I can file a bug myself for this, but lmk if you'd like to file a feedback to be able to track it for your purposes",
          "ts": "1666297183.301959",
          "thread_ts": "1666297096.402109",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "H/2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you for this repo. I can file a bug myself for this, but lmk if you'd like to file a feedback to be able to track it for your purposes"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "199adaf5-5d62-419c-9e6c-3a3870da5d0b",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "Yes that is the same effect I am seeing as well",
          "ts": "1666297214.631509",
          "thread_ts": "1666297096.402109",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "hTYP=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yes that is the same effect I am seeing as well"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "88974821-b4b8-4873-90df-ff54dfadeb97",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "Oh nvm, I see your FB right there in the message",
          "ts": "1666297288.741309",
          "thread_ts": "1666297096.402109",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0464SKECHJ"
              ]
            },
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U0464SKECHJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bZKf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Oh nvm, I see your FB right there in the message"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "72c51b58-4770-482a-8605-c0070191c2fd",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "\u003c@U04583CD3FE\u003e Feedback ID is FB11661364",
          "ts": "1666297290.707829",
          "thread_ts": "1666297096.402109",
          "files": [
            {
              "id": "F047CSNEZU5",
              "created": 1666297260,
              "timestamp": 1666297260,
              "name": "ToolbarMenuButtonBug.mov",
              "title": "ToolbarMenuButtonBug.mov",
              "mimetype": "application/octet-stream",
              "image_exif_rotation": 0,
              "filetype": "binary",
              "pretty_type": "Binary",
              "user": "U0464SKECHJ",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 256,
              "url": "",
              "url_download": "",
              "url_private": "C043025CS59/F047CSNEZU5-ToolbarMenuButtonBug.mov",
              "url_private_download": "C043025CS59/F047CSNEZU5-ToolbarMenuButtonBug.mov",
              "original_h": 0,
              "original_w": 0,
              "thumb_64": "",
              "thumb_80": "",
              "thumb_160": "",
              "thumb_360": "",
              "thumb_360_gif": "",
              "thumb_360_w": 0,
              "thumb_360_h": 0,
              "thumb_480": "",
              "thumb_480_w": 0,
              "thumb_480_h": 0,
              "thumb_720": "",
              "thumb_720_w": 0,
              "thumb_720_h": 0,
              "thumb_960": "",
              "thumb_960_w": 0,
              "thumb_960_h": 0,
              "thumb_1024": "",
              "thumb_1024_w": 0,
              "thumb_1024_h": 0,
              "permalink": "https://appleevents.enterprise.slack.com/files/U0464SKECHJ/F047CSNEZU5/toolbarmenubuttonbug.mov",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047CSNEZU5-f33d62c0b3",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vLZAW",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U04583CD3FE"
                    },
                    {
                      "type": "text",
                      "text": " Feedback ID is FB11661364"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c62b998e-c271-4d2c-9920-f47db6061f13",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "\u003c@U04583CD3FE\u003e\nI have noticed some more bugs with Toolbar items with secondary actions placements, seems quite inconsistent.  `FB11517536`\nI have also posted a question as well.  Would appreciate it if you could have a look at it as well, Thank you so much!!",
          "ts": "1666297521.026389",
          "thread_ts": "1666297096.402109",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "kXew",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U04583CD3FE"
                    },
                    {
                      "type": "text",
                      "text": "\nI have noticed some more bugs with Toolbar items with secondary actions placements, seems quite inconsistent.  "
                    },
                    {
                      "type": "text",
                      "text": "FB11517536",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\nI have also posted a question as well.  Would appreciate it if you could have a look at it as well, Thank you so much!!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "24648809-7cbc-4e5a-a8b7-553b90241575",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "Thanks for those Muthuveerappan. The repro cases are much appreciated. We'd like to have these behave better.",
          "ts": "1666298199.008649",
          "thread_ts": "1666297096.402109",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U0464SKECHJ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "IDqH",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks for those Muthuveerappan. The repro cases are much appreciated. We'd like to have these behave better."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0a8be4fc-d57e-4cae-ac8c-83481c1d2aed",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "Welcome, I am so thrilled you got to have a look at it, I have so many feedbacks open :smile:. Really appreciate it",
          "ts": "1666298448.205689",
          "thread_ts": "1666297096.402109",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FcVo",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Welcome, I am so thrilled you got to have a look at it, I have so many feedbacks open "
                    },
                    {
                      "type": "emoji",
                      "name": "smile",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": ". Really appreciate it"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0460BADXM3\u003e asked\n\u0026gt; We have some logic written with Combine, and we are introducing Swift Concurrency as well. However, we can't figure out how to modify a `@MainActor` property inside a combine block. the compiler always complains even though the pipeline has `.receive(on : DispatchQueue.main)` modifier. We also tried to explicitly call `DispatchQueue.main.sync{}` inside the `.sink` modifier but the compiler still doesn't like it.",
      "ts": "1666297124.200519",
      "thread_ts": "1666297124.200519",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 6,
      "latest_reply": "1666298465.494259",
      "reactions": [
        {
          "name": "eyes",
          "count": 3,
          "users": [
            "U046KUR7658",
            "U046Q036MD2",
            "U046KTUHXQA"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "BmW",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0460BADXM3"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"We have some logic written with Combine, and we are introducing Swift Concurrency as well. However, we can't figure out how to modify a `@MainActor` property inside a combine block. the compiler always complains even though the pipeline has `.receive(on : DispatchQueue.main)` modifier. We also tried to explicitly call `DispatchQueue.main.sync{}` inside the `.sink` modifier but the compiler still doesn't like it.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "09257a97-7604-4df0-a964-dadb1f3429cb",
          "type": "message",
          "user": "U046X1TKCG7",
          "text": "more generally on this - what is it about `DispatchQueue.main.async { \u0026lt;code\u0026gt; }` that allows the compiler to know that the block is running on main?\n\nIs this something we can implement in our own code?\n\n`CustomRunner.onMain() { \u0026lt;some code\u0026gt; }`\n\n I _know_ this block runs on @MainActor - can I let the compiler know in my onMain function definition???",
          "ts": "1666297315.246239",
          "thread_ts": "1666297124.200519",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UMf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "more generally on this - what is it about "
                    },
                    {
                      "type": "text",
                      "text": "DispatchQueue.main.async { \u003ccode\u003e }",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " that allows the compiler to know that the block is running on main?\n\nIs this something we can implement in our own code?\n\n"
                    },
                    {
                      "type": "text",
                      "text": "CustomRunner.onMain() { \u003csome code\u003e }",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n\n I "
                    },
                    {
                      "type": "text",
                      "text": "know",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " this block runs on @MainActor - can I let the compiler know in my onMain function definition???"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ebc0488a-ebd6-4b14-b044-0be56ad2b300",
          "type": "message",
          "user": "U0460AEFDU5",
          "text": "would receiving on `RunLoop.main` make a difference?",
          "ts": "1666297881.944879",
          "thread_ts": "1666297124.200519",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "CGblP",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "would receiving on "
                    },
                    {
                      "type": "text",
                      "text": "RunLoop.main",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " make a difference?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c575f4ff-f29c-4562-868b-f77c671c3a1e",
          "type": "message",
          "user": "U046797427P",
          "text": "There’s some interesting ideas here that might be applicable: \u003chttps://www.avanderlee.com/swift/mainactor-dispatch-main-thread/\u003e",
          "ts": "1666297887.284329",
          "thread_ts": "1666297124.200519",
          "attachments": [
            {
              "fallback": "SwiftLee: MainActor usage in Swift explained to dispatch to the main thread",
              "id": 1,
              "title": "MainActor usage in Swift explained to dispatch to the main thread",
              "title_link": "https://www.avanderlee.com/swift/mainactor-dispatch-main-thread/",
              "text": "MainActor in Swift replaces DispatchQueue.main and ensures tasks are performing on the main thread in a performant manner.",
              "image_url": "https://swiftlee-banners.herokuapp.com/imagegenerator.php?title=MainActor+usage+in+Swift+explained+to+dispatch+to+the+main+thread",
              "service_name": "SwiftLee",
              "service_icon": "https://www.avanderlee.com/wp-content/uploads/fbrfg/apple-touch-icon.png?v=2",
              "from_url": "https://www.avanderlee.com/swift/mainactor-dispatch-main-thread/",
              "original_url": "https://www.avanderlee.com/swift/mainactor-dispatch-main-thread/",
              "fields": [
                {
                  "title": "Written by",
                  "value": "Antoine van der Lee",
                  "short": true
                },
                {
                  "title": "Est. reading time",
                  "value": "5 minutes",
                  "short": true
                }
              ],
              "blocks": null,
              "ts": 1625558062
            }
          ],
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FoAIs",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There’s some interesting ideas here that might be applicable: "
                    },
                    {
                      "type": "link",
                      "url": "https://www.avanderlee.com/swift/mainactor-dispatch-main-thread/",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d5040c07-fd4d-40c7-be12-bb33298a0e6e",
          "type": "message",
          "user": "U046797427P",
          "text": "In particular:\n```@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)\nextension MainActor {\n/// Execute the given body closure on the main actor.\n  public static func run\u0026lt;T\u0026gt;(resultType: T.Type = T.self, body: @MainActor @Sendable () throws -\u0026gt; T) async rethrows -\u0026gt; T\n}```",
          "ts": "1666297912.478049",
          "thread_ts": "1666297124.200519",
          "edited": {
            "user": "U046797427P",
            "ts": "1666297962.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "U6Zt",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In particular:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)\\nextension MainActor {\\n\\/\\/\\/ Execute the given body closure on the main actor.\\n  public static func run\u003cT\u003e(resultType: T.Type = T.self, body: @MainActor @Sendable () throws -\u003e T) async rethrows -\u003e T\\n}\"}],\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a189d6a9-8aa9-48af-b66c-a824a28856cf",
          "type": "message",
          "user": "U0460BADXM3",
          "text": "the example they gave is\n```async {\n    await MainActor.run {\n        // Perform UI updates\n    }\n}```\nbut how do we use such a block inside a `sink` in Combine? what if I want to use it inside a `map` and need the result synchronously?",
          "ts": "1666298003.239069",
          "thread_ts": "1666297124.200519",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "u5U",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "the example they gave is\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"async {\\n    await MainActor.run {\\n        \\/\\/ Perform UI updates\\n    }\\n}\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "but how do we use such a block inside a "
                    },
                    {
                      "type": "text",
                      "text": "sink",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " in Combine? what if I want to use it inside a "
                    },
                    {
                      "type": "text",
                      "text": "map",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and need the result synchronously?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a0469cec-7988-4866-bf07-d17ded9f5e9d",
          "type": "message",
          "user": "U046797427P",
          "text": "I don’t really have a full grasp on your use case here of course, but inside the sync you can wrap the code you’re calling in\n```Task { … } ```\nSo it’s possible the solution in some cases related to what is discussed here is to simply call in your `sink`\n```Task { @MainActor in ... }```",
          "ts": "1666298465.494259",
          "thread_ts": "1666297124.200519",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "B+wf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I don’t really have a full grasp on your use case here of course, but inside the sync you can wrap the code you’re calling in\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"Task { \\u2026 } \"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "So it’s possible the solution in some cases related to what is discussed here is to simply call in your "
                    },
                    {
                      "type": "text",
                      "text": "sink",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"Task { @MainActor in ... }\"}],\"border\":0}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045QB05AVD\u003e asked\n\u0026gt; Hi, many thanks for this initiative. I'm attempting to push a detail view onto a navigation stack when clicking/tapping on an image in a HStack (essentially the same UX as the Photos app All Photos view):\n\u0026gt; ```\n\u0026gt; ForEach(model.photos) { url in\n\u0026gt;     NavigationLink(destination: PhotoDetailView(photoURL: url)) {\n\u0026gt;         AsyncImage(url: url) { phase in\n\u0026gt;             if let image = phase.image {\n\u0026gt;                 image.resizable().aspectRatio(contentMode: .fit)\n\u0026gt;             }\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt;  }\n\u0026gt; ```\n\u0026gt; This works as expected, but on macOS it forces the resulting images to be embedded inside of a button, and their height is constrained to a standard button height. Is there any way for them to be presented as a pain image without the button?  Many thanks in advance.",
      "ts": "1666297148.808519",
      "thread_ts": "1666297148.808519",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 5,
      "latest_reply": "1666379226.817019",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "7Wj+",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045QB05AVD"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hi, many thanks for this initiative. I'm attempting to push a detail view onto a navigation stack when clicking\\/tapping on an image in a HStack (essentially the same UX as the Photos app All Photos view):\\n```\\nForEach(model.photos) { url in\\n    NavigationLink(destination: PhotoDetailView(photoURL: url)) {\\n        AsyncImage(url: url) { phase in\\n            if let image = phase.image {\\n                image.resizable().aspectRatio(contentMode: .fit)\\n            }\\n        }\\n    }\\n }\\n```\\nThis works as expected, but on macOS it forces the resulting images to be embedded inside of a button, and their height is constrained to a standard button height. Is there any way for them to be presented as a pain image without the button?  Many thanks in advance.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "3023fa3c-c6db-4d0b-91ed-e785f466917a",
          "type": "message",
          "user": "U04583CAUAG",
          "text": "Hi there, you should be able to apply a `.buttonStyle(.plain)` modifier to your NavigationLink above to get the desired appearance. Let us know if you run into any issues!",
          "ts": "1666297196.959619",
          "thread_ts": "1666297148.808519",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "100",
              "count": 1,
              "users": [
                "U045QB05AVD"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Mh6g6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi there, you should be able to apply a "
                    },
                    {
                      "type": "text",
                      "text": ".buttonStyle(.plain)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " modifier to your NavigationLink above to get the desired appearance. Let us know if you run into any issues!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "A741CBF7-214E-44B2-8DE0-9E6BC6B0C7E6",
          "type": "message",
          "user": "U045QB05AVD",
          "text": "Thanks \u003c@U04583CAUAG\u003e - I _think_ I tried that but I’ll give it another go!",
          "ts": "1666297299.339069",
          "thread_ts": "1666297148.808519",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U04583CAUAG"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ieIMj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks "
                    },
                    {
                      "type": "user",
                      "user_id": "U04583CAUAG"
                    },
                    {
                      "type": "text",
                      "text": " - I "
                    },
                    {
                      "type": "text",
                      "text": "think",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " I tried that "
                    },
                    {
                      "type": "text",
                      "text": "b"
                    },
                    {
                      "type": "text",
                      "text": "ut "
                    },
                    {
                      "type": "text",
                      "text": "I’ll"
                    },
                    {
                      "type": "text",
                      "text": " give it another go!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ced21a63-603a-4258-88da-3a30c727b5d3",
          "type": "message",
          "user": "U044JKF2JVA",
          "text": "That's a good general tip for styling buttons across platforms — if you want the button to be purely based on the content you've provided you can set `.buttonStyle(.plain)` for all platforms",
          "ts": "1666297393.218299",
          "thread_ts": "1666297148.808519",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U045QB05AVD",
                "U04583CAUAG"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "wp79v",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That's a good general tip for styling buttons across platforms — if you want the button to be purely based on the content you've provided you can set "
                    },
                    {
                      "type": "text",
                      "text": ".buttonStyle(.plain)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " for all platforms"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "521A9705-EADF-4C7A-96A4-7439C9DAD8A1",
          "type": "message",
          "user": "U045QB05AVD",
          "text": "\u003c@U04583CAUAG\u003e this sorted it - many thanks. I think I had been erroneously attaching that style to the image, rather than the navigation link! Great it was an easy fix! ",
          "ts": "1666379206.648539",
          "thread_ts": "1666297148.808519",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "tada",
              "count": 1,
              "users": [
                "U04583CAUAG"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mRH",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U04583CAUAG"
                    },
                    {
                      "type": "text",
                      "text": " this sorted it - many thanks. I think I had been erroneously attaching that style to the image, rather than the navigation link! Great it was an easy fix! "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4770cbf6-56b6-4e30-b2d2-f1c1188e11e6",
          "type": "message",
          "user": "U04583CAUAG",
          "text": "sweet!",
          "ts": "1666379226.817019",
          "thread_ts": "1666297148.808519",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EQ=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "sweet!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "4337595f-066e-4da9-ae05-d20f2a5a1770",
      "type": "message",
      "user": "U045J8S9EU9",
      "text": ":rotating_light: Just as a general PSA: As always, we can’t answer questions about future versions of SwiftUI. Additionally, in this format we can’t help with diagnosing problems with specific projects. For that, please reach out on the developer forums, and through \u003chttps://developer.apple.com/support/technical/|Developer Technical Support\u003e! For all your other SwiftUI needs though, keep those questions coming :tada:",
      "ts": "1666297280.681669",
      "attachments": [
        {
          "fallback": "Requesting Technical Support - Support - Apple Developer",
          "id": 1,
          "title": "Requesting Technical Support - Support - Apple Developer",
          "title_link": "https://developer.apple.com/support/technical/",
          "text": "Learn how to receive code-level help from an Apple engineer by submitting a Technical Support Incident.",
          "service_name": "developer.apple.com",
          "service_icon": "https://developer.apple.com/favicon.ico",
          "from_url": "https://developer.apple.com/support/technical/",
          "original_url": "https://developer.apple.com/support/technical/",
          "blocks": null
        }
      ],
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "partying_face",
          "count": 2,
          "users": [
            "U03V30M0C1K",
            "U0453US3GAJ"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "8W=",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "emoji",
                  "name": "rotating_light",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " Just as a general PSA: As always, we can’t answer questions about future versions of SwiftUI. Additionally, in this format we can’t help with diagnosing problems with specific projects. For that, please reach out on the developer forums, and through "
                },
                {
                  "type": "link",
                  "url": "https://developer.apple.com/support/technical/",
                  "text": "Developer Technical Support"
                },
                {
                  "type": "text",
                  "text": "! For all your other SwiftUI needs though, keep those questions coming "
                },
                {
                  "type": "emoji",
                  "name": "tada",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046YMT8Y58\u003e asked\n\u0026gt; How do I implement a SwiftUI TextField which accepts only numbers, decimals are allowable. ",
      "ts": "1666297494.110769",
      "thread_ts": "1666297494.110769",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 4,
      "latest_reply": "1666298146.920359",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "sUum",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046YMT8Y58"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How do I implement a SwiftUI TextField which accepts only numbers, decimals are allowable. \"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "30a20cae-d301-4b28-b123-57410e10e6b1",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "Ah yes. Good one! I second this: Best practice for a filtered TextField? I’ve used `.onReceive` but there’s a delay since it happens on the next runloop.",
          "ts": "1666297566.613939",
          "thread_ts": "1666297494.110769",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "m+q",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ah yes. Good one! I second this: Best practice for a filtered TextField? I’ve used "
                    },
                    {
                      "type": "text",
                      "text": ".onReceive",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " but there’s a delay since it happens on the next runloop."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e3fb7379-1120-4134-8eb4-b1fa94e4e1c3",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "You provide a `FormatStyle` to a text field to automatically convert the text to and from various kinds of numbers.\n\nHowever, this conversation will only occur when the text field is done editing and will not prevent non-numeric characters from being typed. There is no API currently that allows you to restrict the characters that a user can enter into the field itself.",
          "ts": "1666297575.114349",
          "thread_ts": "1666297494.110769",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U0464SKECHJ",
                "U046YMT8Y58"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EUs",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You provide a "
                    },
                    {
                      "type": "text",
                      "text": "FormatStyle",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to a text field to automatically convert the text to and from various kinds of numbers.\n\nHowever, this conversation will only occur when the text field is done editing and will not prevent non-numeric characters from being typed. There is no API currently that allows you to restrict the characters that a user can enter into the field itself."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "cf420d13-26e8-4e4b-ba14-724ff124d615",
          "type": "message",
          "user": "U046234QRRD",
          "text": "I use  this to filter out unwanted characters:\n\n    TextField(\"Neues Schlagwort eingeben\", text: $name)\n        .onChange(of: name) { newValue *in*\n            name = newValue.filter {\n                $0 != \"#\" \u0026amp;\u0026amp; $0 != \" \"\n            }\n        }",
          "ts": "1666297868.012519",
          "thread_ts": "1666297494.110769",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "53+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I use  this to filter out unwanted characters:\n\n    TextField(\"Neues Schlagwort eingeben\", text: $name)\n        .onChange(of: name) { newValue "
                    },
                    {
                      "type": "text",
                      "text": "in",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "\n            name = newValue.filter {\n                $0 != \"#\" \u0026\u0026 $0 != \" \"\n            }\n        }"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2BAF6DA3-9C82-476F-9012-223DFB7C80E7",
          "type": "message",
          "user": "U046YMT8Y58",
          "text": "Am developing an invoicing app and for this this kind of TextField is an absolute must. I want the users to see the total rate for a item change as they type the quantity. \n\nIn future if you bring this as a modifier, it would be great",
          "ts": "1666298146.920359",
          "thread_ts": "1666297494.110769",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vslpJ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Am developing an invoicing app and for this this kind of TextField is an absolute must. I want the users to see the "
                    },
                    {
                      "type": "text",
                      "text": "t"
                    },
                    {
                      "type": "text",
                      "text": "otal rate for a item"
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "text",
                      "text": "change as they type the quantity"
                    },
                    {
                      "type": "text",
                      "text": "."
                    },
                    {
                      "type": "text",
                      "text": " \n\nIn future if you bring this as a modifier, it would be great"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464M23S4C\u003e asked\n\u0026gt; If I remember correctly, a standard UIKit TabBar with NavigationViews that include ScrollViews has the following default behaviour you get for free:\n\u0026gt; \n\u0026gt; - First tap on tabBar changes the tab (obviously)\n\u0026gt; - If already in the correct tab, the tap on TabBar item pops the NavigationView to the root.\n\u0026gt; - If I am already in the correct tab, and in the NavigationView's root, the included ScrollView scrolls to top.\n\u0026gt; \n\u0026gt; An equivalent SwiftUI setup does nothing of this, and it seems like it's very hard to re-implement. Or should it already work and I did it wrong and it's a bug? (I might also mis-remember this, please correct me if I'm wrong!)",
      "ts": "1666297611.641449",
      "thread_ts": "1666297611.641449",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 3,
      "latest_reply": "1666298422.150049",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Y1BDo",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464M23S4C"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"If I remember correctly, a standard UIKit TabBar with NavigationViews that include ScrollViews has the following default behaviour you get for free:\\n\\n- First tap on tabBar changes the tab (obviously)\\n- If already in the correct tab, the tap on TabBar item pops the NavigationView to the root.\\n- If I am already in the correct tab, and in the NavigationView's root, the included ScrollView scrolls to top.\\n\\nAn equivalent SwiftUI setup does nothing of this, and it seems like it's very hard to re-implement. Or should it already work and I did it wrong and it's a bug? (I might also mis-remember this, please correct me if I'm wrong!)\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "536b9e0f-e3a9-494e-b01d-0cf8f593ad90",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "Thanks for the question. I’m afraid that’s a bug with the current behavior. There isn’t a great workaround today. We just need to fix the bug.",
          "ts": "1666297630.955309",
          "thread_ts": "1666297611.641449",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 5,
              "users": [
                "U0464M23S4C",
                "U045ZKHALFP",
                "U045MLXJX71",
                "U046367SLLB",
                "U0463CGC9T7"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "or+7I",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks for the question. I’m afraid that’s a bug with the current behavior. There isn’t a great workaround today. We just need to fix the bug."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "25741294-ac69-45b9-9ab5-ea0bc4c059be",
          "type": "message",
          "user": "U0464M23S4C",
          "text": "Thanks! Good to know I remembered it correctly. Then I’ll wait for the fix! :crossed_fingers:",
          "ts": "1666298040.835829",
          "thread_ts": "1666297611.641449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4si",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks! Good to know I remembered it correctly. Then I’ll wait for the fix! "
                    },
                    {
                      "type": "emoji",
                      "name": "crossed_fingers",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "bcb21bb8-11ce-4b76-af8b-86b214256ab6",
          "type": "message",
          "user": "U046Q036MD2",
          "text": "This is not that difficult to implement. In an ObservableObject that holds the reference to the selected tab you can do this:\n``` @Published var selectedTab: Tab = .home\n\n//... in init\n$selectedTab\n    .dropFirst()\n    .filter { [weak self] in self?.selectedTab == $0 } // when someone taps on the selected tab post a notification\n     .sink { [weak self] tab in\n         self?.\u003chttp://notificationCenter.post|notificationCenter.post\u003e(\n            CustomNotification.perform(\n                navigationRequest: NavigationRequest(for: tab)))\n      }\n      .store(in: \u0026amp;cancellables)```\nThen in ObservableObject for each root view you can listen to those notifications and act accordingly:\n```notificationCenter\n    .navigationStackPublisher(for: tab)\n    .receive(on: RunLoop.main)\n     .sink(receiveValue: { [weak self] in\n          if self?.navigationStack == nil {\n               // scroll to top\n               self?.scrollToTop()\n          } else {\n               // go back to home but keep place\n               self?.navigationStack = nil\n          }\n      })\n      .store(in: \u0026amp;navCancellable)```",
          "ts": "1666298422.150049",
          "thread_ts": "1666297611.641449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "TXsXL",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "This is not that difficult to implement. In an ObservableObject that holds the reference to the selected tab you can do this:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\" @Published var selectedTab: Tab = .home\\n\\n\\/\\/... in init\\n$selectedTab\\n    .dropFirst()\\n    .filter { [weak self] in self?.selectedTab == $0 } \\/\\/ when someone taps on the selected tab post a notification\\n     .sink { [weak self] tab in\\n         self?.notificationCenter.post(\\n            CustomNotification.perform(\\n                navigationRequest: NavigationRequest(for: tab)))\\n      }\\n      .store(in: \u0026cancellables)\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Then in ObservableObject for each root view you can listen to those notifications and act accordingly:\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"notificationCenter\\n    .navigationStackPublisher(for: tab)\\n    .receive(on: RunLoop.main)\\n     .sink(receiveValue: { [weak self] in\\n          if self?.navigationStack == nil {\\n               \\/\\/ scroll to top\\n               self?.scrollToTop()\\n          } else {\\n               \\/\\/ go back to home but keep place\\n               self?.navigationStack = nil\\n          }\\n      })\\n      .store(in: \u0026navCancellable)\"}],\"border\":0}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04728MG49X\u003e asked\n\u0026gt; If I had a custom container type that generically took in a top and bottom view, is there a way for the caller of the API to extend the background of the provided views beyond the safe area insets while keeping the content (like text or buttons) within the safe area insets?\n\u0026gt; \n\u0026gt; i.e. \n\u0026gt; ```\n\u0026gt; struct CustomContainer\u0026lt;TopView: View, BottomView: View\u0026gt;: View {\n\u0026gt;   //... topView and bottomView properties\n\u0026gt;   var body: some View {\n\u0026gt;     VStack {\n\u0026gt;       topView\n\u0026gt;       Spacer()\n\u0026gt;       bottomView // callsite of API can push the background view beyond safe area insets, but keep content respecting safe area?\n\u0026gt;     }\n\u0026gt;   }\n\u0026gt; }\n\u0026gt; ```",
      "ts": "1666297634.636259",
      "thread_ts": "1666297634.636259",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666297695.964839",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "5ug",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04728MG49X"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"If I had a custom container type that generically took in a top and bottom view, is there a way for the caller of the API to extend the background of the provided views beyond the safe area insets while keeping the content (like text or buttons) within the safe area insets?\\n\\ni.e. \\n```\\nstruct CustomContainer\u003cTopView: View, BottomView: View\u003e: View {\\n  \\/\\/... topView and bottomView properties\\n  var body: some View {\\n    VStack {\\n      topView\\n      Spacer()\\n      bottomView \\/\\/ callsite of API can push the background view beyond safe area insets, but keep content respecting safe area?\\n    }\\n  }\\n}\\n```\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "775213c7-3b09-45f9-a2da-8a83017627c2",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "You could try using the `safeAreaInset(edge: .top) { … }` or `safeAreaInset(edge: .bottom) { … }` modifier to place your top and bottom view. Then the top / bottom view could ignore safe areas. I’m not sure whether this will satisfy your use case, but would be worth a try.",
          "ts": "1666297695.964839",
          "thread_ts": "1666297634.636259",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "j2l",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You could try using the "
                    },
                    {
                      "type": "text",
                      "text": "safeAreaInset(edge: .top) { … }",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " or "
                    },
                    {
                      "type": "text",
                      "text": "safeAreaInset(edge: .bottom) { … }",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " modifier to place your top and bottom view. Then the top / bottom view could ignore safe areas. I’m not sure whether this will satisfy your use case, but would be worth a try."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0477UC4PPV\u003e asked\n\u0026gt; How can I pass a @State var down to a sub-view of a sub-view and still have it listen to events down the chain? I've been using @Binding but that only works down 1 sub-view from a main view.",
      "ts": "1666297699.940459",
      "thread_ts": "1666297699.940459",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666297705.206039",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "N03a",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0477UC4PPV"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How can I pass a @State var down to a sub-view of a sub-view and still have it listen to events down the chain? I've been using @Binding but that only works down 1 sub-view from a main view.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "4df75cae-283a-4b75-a753-9529d7df87e5",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "You should be able to pass the a binding down multiple level of the view tree.\n\nIt would be great if you could file a radar with a repro case or as much information about your code as you can so that we can take a look. Thanks!",
          "ts": "1666297705.206039",
          "thread_ts": "1666297699.940459",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "5vdDH",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You should be able to pass the a binding down multiple level of the view tree.\n\nIt would be great if you could file a radar with a repro case or as much information about your code as you can so that we can take a look. Thanks!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046963BN78\u003e asked\n\u0026gt; Why does the following code does not show an animated transition. \n\u0026gt; ```\n\u0026gt; struct ContentView: View {\n\u0026gt;     @State var isPresented = false\n\u0026gt;     var body: some View {\n\u0026gt;         VStack {\n\u0026gt;             Button(\"Toggle\") {\n\u0026gt;                 isPresented.toggle()\n\u0026gt;             }\n\u0026gt;             \n\u0026gt;             if isPresented {\n\u0026gt;                 Text(\"Hello world!\")\n\u0026gt;                     .transition(.move(edge: .top).animation(.default))\n\u0026gt;             }\n\u0026gt;         }\n\u0026gt;     }\n\u0026gt; }\n\u0026gt; ```",
      "ts": "1666297705.581649",
      "thread_ts": "1666297705.581649",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 7,
      "latest_reply": "1666298564.399039",
      "reactions": [
        {
          "name": "+1",
          "count": 1,
          "users": [
            "U045WJCT7GW"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "1+NTC",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046963BN78"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Why does the following code does not show an animated transition. \\n```\\nstruct ContentView: View {\\n    @State var isPresented = false\\n    var body: some View {\\n        VStack {\\n            Button(\\\"Toggle\\\") {\\n                isPresented.toggle()\\n            }\\n            \\n            if isPresented {\\n                Text(\\\"Hello world!\\\")\\n                    .transition(.move(edge: .top).animation(.default))\\n            }\\n        }\\n    }\\n}\\n```\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "ce9ef68a-b6c9-4563-9d58-a88e7fc2dac0",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "Try moving the animation modifier outside of the transition argument:\n\n```struct ContentView: View {\n    @State var isPresented = false\n    var body: some View {\n        VStack {\n            Button(\"Toggle\") {\n                withAnimation {\n                    isPresented.toggle()\n                }\n            }\n            if isPresented {\n                Text(\"Hello world!\")\n                    .transition(.move(edge: .top))\n                    .animation(.default, value: isPresented)\n            }\n        }\n    }\n}```",
          "ts": "1666297758.952649",
          "thread_ts": "1666297705.581649",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "neutral_face",
              "count": 1,
              "users": [
                "U046963BN78"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zqtY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Try moving the animation modifier outside of the transition argument:\n\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"struct ContentView: View {\\n    @State var isPresented = false\\n    var body: some View {\\n        VStack {\\n            Button(\\\"Toggle\\\") {\\n                withAnimation {\\n                    isPresented.toggle()\\n                }\\n            }\\n            if isPresented {\\n                Text(\\\"Hello world!\\\")\\n                    .transition(.move(edge: .top))\\n                    .animation(.default, value: isPresented)\\n            }\\n        }\\n    }\\n}\"}],\"border\":0}"
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4ac4cee3-2894-44e9-b644-c20eecd4237e",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "I often have to trial and error getting animation and transition to work. Good one.",
          "ts": "1666297769.556979",
          "thread_ts": "1666297705.581649",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3DE",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I often have to trial and error getting animation and transition to work. Good one."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "dfbdcb85-f280-422c-9fdd-9b03da927fdd",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "\u003c@U04583CD3FE\u003e often it seems like you need the item transitioning to be inside a ZStack etc with animation attached to the ZStack. Is this because the tree needs to keep the animation modifier around even though the transition modifier can be removed/added with the Text when it appears?",
          "ts": "1666297887.724609",
          "thread_ts": "1666297705.581649",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "mYv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U04583CD3FE"
                    },
                    {
                      "type": "text",
                      "text": " often it seems like you need the item transitioning to be inside a ZStack etc with animation attached to the ZStack. Is this because the tree needs to keep the animation modifier around even though the transition modifier can be removed/added with the Text when it appears?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8a40c36f-3b63-4433-98b8-f8498d07d8e1",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "The working case above is a counter example to that \u003c@U045WJCT7GW\u003e. Can you provide a code example of what you're talking about?",
          "ts": "1666297964.109969",
          "thread_ts": "1666297705.581649",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "wtI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The working case above is a counter example to that "
                    },
                    {
                      "type": "user",
                      "user_id": "U045WJCT7GW"
                    },
                    {
                      "type": "text",
                      "text": ". Can you provide a code example of what you're talking about?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "075acae2-48fe-4280-9ebe-6367ace99287",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "I’ll definitely file an FB. I’ve often seen cases like your example where the transition doesn’t work and requires nesting but I can’t think of a specific example at the moment. Maybe with `.transition(.opacity)` ?",
          "ts": "1666298368.883199",
          "thread_ts": "1666297705.581649",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 2,
              "users": [
                "U04583CD3FE",
                "U045WJCT7GW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "cFf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’ll definitely file an FB. I’ve often seen cases like your example where the transition doesn’t work and requires nesting but I can’t think of a specific example at the moment. Maybe with "
                    },
                    {
                      "type": "text",
                      "text": ".transition(.opacity)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " ?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "380ccffc-2329-4f80-8901-445797451739",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "I’ve also not testing on Ventura much yet so maybe it’s fixed there?",
          "ts": "1666298419.806319",
          "thread_ts": "1666297705.581649",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "T/Vf",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’ve also not testing on Ventura much yet so maybe it’s fixed there?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2f82125f-336a-42dc-8492-fa4b00c64b7e",
          "type": "message",
          "user": "U04583CD3FE",
          "text": "That is a good way to know for sure. And a good way to file the most effective feedbacks if it is an issue on latest releases.",
          "ts": "1666298564.399039",
          "thread_ts": "1666297705.581649",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xGiw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That is a good way to know for sure. And a good way to file the most effective feedbacks if it is an issue on latest releases."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046LKK3L81\u003e asked\n\u0026gt; Is there a way to have a keyboard slide in and NOT cover the tab bars? I put up a dismiss the keyboard button but I think it would help speed things up/keep my users oriented if the tab bars stayed visible.\n\u0026gt; \n\u0026gt; I typed this somewhere - I'm not sure I did it in the right place (sorry if this is a duplicate)",
      "ts": "1666297724.909009",
      "thread_ts": "1666297724.909009",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 13,
      "latest_reply": "1666299795.247669",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "=uy",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046LKK3L81"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is there a way to have a keyboard slide in and NOT cover the tab bars? I put up a dismiss the keyboard button but I think it would help speed things up\\/keep my users oriented if the tab bars stayed visible.\\n\\nI typed this somewhere - I'm not sure I did it in the right place (sorry if this is a duplicate)\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "18d4288a-4c05-48bf-91a6-af1df5b515d4",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "There is no way to do this using a `TabView` today. You could try writing your own representable wrapping a UITabBarController and only ignoring the container safe area on that representable.",
          "ts": "1666297764.195269",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EOJY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There is no way to do this using a "
                    },
                    {
                      "type": "text",
                      "text": "TabView",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " today. You could try writing your own representable wrapping a UITabBarController and only ignoring the container safe area on that representable."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "60ed1148-06be-4023-aafe-1836a2eb0e63",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "Interesting - thanks! I sort of wonder if it’s breaking the HIG because in theory I’d want any input on the tabs to be live in addition to the keyboard. So that might not work out well. I wish Apple would put the dismiss key into the numeric keyboard - I think there’s one that is easy to rename on the text keyboard but not on the numeric one.",
          "ts": "1666297924.864819",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "3yvS",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Interesting - thanks! I sort of wonder if it’s breaking the HIG because in theory I’d want any input on the tabs to be live in addition to the keyboard. So that might not work out well. I wish Apple would put the dismiss key into the numeric keyboard - I think there’s one that is easy to rename on the text keyboard but not on the numeric one."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "016f4096-1080-4762-81e0-5e50b3c83434",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "I can say that I wouldn’t really recommend this design. I suspect that when you switch tabs the focused view will go away and the keyboard will get dismissed anyway.",
          "ts": "1666298081.311599",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "r1ocZ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I can say that I wouldn’t really recommend this design. I suspect that when you switch tabs the focused view will go away and the keyboard will get dismissed anyway."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c9a6af98-1f83-41c1-8bed-091c94960b1a",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "Well as it is now there’s no way to be able to switch tabs until you dismiss the keyboard.  Followon question is there a way to move / duplicate that dismiss button in the corner by the zero?",
          "ts": "1666298398.504959",
          "thread_ts": "1666297724.909009",
          "files": [
            {
              "id": "F047CVC82P7",
              "created": 1666298305,
              "timestamp": 1666298305,
              "name": "image.png",
              "title": "image.png",
              "mimetype": "image/png",
              "image_exif_rotation": 0,
              "filetype": "png",
              "pretty_type": "PNG",
              "user": "U046LKK3L81",
              "mode": "hosted",
              "editable": false,
              "is_external": false,
              "external_type": "",
              "size": 246625,
              "url": "",
              "url_download": "",
              "url_private": "C043025CS59/F047CVC82P7-image.png",
              "url_private_download": "C043025CS59/F047CVC82P7-image.png",
              "original_h": 854,
              "original_w": 874,
              "thumb_64": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047CVC82P7-c6d2403753/image_64.png",
              "thumb_80": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047CVC82P7-c6d2403753/image_80.png",
              "thumb_160": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047CVC82P7-c6d2403753/image_160.png",
              "thumb_360": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047CVC82P7-c6d2403753/image_360.png",
              "thumb_360_gif": "",
              "thumb_360_w": 360,
              "thumb_360_h": 352,
              "thumb_480": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047CVC82P7-c6d2403753/image_480.png",
              "thumb_480_w": 480,
              "thumb_480_h": 469,
              "thumb_720": "https://files.slack.com/files-tmb/T01PTBJ95PS-F047CVC82P7-c6d2403753/image_720.png",
              "thumb_720_w": 720,
              "thumb_720_h": 704,
              "thumb_960": "",
              "thumb_960_w": 0,
              "thumb_960_h": 0,
              "thumb_1024": "",
              "thumb_1024_w": 0,
              "thumb_1024_h": 0,
              "permalink": "https://appleevents.enterprise.slack.com/files/U046LKK3L81/F047CVC82P7/image.png",
              "permalink_public": "https://slack-files.com/T01PTBJ95PS-F047CVC82P7-3979ff0413",
              "edit_link": "",
              "preview": "",
              "preview_highlight": "",
              "lines": 0,
              "lines_more": 0,
              "is_public": false,
              "public_url_shared": false,
              "channels": null,
              "groups": null,
              "ims": null,
              "initial_comment": {},
              "comments_count": 0,
              "num_stars": 0,
              "is_starred": false,
              "shares": {
                "public": null,
                "private": null
              }
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "r2Wd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Well as it is now there’s no way to be able to switch tabs until you dismiss the keyboard.  Followon question is there a way to move / duplicate that dismiss button in the corner by the zero?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0b359329-cac7-4a94-a2e8-e453514220aa",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "I don’t believe so",
          "ts": "1666298499.626209",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+Elq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I don’t believe so"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7962fe47-f1ee-4086-8401-1602fa957215",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "It seems like everyone would need that - probably should file a feedback - right?:expressionless:",
          "ts": "1666298611.518809",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4hzX",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "It seems like everyone would need that - probably should file a feedback - right?"
                    },
                    {
                      "type": "emoji",
                      "name": "expressionless",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "3e9bb235-79d4-4313-80bb-61034ff62e85",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "Filing a feedback would be nice with some additional details. I’m not super sure what moving the little X button by the 0 would be for.",
          "ts": "1666298707.074019",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2E1Z",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Filing a feedback would be nice with some additional details. I’m not super sure what moving the little X button by the 0 would be for."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2ff5118c-bf5a-456f-9d31-f34f2556dae7",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "I’m looking for a way to dismiss the keyboard. There’s no return or anything on the numeric keyboard… Unless I’m missing something.  That SF symbol with the  keyboard with the down carat I’m using connected to:\n// extension to dismiss keyboard\nextension UIApplication {\n  func endEditing() {\n    sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)\n  }\n}",
          "ts": "1666298902.976639",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "PbX",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’m looking for a way to dismiss the keyboard. There’s no return or anything on the numeric keyboard… Unless I’m missing something.  That SF symbol with the  keyboard with the down carat I’m using connected to:\n// extension to dismiss keyboard\nextension UIApplication {\n  func endEditing() {\n    sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)\n  }\n}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a04cfd42-7da3-44fa-9927-878befad23e1",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "You are correct that there’s no way to dismiss a numeric keyboard by default. I typically recommend using a `ToolbarItem(placement: .keyboard) {}` with a button like you have to accomplish that.",
          "ts": "1666299182.991629",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0MZ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You are correct that there’s no way to dismiss a numeric keyboard by default. I typically recommend using a "
                    },
                    {
                      "type": "text",
                      "text": "ToolbarItem(placement: .keyboard) {}",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " with a button like you have to accomplish that."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "76bc5b06-ff77-4230-aa0e-8eea69d402e5",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "Ah - I see that Numbers on iOS has a Done button way at the top.  But that keyboard is VERY customized. I wonder if there’s other stock (or other) apps that show a good way to do this.",
          "ts": "1666299379.752159",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "T0yLj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ah - I see that Numbers on iOS has a Done button way at the top.  But that keyboard is VERY customized. I wonder if there’s other stock (or other) apps that show a good way to do this."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "abe857b6-fad1-4eb0-bc57-6b1663f270f7",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "The stock Contacts app seems to expect you to hit somewhere else after you’ve typed a phone number in. There is no dismiss. Maybe I should read the HIG more",
          "ts": "1666299577.360279",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "O1+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The stock Contacts app seems to expect you to hit somewhere else after you’ve typed a phone number in. There is no dismiss. Maybe I should read the HIG more"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "38f0e5aa-417b-437a-a2ad-5dfb5d785c1b",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "Yeah I don’t know of any examples off the top of my head where that button in the bottom trailing corner is a dismiss keyboard button.",
          "ts": "1666299713.096919",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "qGwro",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yeah I don’t know of any examples off the top of my head where that button in the bottom trailing corner is a dismiss keyboard button."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b9fe707a-e753-49df-9cde-cb60ce9353b4",
          "type": "message",
          "user": "U046LKK3L81",
          "text": ":+1:",
          "ts": "1666299795.247669",
          "thread_ts": "1666297724.909009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FQS7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "emoji",
                      "name": "+1",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0476A9RTNZ\u003e asked\n\u0026gt; Is there any way to remove the truncation of a Text and just have it clip to the bounds?",
      "ts": "1666297813.328629",
      "thread_ts": "1666297813.328629",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666297872.333389",
      "reactions": [
        {
          "name": "+1",
          "count": 2,
          "users": [
            "U046234QRRD",
            "U0476035QKU"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "xz/3f",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0476A9RTNZ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is there any way to remove the truncation of a Text and just have it clip to the bounds?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "451f36af-1cb0-4a1c-a22f-b9a0310f6ac2",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "Unfortunately that is not possible today but we would really appreciate you filing feedback requesting this enhancement.",
          "ts": "1666297841.205989",
          "thread_ts": "1666297813.328629",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lEfz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Unfortunately that is not possible today but we would really appreciate you filing feedback requesting this enhancement."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b9406deb-67c6-4b33-83f4-6a06f5569f7e",
          "type": "message",
          "user": "U0476A9RTNZ",
          "text": "Thank you, \u003c@U045J8SG70R\u003e!",
          "ts": "1666297872.333389",
          "thread_ts": "1666297813.328629",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "tnWd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you, "
                    },
                    {
                      "type": "user",
                      "user_id": "U045J8SG70R"
                    },
                    {
                      "type": "text",
                      "text": "!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045NSTKPFZ\u003e asked\n\u0026gt; I'm using TABLE in SwiftUI macOS app with several Table Columns: each column has an associated sort key. The sorting works fine but my question is:\n\u0026gt; If the table supports single row selection, is there a way to scroll to the selected row after a sort operation? EG if I have 300 rows and only 50 display at a time if row 5 is selected and column sorting moves this row to row 200 how can I scroll to row 200 after sort?\n\u0026gt; (I have seen examples of using LIST and ScrollViewReader to programmatically scroll to a LIST row but this approach does not appear to work with TABLE structures.)",
      "ts": "1666297836.147439",
      "thread_ts": "1666297836.147439",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666297872.882689",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "2wrVZ",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045NSTKPFZ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I'm using TABLE in SwiftUI macOS app with several Table Columns: each column has an associated sort key. The sorting works fine but my question is:\\nIf the table supports single row selection, is there a way to scroll to the selected row after a sort operation? EG if I have 300 rows and only 50 display at a time if row 5 is selected and column sorting moves this row to row 200 how can I scroll to row 200 after sort?\\n(I have seen examples of using LIST and ScrollViewReader to programmatically scroll to a LIST row but this approach does not appear to work with TABLE structures.)\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "c1681486-e20d-4a11-a1e6-7f9c1b67e6f9",
          "type": "message",
          "user": "U0455GWEBLK",
          "text": "Now in Ventura you should be able to programmatically scroll to a certain row by calling `scrollTo()` with the id of the desired row value. Please try it using latest version of Xcode and macOS Ventura.",
          "ts": "1666297872.882689",
          "thread_ts": "1666297836.147439",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "+D0wB",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Now in Ventura you should be able to programmatically scroll to a certain row by calling "
                    },
                    {
                      "type": "text",
                      "text": "scrollTo()",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " with the id of the desired row value. Please try it using latest version of Xcode and macOS Ventura."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046DHPUAKH\u003e asked\n\u0026gt; Hello to the team,\n\u0026gt; New NavigationSplitView for iOS 16 is designed to work only with List in the main (master) column. It means that we cannot work with LazyV/HStack for instance, or any other custom view that will binding the selection with the detail view. Is there any plans to expand this feature? \n\u0026gt; Thanks a lot.",
      "ts": "1666297891.566739",
      "thread_ts": "1666297891.566739",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666297915.629139",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "XGFB",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046DHPUAKH"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hello to the team,\\nNew NavigationSplitView for iOS 16 is designed to work only with List in the main (master) column. It means that we cannot work with LazyV\\/HStack for instance, or any other custom view that will binding the selection with the detail view. Is there any plans to expand this feature? \\nThanks a lot.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "13bffe72-6ff1-4e48-892c-c9c9d9307ebd",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "In iOS 16.1, you can put a `.navigationDestination` in the sidebar column so that a `NavigationLink` in the sidebar replaces the root view of the detail column.\n\n```NavigationSplitView {\n    LazyVStack {\n        NavigationLink(\"link\", value: 213)\n    }\n    .navigationDestination(for: Int.self) { i in\n        Text(\"The value is \\(value)\")\n    }\n} detail: {\n    Text(\"Click an item\")\n}```",
          "ts": "1666297915.629139",
          "thread_ts": "1666297891.566739",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U046DHPUAKH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lKgu",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "In iOS 16.1, you can put a "
                    },
                    {
                      "type": "text",
                      "text": ".navigationDestination",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " in the sidebar column so that a "
                    },
                    {
                      "type": "text",
                      "text": "NavigationLink",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " in the sidebar replaces the root view of the detail column.\n\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"NavigationSplitView {\\n    LazyVStack {\\n        NavigationLink(\\\"link\\\", value: 213)\\n    }\\n    .navigationDestination(for: Int.self) { i in\\n        Text(\\\"The value is \\\\(value)\\\")\\n    }\\n} detail: {\\n    Text(\\\"Click an item\\\")\\n}\"}],\"border\":0}"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04713BK29G\u003e asked\n\u0026gt; Inside a list\n\u0026gt; A row with LabeledContent with a Label as label,  and a textfield\n\u0026gt; A row with a DatePicker with a label\n\u0026gt; \n\u0026gt; The icons of the two labels do not align, it is something expected?",
      "ts": "1666297951.384339",
      "thread_ts": "1666297951.384339",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 10,
      "latest_reply": "1666299849.215099",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "9v05u",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04713BK29G"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Inside a list\\nA row with LabeledContent with a Label as label,  and a textfield\\nA row with a DatePicker with a label\\n\\nThe icons of the two labels do not align, it is something expected?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "00fdffdb-2eef-4634-af06-ec726ab0b62d",
          "type": "message",
          "user": "U0441J2N9FH",
          "text": "Hi Giorgio! Can you please file Feedback with a screenshot (and the code you’re using to generate it) so we can see what’s going on here? \u003chttps://feedbackassistant.apple.com\u003e. Thanks so much!",
          "ts": "1666297998.651459",
          "thread_ts": "1666297951.384339",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "nPE",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi Giorgio! Can you please file Feedback with a screenshot (and the code you’re using to generate it) so we can see what’s going on here? "
                    },
                    {
                      "type": "link",
                      "url": "https://feedbackassistant.apple.com",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": ". Thanks so much!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2888b00c-4e6b-408a-9f6c-95710a19091e",
          "type": "message",
          "user": "U04713BK29G",
          "text": "how can i signal to you the radar number?  i think i cannot do it before the q\u0026amp;a hour elapse",
          "ts": "1666298054.834609",
          "thread_ts": "1666297951.384339",
          "edited": {
            "user": "U04713BK29G",
            "ts": "1666298065.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vWPh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "how can i signal to you the radar number?  i think i cannot do it before the q\u0026a hour elapse"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a76ffe97-0efa-4d11-85dc-127262a00e24",
          "type": "message",
          "user": "U0441J2N9FH",
          "text": "we’ll look for it for sure in Radar, but as long as the thread is still open, you can post the FB number here. :slightly_smiling_face:",
          "ts": "1666298112.175809",
          "thread_ts": "1666297951.384339",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "gHCv",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "we’ll look for it for sure in Radar, but as long as the thread is still open, you can post the FB number here. "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ee6c7e8b-b980-45ae-9d37-6db7d1cece17",
          "type": "message",
          "user": "U04713BK29G",
          "text": "i’ll do it",
          "ts": "1666298273.082689",
          "thread_ts": "1666297951.384339",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "1Ii",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "i’ll do it"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1ba8d804-1704-46c7-9c84-7963f94eb9de",
          "type": "message",
          "user": "U03V30M0C1K",
          "text": "If you can’t get the FB filed before the Q\u0026amp;A ends, feel free to send it to the Helpdesk \u003c@U04713BK29G\u003e! I’ll get it passed along to the team!",
          "ts": "1666298378.007889",
          "thread_ts": "1666297951.384339",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "kb2=2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you can’t get the FB filed before the Q\u0026A ends, feel free to send it to the Helpdesk "
                    },
                    {
                      "type": "user",
                      "user_id": "U04713BK29G"
                    },
                    {
                      "type": "text",
                      "text": "! I’ll get it passed along to the team!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e40e5522-3632-4716-a384-11167d945930",
          "type": "message",
          "user": "U04713BK29G",
          "text": "additionally, can you briefly expose how the inset and align in list works?\n\nFor example i’ve found impossible to have multiple rows of textfield with labels of different lenght, where the  textfields are not “leading aligned”\n\nThis is something “ugly”",
          "ts": "1666298477.505409",
          "thread_ts": "1666297951.384339",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "czMM",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "additionally, can you briefly expose how the inset and align in list works?\n\nFor example i’ve found impossible to have multiple rows of textfield with labels of different lenght, where the  textfields are not “leading aligned”\n\nThis is something “ugly”"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "59b85129-4b64-4430-9163-1a6bafa77a5a",
          "type": "message",
          "user": "U04713BK29G",
          "text": "\u003c@U03V30M0C1K\u003e i’ll do it :heart: thanks",
          "ts": "1666298486.130859",
          "thread_ts": "1666297951.384339",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "d6uwF",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U03V30M0C1K"
                    },
                    {
                      "type": "text",
                      "text": " i’ll do it "
                    },
                    {
                      "type": "emoji",
                      "name": "heart",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " thanks"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6a6ea449-8f41-4996-ac3b-71e980d97aa1",
          "type": "message",
          "user": "U04713BK29G",
          "text": "FB11708354",
          "ts": "1666299459.714929",
          "thread_ts": "1666297951.384339",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "4NAH0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FB11708354"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8a2bdea9-65c1-4c8a-acc6-50ba01957a54",
          "type": "message",
          "user": "U0441J2N9FH",
          "text": "Thanks, I see it! You should be able to add screenshot/sample code any time. :slightly_smiling_face:",
          "ts": "1666299586.866299",
          "thread_ts": "1666297951.384339",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "s5Mou",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks, I see it! You should be able to add screenshot/sample code any time. "
                    },
                    {
                      "type": "emoji",
                      "name": "slightly_smiling_face",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "7ebe5a16-386d-4b21-82e9-a4317390f4fa",
          "type": "message",
          "user": "U04713BK29G",
          "text": "i’ve included a simple playground that replicates the problem! and a screenshot with some overlayed lines",
          "ts": "1666299849.215099",
          "thread_ts": "1666297951.384339",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "HgT",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "i’ve included a simple playground that replicates the problem! and a screenshot with some overlayed lines"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046QGJ6B3M\u003e asked\n\u0026gt; Pickers in forms throw dozens of constraint warnings in my app, but not when I put them by themselves in a sample app to demonstrate the problem in FB. Any idea what causes this?",
      "ts": "1666298095.433629",
      "thread_ts": "1666298095.433629",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 9,
      "latest_reply": "1666300173.165709",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "EyJh=",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046QGJ6B3M"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Pickers in forms throw dozens of constraint warnings in my app, but not when I put them by themselves in a sample app to demonstrate the problem in FB. Any idea what causes this?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "2f6aeed7-253e-47da-8a99-44769d067c9c",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "Constraint warnings like this can unfortunately be hard to track down (as you’ve noticed!) as they tend to depend a lot on where the view in question is being placed. I’d be curious to hear more about how you’re using the Form / Picker in your app, specifically, if it’s in a hosting view, and if so, how that hosting view is laid out.",
          "ts": "1666298373.988789",
          "thread_ts": "1666298095.433629",
          "edited": {
            "user": "U045J8S9EU9",
            "ts": "1666298393.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Wd0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Constraint warnings like this can unfortunately be hard to track down (as you’ve noticed!) as they tend to depend a lot on where the view in question is being placed. I’d be curious to hear more about how you’re using the Form / Picker in your app, specifically, if it’s in a hosting view, and if so, how that hosting view is laid out."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "a5bef645-9248-443b-8f96-d85f949b14cc",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Pure SwiftUI. Just a ScrollView with a VStack with a bunch of controls. Two seem especially problematic: Date Pickers and Segmented Pickers.",
          "ts": "1666298432.925179",
          "thread_ts": "1666298095.433629",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "dQA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Pure SwiftUI. Just a ScrollView with a VStack with a bunch of controls. Two seem especially problematic: Date Pickers and Segmented Pickers."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "546c06c2-b893-4e57-a23d-93e89cd501e7",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "But why are the pickers themselves throwing constraint errors? I'm not sure how I could cause that.",
          "ts": "1666298458.539189",
          "thread_ts": "1666298095.433629",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "b9Vc/",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "But why are the pickers themselves throwing constraint errors? I'm not sure how I could cause that."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0f17ac8b-8ec8-4bc8-899a-a97e4fcb6fde",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "If you think it's fixable, I'll try to winnow it down to a sensible sample I can send you.",
          "ts": "1666298496.912219",
          "thread_ts": "1666298095.433629",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U045J8S9EU9",
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Xs4",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "If you think it's fixable, I'll try to winnow it down to a sensible sample I can send you."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e35759d4-b5f7-4a25-829b-9db33e8ae75b",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "Huh, interesting! That’s definitely a bug with the implementation of Form / Picker itself if it’s pure SwiftUI then. Sounds interesting! Definitely file a feedback if you can, and if you’re not able to get a reproducing minimal case, if you can point us to the app on the app store you publish which is reproducing the issue, that can be helpful as well. We can debug SwiftUI against published apps as well as sample projects.",
          "ts": "1666298555.455889",
          "thread_ts": "1666298095.433629",
          "edited": {
            "user": "U045J8S9EU9",
            "ts": "1666298576.000000"
          },
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U046797427P"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "/VXQA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Huh, interesting! That’s definitely a bug with the implementation of Form / Picker itself if it’s pure SwiftUI then. Sounds interesting! Definitely file a feedback if you can, and if you’re not able to get a reproducing minimal case, if you can point us to the app on the app store you publish which is reproducing the issue, that can be helpful as well. We can debug SwiftUI against published apps as well as sample projects."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2282e85e-1a86-4eba-a5fe-e8f5402c10c7",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "(Though minimal examples in sample projects do make things easier :sweat_smile: )",
          "ts": "1666298610.376689",
          "thread_ts": "1666298095.433629",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heavy_plus_sign",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7jZ2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "(Though minimal examples in sample projects do make things easier "
                    },
                    {
                      "type": "emoji",
                      "name": "sweat_smile",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " )"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "2a2d7c80-fbb3-450e-99a9-ba67220df9f1",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Of course. I'm not sure if the current App Store version throws the warnings, but I'm pushing a new one that uses NavigationStack. I'll reference your name in the FB when I file it.",
          "ts": "1666298842.240959",
          "thread_ts": "1666298095.433629",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 2,
              "users": [
                "U0441J2N9FH",
                "U046QGJ6B3M"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Rmlbm",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Of course. I'm not sure if the current App Store version throws the warnings, but I'm pushing a new one that uses NavigationStack. I'll reference your name in the FB when I file it."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "395ee3f6-fecc-47f4-91a4-fd497c48b487",
          "type": "message",
          "user": "U046LKK3L81",
          "text": "Can we point to apps in TestFlight? or does it have to be on the store?",
          "ts": "1666299028.782309",
          "thread_ts": "1666298095.433629",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "FG+n",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Can we point to apps in TestFlight? or does it have to be on the store?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "40a220a7-bdaa-41b8-95da-29d90d4d0d2f",
          "type": "message",
          "user": "U04583CAUAG",
          "text": "A public TestFlight beta would work, as long as we have a way of getting it without needing to provide personal info like an email address or Apple ID",
          "ts": "1666300173.165709",
          "thread_ts": "1666298095.433629",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U046LKK3L81"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "a8QZ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A public TestFlight beta would work, as long as we have a way of getting it without needing to provide personal info like an email address or Apple ID"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0460BADXM3\u003e asked\n\u0026gt; What is the proper way to use CADisplayLink with SwiftUI? My approach right now is to have a display link use its callback to update a `@Published` variable in an `@ObservedObject` model, and the view uses this property. Does swiftUI guarantee that all of these view updates are executed synchronously within the display link's callback method? what happens when the updates take longer and overlap with the next refresh callback, how do I recover and synchronize the UI in that case? Thank you!!",
      "ts": "1666298116.236209",
      "thread_ts": "1666298116.236209",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 5,
      "latest_reply": "1666299289.870379",
      "reactions": [
        {
          "name": "eyes",
          "count": 1,
          "users": [
            "U046KTUHXQA"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "FyhDO",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0460BADXM3"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What is the proper way to use CADisplayLink with SwiftUI? My approach right now is to have a display link use its callback to update a `@Published` variable in an `@ObservedObject` model, and the view uses this property. Does swiftUI guarantee that all of these view updates are executed synchronously within the display link's callback method? what happens when the updates take longer and overlap with the next refresh callback, how do I recover and synchronize the UI in that case? Thank you!!\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "c924f5d7-f5f4-49f5-aad5-e894d9e29e7a",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "I would suggest watching \u003chttps://developer.apple.com/videos/play/wwdc2021/10019/\u003e which has a great explanation of how updates to `ObservableObject` are processed by SwiftUI.",
          "ts": "1666298282.098309",
          "thread_ts": "1666298116.236209",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "oUbG",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I would suggest watching "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.apple.com/videos/play/wwdc2021/10019/",
                      "text": ""
                    },
                    {
                      "type": "text",
                      "text": " which has a great explanation of how updates to "
                    },
                    {
                      "type": "text",
                      "text": "ObservableObject",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " are processed by SwiftUI."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "59d76122-d5d7-45f0-af20-f51ef73eaa34",
          "type": "message",
          "user": "U0464M23S4C",
          "text": "Could wrapping it in a  `TimelineView(.animation)`  be an alternative to CADisplayLink? If I understand it correctly it does roughly the same…",
          "ts": "1666298808.068739",
          "thread_ts": "1666298116.236209",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "eyes",
              "count": 1,
              "users": [
                "U0460BADXM3"
              ]
            },
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U045J8SG70R"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "ThgT",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Could wrapping it in a  "
                    },
                    {
                      "type": "text",
                      "text": "TimelineView(.animation)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "  be an alternative to CADisplayLink? If I understand it correctly it does roughly the same…"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "155220d0-02f3-4d3c-9afe-d13ece08af60",
          "type": "message",
          "user": "U0476A9RTNZ",
          "text": "Can confirm, `TimelineView` is awesome for things like this",
          "ts": "1666298941.494529",
          "thread_ts": "1666298116.236209",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "raised_hands",
              "count": 2,
              "users": [
                "U0460BADXM3",
                "U0464M23S4C"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "F/8w1",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Can confirm, "
                    },
                    {
                      "type": "text",
                      "text": "TimelineView",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " is awesome for things like this"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "bbe4528c-e4d2-4476-8e39-c202088f6027",
          "type": "message",
          "user": "U0460BADXM3",
          "text": "Just watched the explanation in the WWDC video. Great mean girls reference btw",
          "ts": "1666299026.792879",
          "thread_ts": "1666298116.236209",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "EDYR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Just watched the explanation in the WWDC video. Great mean girls reference btw"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ce980dd2-3ad4-4ab8-83ac-c41c5793f385",
          "type": "message",
          "user": "U0460BADXM3",
          "text": "\u003c@U045J8SG70R\u003e Does `TimelineView` support ProMotion refresh rates?",
          "ts": "1666299289.870379",
          "thread_ts": "1666298116.236209",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "37a",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "user",
                      "user_id": "U045J8SG70R"
                    },
                    {
                      "type": "text",
                      "text": " Does "
                    },
                    {
                      "type": "text",
                      "text": "TimelineView",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " support ProMotion refresh rates?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046S4P76FJ\u003e asked\n\u0026gt; Hi there! Thanks for doing this Q\u0026amp;A! SwiftUI is amazing :star-struck: \n\u0026gt; \n\u0026gt; I’ve been implementing a custom flow layout using the new Layout protocol that wraps content into multiple lines. (\u003chttps://github.com/tevelee/SwiftUI-Flow)|https://github.com/tevelee/SwiftUI-Flow)\u003e\n\u0026gt; How can I leverage the protocol to also implement lazy containers like LazyHStack\u0026amp;LazyVStack to load child views in a memory efficient way?",
      "ts": "1666298338.284789",
      "thread_ts": "1666298338.284789",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 3,
      "latest_reply": "1666450289.230019",
      "reactions": [
        {
          "name": "heart",
          "count": 1,
          "users": [
            "U0441J2N9FH"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "jKpH",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046S4P76FJ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Hi there! Thanks for doing this Q\u0026A! SwiftUI is amazing \"},{\"type\":\"emoji\",\"name\":\"star-struck\",\"unicode\":\"1f929\"},{\"type\":\"text\",\"text\":\" \\n\\nI\\u2019ve been implementing a custom flow layout using the new Layout protocol that wraps content into multiple lines. (\"},{\"type\":\"link\",\"url\":\"https:\\/\\/github.com\\/tevelee\\/SwiftUI-Flow)\",\"text\":\"https:\\/\\/github.com\\/tevelee\\/SwiftUI-Flow)\"},{\"type\":\"text\",\"text\":\"\\nHow can I leverage the protocol to also implement lazy containers like LazyHStack\u0026LazyVStack to load child views in a memory efficient way?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "132bba39-b616-43c3-9444-526ed6c82f1e",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "Unfortunately, this isn’t currently supported. Please do file feedback with a feature request and details on your specific use case! We use those use cases frequently to guide the design of new APIs!",
          "ts": "1666298355.934209",
          "thread_ts": "1666298338.284789",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "bvCyA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Unfortunately, this isn’t currently supported. Please do file feedback with a feature request and details on your specific use case! We use those use cases frequently to guide the design of new APIs!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "4B340326-9ED9-4EBA-8C43-E6C5C3E0209D",
          "type": "message",
          "user": "U046S4P76FJ",
          "text": "Thanks, will do! :pray: ",
          "ts": "1666298427.598039",
          "thread_ts": "1666298338.284789",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "gratitude-thank-you",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Gg1",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks, will do! "
                    },
                    {
                      "type": "emoji",
                      "name": "pray",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "e550a4f5-8bc6-4a20-9436-1583dd1f0534",
          "type": "message",
          "user": "U046S4P76FJ",
          "text": "I posted *FB11708501* about this improvement opportunity",
          "ts": "1666450289.230019",
          "thread_ts": "1666298338.284789",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "AGCS",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I posted "
                    },
                    {
                      "type": "text",
                      "text": "FB11708501 ",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "about this improvement opportunity"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045MMSNB3R\u003e asked\n\u0026gt; I need to set a predicate to a @SectionedFetchRequest / @FetchRequest\n\u0026gt; The predicate declaration is as follows:\n\u0026gt; \n\u0026gt; NSPredicate(format: “relationship == %@\", myInstanceMember)\n\u0026gt; \n\u0026gt; Predicate can’t be set in the property initializer because self is not available, and can’t be set at init neither…\n\u0026gt; At the moment I’m setting the predicate to the request configuration’s nsPredicate, on view’s .task / .onAppear, and works well, but as soon as the view is updated the request’s predicate is set to nil.\n\u0026gt; What would be the approach to set this kind of formatted predicate in a permanent way?",
      "ts": "1666298461.488489",
      "thread_ts": "1666298461.488489",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666298467.098279",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "N9G",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045MMSNB3R"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I need to set a predicate to a @SectionedFetchRequest \\/ @FetchRequest\\nThe predicate declaration is as follows:\\n\\nNSPredicate(format: \\u201crelationship == %@\\\", myInstanceMember)\\n\\nPredicate can\\u2019t be set in the property initializer because self is not available, and can\\u2019t be set at init neither\\u2026\\nAt the moment I\\u2019m setting the predicate to the request configuration\\u2019s nsPredicate, on view\\u2019s .task \\/ .onAppear, and works well, but as soon as the view is updated the request\\u2019s predicate is set to nil.\\nWhat would be the approach to set this kind of formatted predicate in a permanent way?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "09a56e9e-7cc8-40c5-91fe-5bf421b4f30b",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "That’s how we recommend doing it today. It surprising that the predicate is set to nil. Would it be possible for you to file a feedback with a repro case or a code sample so that we can investigate why that is happening to you?",
          "ts": "1666298467.098279",
          "thread_ts": "1666298461.488489",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "WBs5t",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That’s how we recommend doing it today. It surprising that the predicate is set to nil. Would it be possible for you to file a feedback with a repro case or a code sample so that we can investigate why that is happening to you?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045WJCT7GW\u003e asked\n\u0026gt; Is there a way to read the foregroundColor from @Environment?",
      "ts": "1666298561.136939",
      "thread_ts": "1666298561.136939",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 5,
      "latest_reply": "1666299544.881949",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "LGe",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045WJCT7GW"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Is there a way to read the foregroundColor from @Environment?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "b986c45b-82e8-4eca-ae39-5db2c075c94e",
          "type": "message",
          "user": "U044Z1BANMC",
          "text": "You can use the `ForegroundStyle` type (available to `ShapeStyle` generic arguments as `.foreground`) to get a `ShapeStyle` that will draw the foreground color or style.",
          "ts": "1666298580.547469",
          "thread_ts": "1666298561.136939",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "sYI",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can use the "
                    },
                    {
                      "type": "text",
                      "text": "ForegroundStyle",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " type (available to "
                    },
                    {
                      "type": "text",
                      "text": "ShapeStyle",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " generic arguments as "
                    },
                    {
                      "type": "text",
                      "text": ".foreground",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ") to get a "
                    },
                    {
                      "type": "text",
                      "text": "ShapeStyle",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " that will draw the foreground color or style."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "add62d70-f194-4ba3-8cf7-9c91d3116afd",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "Thanks \u003c@U044Z1BANMC\u003e! Please accept my vote :white_check_mark: for opening more `@Environment` values directly in the future. Having direct access would be very help and save a lot of time/workarounds especially when building custom controls.",
          "ts": "1666298720.859879",
          "thread_ts": "1666298561.136939",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "p=p3",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks "
                    },
                    {
                      "type": "user",
                      "user_id": "U044Z1BANMC"
                    },
                    {
                      "type": "text",
                      "text": "! Please accept my vote "
                    },
                    {
                      "type": "emoji",
                      "name": "white_check_mark",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " for opening more "
                    },
                    {
                      "type": "text",
                      "text": "@Environment",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " values directly in the future. Having direct access would be very help and save a lot of time/workarounds especially when building custom controls."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "83b65b92-6561-4e11-bbdc-486dd8be7b2e",
          "type": "message",
          "user": "U044Z1BANMC",
          "text": "Thanks for the feedback Joshua! Do you have a representative example of something you would do with the foreground color/style from the environment that wouldn’t be possible (or would be awkward) today?",
          "ts": "1666298841.711419",
          "thread_ts": "1666298561.136939",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "sOA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks for the feedback Joshua! Do you have a representative example of something you would do with the foreground color/style from the environment that wouldn’t be possible (or would be awkward) today?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0f0fa8dd-3a76-4ffc-9ce3-12fc73168f35",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "Sure thing. When there are controls where a parent view adopts a specific color but I want to be able to use the foreground color conditionally in a part of the child. Or a view where I want color overriding behavior that is conditional. For the former it requires placing lots of `.foregroundColor` at lower levels. For the latter I’d like to just be able to say `.foregroundColor(foo ? .myColor : .foregroundColor)` rather than having to use a conditional modifier or having to use lots of `conditionals` and worry that diffing will break.",
          "ts": "1666299483.981279",
          "thread_ts": "1666298561.136939",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "c6dQ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Sure thing. When there are controls where a parent view adopts a specific color but I want to be able to use the foreground color conditionally in a part of the child. Or a view where I want color overriding behavior that is conditional. For the former it requires placing lots of "
                    },
                    {
                      "type": "text",
                      "text": ".foregroundColor",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " at lower levels. For the latter I’d like to just be able to say "
                    },
                    {
                      "type": "text",
                      "text": ".foregroundColor(foo ? .myColor : .foregroundColor)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " rather than having to use a conditional modifier or having to use lots of "
                    },
                    {
                      "type": "text",
                      "text": "conditionals",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and worry that diffing will break."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "323ea5f7-3fcc-4e00-b469-9c999dc2d17a",
          "type": "message",
          "user": "U044Z1BANMC",
          "text": "Thank you!",
          "ts": "1666299544.881949",
          "thread_ts": "1666298561.136939",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "pTcd9",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04639X26UB\u003e asked\n\u0026gt; Are there any plans to add .refreshable to scrollview instead of just listview?",
      "ts": "1666298591.613209",
      "thread_ts": "1666298591.613209",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 3,
      "latest_reply": "1666298694.682259",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "WUyHI",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04639X26UB"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Are there any plans to add .refreshable to scrollview instead of just listview?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "5dc097e5-2545-47d2-b8e1-9220f5ba0da1",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "There were plans and those plans have been completed. You should see refreshable modifiers work with a ScrollView in iOS 16.0 / iPadOS 16.1.",
          "ts": "1666298652.025539",
          "thread_ts": "1666298591.613209",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 3,
              "users": [
                "U0441J2N9FH",
                "U04635ASQAW",
                "U046PFQBNA1"
              ]
            },
            {
              "name": "crying_cat_face",
              "count": 1,
              "users": [
                "U045W2MK4UW"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "NAUd0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There were plans and those plans have been completed. You should see refreshable modifiers work with a ScrollView in iOS 16.0 / iPadOS 16.1."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d779ba0e-c2a9-412f-beba-08512560829d",
          "type": "message",
          "user": "U04635ASQAW",
          "text": "\u003chttps://twitter.com/clarko/status/1552383186604216321\u003e",
          "ts": "1666298691.249639",
          "thread_ts": "1666298591.613209",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "zgZ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "link",
                      "url": "https://twitter.com/clarko/status/1552383186604216321",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "93a8de68-010d-4af5-bfaa-e59fb594733c",
          "type": "message",
          "user": "U04635ASQAW",
          "text": ":smile:",
          "ts": "1666298694.682259",
          "thread_ts": "1666298591.613209",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "X8Ohh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "emoji",
                      "name": "smile",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045X0Y1SEA\u003e asked\n\u0026gt; Recently, i was discovering SwiftUI APIs such as overlay and background. I noticed that new @ViewBuilder function not available in previous versions, however deprecation message prompts to use new function\n\u0026gt; \n\u0026gt;  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: \"Use `overlay(alignment:content:)` instead.\")\n\u0026gt;  @inlinable public func overlay\u0026lt;Overlay\u0026gt;(_ overlay: Overlay, alignment: Alignment = .center) -\u0026gt; some View where Overlay : View\n\u0026gt; \n\u0026gt; Is it SwiftUI API Design flaw or i miss something?",
      "ts": "1666298648.581449",
      "thread_ts": "1666298648.581449",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 7,
      "latest_reply": "1666299367.866339",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "bJ/L",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045X0Y1SEA"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Recently, i was discovering SwiftUI APIs such as overlay and background. I noticed that new @ViewBuilder function not available in previous versions, however deprecation message prompts to use new function\\n\\n @available(iOS, introduced: 13.0, deprecated: 100000.0, message: \\\"Use `overlay(alignment\"},{\"type\":\"emoji\",\"name\":\"content\"},{\"type\":\"text\",\"text\":\")` instead.\\\")\\n @inlinable public func overlay\u003cOverlay\u003e(_ overlay: Overlay, alignment: Alignment = .center) -\u003e some View where Overlay : View\\n\\nIs it SwiftUI API Design flaw or i miss something?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "c93f2afc-1210-484f-b294-da8846599d90",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "A deprecation release of `100000.0` is a way for Swift framework authors to communicate that an API shouldn’t be used in new projects, but also isn’t  harmful to keep using in existing projects.\n\nSuch “soft deprecated” APIs won’t be offered in autocomplete, and are typically in a separate section of the documentation. But the compiler won’t give a warning about existing uses. Because those uses aren’t harmful, we don’t want developers dealing with a bunch of warnings just because they use a new compiler version.",
          "ts": "1666298672.265359",
          "thread_ts": "1666298648.581449",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0469NB7686"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "tGqz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "A deprecation release of "
                    },
                    {
                      "type": "text",
                      "text": "100000.0",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " is a way for Swift framework authors to communicate that an API shouldn’t be used in new projects, but also isn’t  harmful to keep using in existing projects.\n\nSuch “soft deprecated” APIs won’t be offered in autocomplete, and are typically in a separate section of the documentation. But the compiler won’t give a warning about existing uses. Because those uses aren’t harmful, we don’t want developers dealing with a bunch of warnings just because they use a new compiler version."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "66c559e4-6cfb-43cb-aa5c-fa0fa328a966",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "I’d love for a way to enable warnings for these!",
          "ts": "1666298709.611419",
          "thread_ts": "1666298648.581449",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heavy_plus_sign",
              "count": 1,
              "users": [
                "U0455KK3NKU"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vOYG",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’d love for a way to enable warnings for these!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "1278b572-1eb8-46a9-8d89-4940a3c970d4",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "The only place they show is in the autocomplete, having an opt in ability to show the soft deprecations would be amazing - I understand this would need to be added to Swift though",
          "ts": "1666298747.032029",
          "thread_ts": "1666298648.581449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "GWSs=",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "The only place they show is in the autocomplete, having an opt in ability to show the soft deprecations would be amazing - I understand this would need to be added to Swift though"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "dd28ca79-75ca-4944-8098-4b3df251ee7e",
          "type": "message",
          "user": "U045X0Y1SEA",
          "text": "Thank you for the detailed answer! \u003c@U0455KK3NKU\u003e",
          "ts": "1666298902.914919",
          "thread_ts": "1666298648.581449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OPm6",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you for the detailed answer! "
                    },
                    {
                      "type": "user",
                      "user_id": "U0455KK3NKU"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "c4a85730-2be5-4cb6-9c3c-6f8697c8a5a4",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "There have been some related proposals on Swift Evolution at \u003chttp://forums.swift.org|forums.swift.org\u003e if you’re interested in learning more.",
          "ts": "1666299034.626729",
          "thread_ts": "1666298648.581449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "VEw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "There have been some related proposals on Swift Evolution at "
                    },
                    {
                      "type": "link",
                      "url": "http://forums.swift.org",
                      "text": "forums.swift.org"
                    },
                    {
                      "type": "text",
                      "text": " if you’re interested in learning more."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "0958a7c8-1667-4d31-ba2c-b6f0e8492111",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "I’d love a link to one if you have it handy",
          "ts": "1666299051.812539",
          "thread_ts": "1666298648.581449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "N4mY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I’d love a link to one if you have it handy"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "eb1ef01c-23c5-4bf3-8867-cdf21cc30d7f",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "I think this was the last time it was discussed: \u003chttps://forums.swift.org/t/proposing-to-expand-available-to-introduce-discouraged/38197\u003e",
          "ts": "1666299367.866339",
          "thread_ts": "1666298648.581449",
          "attachments": [
            {
              "fallback": "Swift Forums: Proposing to expand `available` to introduce `discouraged`",
              "id": 1,
              "title": "Proposing to expand `available` to introduce `discouraged`",
              "title_link": "https://forums.swift.org/t/proposing-to-expand-available-to-introduce-discouraged/38197",
              "text": "What follows is a proposal draft for initial feedback. This is a link to a gist version. The gist will be updated as feedback from community members is processed. The cut-and-paste into this post will not. We would greatly appreciate your thoughtful feedback on this pitch. Thank you. Expanding available to introduce discouraged Proposal: SE-nnnnnnnn Authors: Erica Sadun, Chris Lattner Review Manager: TBD Status: Awaiting implementation Introduction Swift's available attribute doc...",
              "thumb_url": "https://global.discourse-cdn.com/swift/original/1X/0a90dde98a223f5841eeca49d89dc9f57592e8d6.png",
              "service_name": "Swift Forums",
              "service_icon": "https://global.discourse-cdn.com/swift/optimized/1X/0a90dde98a223f5841eeca49d89dc9f57592e8d6_2_180x180.png",
              "from_url": "https://forums.swift.org/t/proposing-to-expand-available-to-introduce-discouraged/38197",
              "original_url": "https://forums.swift.org/t/proposing-to-expand-available-to-introduce-discouraged/38197",
              "fields": [
                {
                  "title": "Reading time",
                  "value": "7 mins :clock2:",
                  "short": true
                },
                {
                  "title": "Likes",
                  "value": "111 :heart:",
                  "short": true
                }
              ],
              "blocks": null,
              "ts": 1593977744
            }
          ],
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0469NB7686"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jf7g",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I think this was the last time it was discussed: "
                    },
                    {
                      "type": "link",
                      "url": "https://forums.swift.org/t/proposing-to-expand-available-to-introduce-discouraged/38197",
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U045WJCT7GW\u003e asked\n\u0026gt; What's the best way to make a view want to adopt its parent size. I find that it's easy to nest inside a ZStack or force the .frame for this but it feels wrong. AKA is there a modifier that does the opposite of .fixedSize()?",
      "ts": "1666298676.985259",
      "thread_ts": "1666298676.985259",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666299602.503329",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "lAn73",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U045WJCT7GW"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"What's the best way to make a view want to adopt its parent size. I find that it's easy to nest inside a ZStack or force the .frame for this but it feels wrong. AKA is there a modifier that does the opposite of .fixedSize()?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "a0106568-88ca-4d5a-b3f5-f93585803020",
          "type": "message",
          "user": "U0476A9RTNZ",
          "text": "I _think_ that setting a max width and max height to `.infinity` will invite the view to use as much possible pixel estate as possible, i.e. have equal size as its parent",
          "ts": "1666299159.644669",
          "thread_ts": "1666298676.985259",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "cdYA",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I "
                    },
                    {
                      "type": "text",
                      "text": "think",
                      "style": {
                        "italic": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " that setting a max width and max height to "
                    },
                    {
                      "type": "text",
                      "text": ".infinity",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " will invite the view to use as much possible pixel estate as possible, i.e. have equal size as its parent"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "888f46e6-f106-4d82-b171-aa75c4a39bf8",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "Thanks \u003c@U0476A9RTNZ\u003e. Maybe I’m using that wrong but it seems to make SwiftUI unhappy (and crashy) if I do something like `.frame(maxWidth: .infinity)`. I suppose it’d be easy enough to write a custom modifier for this if it’s that easy.",
          "ts": "1666299602.503329",
          "thread_ts": "1666298676.985259",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "raised_hands",
              "count": 1,
              "users": [
                "U0476A9RTNZ"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "TDKJ+",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks "
                    },
                    {
                      "type": "user",
                      "user_id": "U0476A9RTNZ"
                    },
                    {
                      "type": "text",
                      "text": ". Maybe I’m using that wrong but it seems to make SwiftUI unhappy (and crashy) if I do something like "
                    },
                    {
                      "type": "text",
                      "text": ".frame(maxWidth: .infinity)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ". I suppose it’d be easy enough to write a custom modifier for this if it’s that easy."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U04713BK29G\u003e asked\n\u0026gt; I'd like to have more async handler (like button actions) in swiftui in the future\n\u0026gt; \n\u0026gt; In the mean team, the suggest approach tu use async/await is just to call a sync func in an observed VM, and then start a Task and update a shared state after the await? How to better manage actor access using swiftui (ex. @MainActor) ?",
      "ts": "1666298717.565899",
      "thread_ts": "1666298717.565899",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666298754.205749",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "D7O",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U04713BK29G"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I'd like to have more async handler (like button actions) in swiftui in the future\\n\\nIn the mean team, the suggest approach tu use async\\/await is just to call a sync func in an observed VM, and then start a Task and update a shared state after the await? How to better manage actor access using swiftui (ex. @MainActor) ?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "c12ff433-a205-437d-9f67-9481990a4687",
          "type": "message",
          "user": "U045J8SG70R",
          "text": "While we can’t discuss future plan we definitely appreciate if you would file a feedback for future enhancement to the framework.\n\nCurrently, if you need to interact with an async context from, say a `Button` closure, we just suggest to create a new `Task` in the closure or, as you suggested, call a synchronous function on another type that would then spawn up a new `Task` .",
          "ts": "1666298754.205749",
          "thread_ts": "1666298717.565899",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U04713BK29G"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7ZIM",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "While we can’t discuss future plan we definitely appreciate if you would file a feedback for future enhancement to the framework.\n\nCurrently, if you need to interact with an async context from, say a "
                    },
                    {
                      "type": "text",
                      "text": "Button",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " closure, we just suggest to create a new "
                    },
                    {
                      "type": "text",
                      "text": "Task",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " in the closure or, as you suggested, call a synchronous function on another type that would then spawn up a new "
                    },
                    {
                      "type": "text",
                      "text": "Task",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " ."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046LCQD02H\u003e asked\n\u0026gt; In SwiftUI, for the Mac running Monterey, please explain the recommended methods:\n\u0026gt; 1. Open a window\n\u0026gt; 2. Initialize data in that window\n\u0026gt; 3. Find all open windows \n\u0026gt; 4. Determine if a window is open\n\u0026gt; 5. Close a window from a view not in that window.",
      "ts": "1666298742.529379",
      "thread_ts": "1666298742.529379",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666298790.953899",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "LiMo7",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046LCQD02H"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"In SwiftUI, for the Mac running Monterey, please explain the recommended methods:\\n1. Open a window\\n2. Initialize data in that window\\n3. Find all open windows \\n4. Determine if a window is open\\n5. Close a window from a view not in that window.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "cd57b036-29eb-40e1-a1c0-d42d35c7ac9f",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "Hi - thanks for the question(s)!\n\nI would say that if you are able to, targeting macOS Ventura would be beneficial for some of these operations. In particular, we added the new `OpenWindowAction` and a new initializer on `WindowGroup` which would satisfy both 1) and 2). If you are unable to do that, there is a workaround of using URLs in conjunction with `handlesExternalEvents()` to mimic some of that behavior, but it is much more limited.\n\nWith regards to the other points, we do not have any API for this currently, but would certainly appreciate some feedback on them. Any details you can provide on your use case in the feedback is also very helpful.",
          "ts": "1666298790.953899",
          "thread_ts": "1666298742.529379",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "dgh",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi - thanks for the question(s)!\n\nI would say that if you are able to, targeting macOS Ventura would be beneficial for some of these operations. In particular, we added the new "
                    },
                    {
                      "type": "text",
                      "text": "OpenWindowAction",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " and a new initializer on "
                    },
                    {
                      "type": "text",
                      "text": "WindowGroup",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " which would satisfy both 1) and 2). If you are unable to do that, there is a workaround of using URLs in conjunction with "
                    },
                    {
                      "type": "text",
                      "text": "handlesExternalEvents()",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to mimic some of that behavior, but it is much more limited.\n\nWith regards to the other points, we do not have any API for this currently, but would certainly appreciate some feedback on them. Any details you can provide on your use case in the feedback is also very helpful."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0460AEFDU5\u003e asked\n\u0026gt; In recent Xcode releases, SwiftUI has been showing purple warnings about publishing changes within view updates, typically when a view is observing an @Published property of an ObservableObject. This used to work without warnings, but now it seems the consensus to avoid the warnings is to use local @State properties in the views and keep it in sync using onReceive and onChange modifiers. Is this warning a bug? Or does it indicate a shift in how we should be utilizing @Published properties with SwiftUI views? Thanks!",
      "ts": "1666298917.574449",
      "thread_ts": "1666298917.574449",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 3,
      "latest_reply": "1666300108.790289",
      "reactions": [
        {
          "name": "+1",
          "count": 2,
          "users": [
            "U046YMT8Y58",
            "U047HCSTFBL"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "kGWY",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0460AEFDU5"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"In recent Xcode releases, SwiftUI has been showing purple warnings about publishing changes within view updates, typically when a view is observing an @Published property of an ObservableObject. This used to work without warnings, but now it seems the consensus to avoid the warnings is to use local @State properties in the views and keep it in sync using onReceive and onChange modifiers. Is this warning a bug? Or does it indicate a shift in how we should be utilizing @Published properties with SwiftUI views? Thanks!\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "d3407062-a925-48d5-9466-04c4febcfcc0",
          "type": "message",
          "user": "U0455KK9C2W",
          "text": "These warnings are meant to catch issues like these\n```@EnvironmentObject private var myObject: MyObject\n\nvar body: some View {\n  myObject.myBool.toggle()\n  return Text(\"Hello World\")\n}```\nThat is invalid to do with a published property, or a state binding and has always been invalid. If the warning is something from a mutation of a property that you did, you should fix that.\n\nIf the warning is coming from a mutation that you didn’t do, that could represent a bug in SwiftUI and I’d recommend filing a feedback with a sample project that reproduces the issue.",
          "ts": "1666299006.882039",
          "thread_ts": "1666298917.574449",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 3,
              "users": [
                "U0460AEFDU5",
                "U046PFQBNA1",
                "U0465SGRQTG"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "A=Z0",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "These warnings are meant to catch issues like these\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"@EnvironmentObject private var myObject: MyObject\\n\\nvar body: some View {\\n  myObject.myBool.toggle()\\n  return Text(\\\"Hello World\\\")\\n}\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "That is invalid to do with a published property, or a state binding and has always been invalid. If the warning is something from a mutation of a property that you did, you should fix that.\n\nIf the warning is coming from a mutation that you didn’t do, that could represent a bug in SwiftUI and I’d recommend filing a feedback with a sample project that reproduces the issue."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "42eecea0-a2d0-48ac-9eb2-e3e60ceeecdb",
          "type": "message",
          "user": "U0476JSMVUH",
          "text": "I believe one of the Xcode betas falsely flagged this warning in a few places, but it was fixed in the following beta. You can trust them again.",
          "ts": "1666299476.335049",
          "thread_ts": "1666298917.574449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vFn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I believe one of the Xcode betas falsely flagged this warning in a few places, but it was fixed in the following beta. You can trust them again."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "014e58f0-5c62-4022-b5ff-1612c3b54133",
          "type": "message",
          "user": "U0464MKLKPW",
          "text": "i get the warning when running the latest 16.0 release (16.0.3), but the warning is absent in more recent 16.1 betas",
          "ts": "1666300108.790289",
          "thread_ts": "1666298917.574449",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "UTn",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "i get the warning when running the latest 16.0 release (16.0.3), but the warning is absent in more recent 16.1 betas"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046S5LM1H6\u003e asked\n\u0026gt; I have multiple buttons in SwiftUI presenting different .sheet(isPresented: $showingSheet) {\n\u0026gt;             SheetView()\n\u0026gt;         }\n\u0026gt; \n\u0026gt; I notice if I swipe down quickly on the first sheet and try to present the second sheet immediately a lot of times it doesn't work. Sometimes it either shows the first sheet or it just doesn't present anything. Is this a known issue or this is something now recommended in SwiftUI?",
      "ts": "1666298937.033269",
      "thread_ts": "1666298937.033269",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 7,
      "latest_reply": "1666299277.071559",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "uYJTf",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046S5LM1H6"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I have multiple buttons in SwiftUI presenting different .sheet(isPresented: $showingSheet) {\\n            SheetView()\\n        }\\n\\nI notice if I swipe down quickly on the first sheet and try to present the second sheet immediately a lot of times it doesn't work. Sometimes it either shows the first sheet or it just doesn't present anything. Is this a known issue or this is something now recommended in SwiftUI?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "b44f1a00-f81b-44e0-b214-454c3f63c600",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "Thanks for the question! That isn’t something I’ve seen before. I’d love a Feedback with a sample project so I can see what’s going on.\n\nOne possible work around is to consolidate to a top-level `sheet(item:…)` modifier, then use a view model type to control what sheet is presented. That provides a single point for controlling the present sheet.",
          "ts": "1666298969.497999",
          "thread_ts": "1666298937.033269",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "z1g5",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks for the question! That isn’t something I’ve seen before. I’d love a Feedback with a sample project so I can see what’s going on.\n\nOne possible work around is to consolidate to a top-level `sheet(item:…)` modifier, then use a view model type to control what sheet is presented. That provides a single point for controlling the present sheet."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "888da8e3-ada0-4276-918c-298828a4cea6",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Is it bad to have multiple .sheet modifiers on a view, predicated on different presentation booleans?",
          "ts": "1666299017.931229",
          "thread_ts": "1666298937.033269",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "714vd",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Is it bad to have multiple .sheet modifiers on a view, predicated on different presentation booleans?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "baad3c36-a866-4dbb-ab42-c0825d8dacc2",
          "type": "message",
          "user": "U046S5LM1H6",
          "text": "FB10873881",
          "ts": "1666299036.809039",
          "thread_ts": "1666298937.033269",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U0455KK3NKU",
                "U044WGBSFEH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "1mqKj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FB10873881"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ff890c9b-b383-4f13-9d84-5867c46daf6b",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "I often have a \"New\" and an \"Edit Existing\" sheet to present the same form with new or existing field data.",
          "ts": "1666299059.308519",
          "thread_ts": "1666298937.033269",
          "edited": {
            "user": "U046QGJ6B3M",
            "ts": "1666299086.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "6l0SM",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I often have a \"New\" and an \"Edit Existing\" sheet to present the same form with new or existing field data."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d1f23a0f-203a-4fc1-8541-0bd13d6f11ff",
          "type": "message",
          "user": "U0455KK3NKU",
          "text": "Multiple sheet modifiers should be supported. But sometimes people run into timing issues, so the single-modifier approach is sometimes a workaround.",
          "ts": "1666299117.001799",
          "thread_ts": "1666298937.033269",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Ovl",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Multiple sheet modifiers should be supported. But sometimes people run into timing issues, so the single-modifier approach is sometimes a workaround."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "72d37bea-b025-4b06-ba61-4e9e4a762d21",
          "type": "message",
          "user": "U046S5LM1H6",
          "text": "fyi this only happens when user swipe down manually",
          "ts": "1666299167.346689",
          "thread_ts": "1666298937.033269",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Tgnw",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "fyi this only happens when user swipe down manually"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "49da4850-4160-44dd-9443-cb9ceed4cdea",
          "type": "message",
          "user": "U046QGJ6B3M",
          "text": "Can you elaborate on \"timing\" issues?",
          "ts": "1666299277.071559",
          "thread_ts": "1666298937.033269",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "taNLl",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Can you elaborate on \"timing\" issues?"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464S1B43V\u003e asked\n\u0026gt; when using integrating a Appkit Component - NSTableViewController for example - in a SwiftUI app, what's the recommended way to app the Appkit / UIKit component to communicate any state change to the SwiftUI app? Using a coordinator in a delegate method to mutate the state leads to a warning we should not mutate the state during an update",
      "ts": "1666299045.898689",
      "thread_ts": "1666299045.898689",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666299093.612609",
      "reactions": [
        {
          "name": "eyes",
          "count": 1,
          "users": [
            "U046TD30QBS"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "oTUMQ",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464S1B43V"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"when using integrating a Appkit Component - NSTableViewController for example - in a SwiftUI app, what's the recommended way to app the Appkit \\/ UIKit component to communicate any state change to the SwiftUI app? Using a coordinator in a delegate method to mutate the state leads to a warning we should not mutate the state during an update\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "5a211a9c-be0a-4584-bfbb-ebe4068ad6a3",
          "type": "message",
          "user": "U0452LR9TRB",
          "text": "I'd recommend watching the \"Use SwiftUI with AppKit\" / and \"Use SwiftUI with UIKit\" WWDC sessions",
          "ts": "1666299066.068099",
          "thread_ts": "1666299045.898689",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 2,
              "users": [
                "U0455KK1D5G",
                "U046PFQBNA1"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xc9kq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I'd recommend watching the \"Use SwiftUI with AppKit\" / and \"Use SwiftUI with UIKit\" WWDC sessions"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f6e9daa9-9830-4978-b39d-7a436f13772f",
          "type": "message",
          "user": "U046TD30QBS",
          "text": "Wrap mutating blocks in a dispatch async main",
          "ts": "1666299093.612609",
          "thread_ts": "1666299045.898689",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U0464S1B43V"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "SScb",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Wrap mutating blocks in a dispatch async main"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046797427P\u003e asked\n\u0026gt; When we have a feedback that we have previously filed on a SwiftUI issue, with a sample project to reproduce, is it useful to update the feedback with \"Issue is still present on iOS 16.1 RC (build xxxxxx)\"? Or is this just unhelpful noise?",
      "ts": "1666299196.402419",
      "thread_ts": "1666299196.402419",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666299333.427609",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "TXGb",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046797427P"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"When we have a feedback that we have previously filed on a SwiftUI issue, with a sample project to reproduce, is it useful to update the feedback with \\\"Issue is still present on iOS 16.1 RC (build xxxxxx)\\\"? Or is this just unhelpful noise?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "3ce14f54-56e6-48a6-9304-df3353b91010",
          "type": "message",
          "user": "U045J8S8JQZ",
          "text": "Hi! It is helpful to have this information, as it allows us to save some debugging time. Although we do not expect feedback authors to do it, so it’s totally up to you.\n\nAnd thanks for filing feedback!",
          "ts": "1666299333.427609",
          "thread_ts": "1666299196.402419",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "white_check_mark",
              "count": 1,
              "users": [
                "U046797427P"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xPb",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Hi! It is helpful to have this information, as it allows us to save some debugging time. Although we do not expect feedback authors to do it, so it’s totally up to you.\n\nAnd thanks for filing feedback!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0460BADXM3\u003e asked\n\u0026gt; How do you chain animations in SwiftUI? For example, I want to animate one view first, and immediately start another animation when the first one finishes.",
      "ts": "1666299273.454949",
      "thread_ts": "1666299273.454949",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666299288.552619",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "RUnN",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0460BADXM3"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"How do you chain animations in SwiftUI? For example, I want to animate one view first, and immediately start another animation when the first one finishes.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "ab2632cf-30c9-4711-85ca-6879b38f6d7e",
          "type": "message",
          "user": "U04583CCP4L",
          "text": "Unfortunately, It is not currently possible to chain animations. Depending on your use case, you may be able to use `animation.delay(...)` to delay the second half of the animation until after the first half has finished.\n\nWe would really appreciate it if you could file a feedback with details of your use case!",
          "ts": "1666299288.552619",
          "thread_ts": "1666299273.454949",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "smiling_face_with_tear",
              "count": 4,
              "users": [
                "U0460BADXM3",
                "U046TD30QBS",
                "U0464M23S4C",
                "U046PFQBNA1"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "2XN3",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Unfortunately, It is not currently possible to chain animations. Depending on your use case, you may be able to use "
                    },
                    {
                      "type": "text",
                      "text": "animation.delay(...)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to delay the second half of the animation until after the first half has finished.\n\nWe would really appreciate it if you could file a feedback with details of your use case!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046GDL7Q02\u003e asked\n\u0026gt; I'm seeing an issue in iOS 14 SwiftUI where I am trying to conditionally show 1 of 3 objects that conform to the Shape protocol. 2 of them are custom shapes (essentially rounded rectangles where only 2 corners are rounded) and one of them is a Rectangle. The compiler throws an error that it is taking too long to type check the view.\n\u0026gt; \n\u0026gt; ```\n\u0026gt;                     if options.indices.first == index {\n\u0026gt;                         RoundedCornerShape(corners: [.topLeft, .bottomLeft], radius: 15) \n\u0026gt;                             .fill(Color.cfaWhite)\n\u0026gt;                             .padding(1)\n\u0026gt;                             .opacity(isSelected ? 1 : 0.01)\n\u0026gt;                             .onTapGesture {\n\u0026gt;                                 withAnimation(\n\u0026gt;                                     .interactiveSpring(\n\u0026gt;                                         response: 0.2,\n\u0026gt;                                         dampingFraction: 2,\n\u0026gt;                                         blendDuration: 0.5\n\u0026gt;                                     )\n\u0026gt;                                 ) {\n\u0026gt;                                     selectedIndex = index\n\u0026gt;                                     onSelect(index)\n\u0026gt;                                 }\n\u0026gt;                             }\n\u0026gt;                     } else if options.indices.last == index {\n\u0026gt;                         RoundedCornerShape(corners: [.topRight, .bottomRight], radius: 15)\n\u0026gt;                             .fill(Color.cfaWhite)\n\u0026gt;                             .padding(1)\n\u0026gt;                             .opacity(isSelected ? 1 : 0.01)\n\u0026gt;                             .onTapGesture {\n\u0026gt;                                 withAnimation(\n\u0026gt;                                     .interactiveSpring(\n\u0026gt;                                         response: 0.2,\n\u0026gt;                                         dampingFraction: 2,\n\u0026gt;                                         blendDuration: 0.5\n\u0026gt;                                     )\n\u0026gt;                                 ) {\n\u0026gt;                                     selectedIndex = index\n\u0026gt;                                     onSelect(index)\n\u0026gt;                                 }\n\u0026gt;                             }\n\u0026gt;                     } else {\n\u0026gt;                         Rectangle()\n\u0026gt;                             .fill(Color.cfaWhite)\n\u0026gt;                             .padding(1)\n\u0026gt;                             .opacity(isSelected ? 1 : 0.01)\n\u0026gt;                             .onTapGesture {\n\u0026gt;                                 withAnimation(\n\u0026gt;                                     .interactiveSpring(\n\u0026gt;                                         response: 0.2,\n\u0026gt;                                         dampingFraction: 2,\n\u0026gt;                                         blendDuration: 0.5\n\u0026gt;                                     )\n\u0026gt;                                 ) {\n\u0026gt;                                     selectedIndex = index\n\u0026gt;                                     onSelect(index)\n\u0026gt;                                 }\n\u0026gt;                             }\n\u0026gt;                     }\n\u0026gt; ```\n\u0026gt; \n\u0026gt; I can only get the compiler to be ok with it if I structure it the way I am above but I don't like having to repeat the same modifiers for each view. My thought was that I could put them in a Group but I got the same compiler error. I've also tried creating a ViewModifier to reduce the duplication but `.fill` cannot be applied to a View.",
      "ts": "1666299496.973009",
      "thread_ts": "1666299496.973009",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 1,
      "latest_reply": "1666299504.917579",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "Yh7N",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046GDL7Q02"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I'm seeing an issue in iOS 14 SwiftUI where I am trying to conditionally show 1 of 3 objects that conform to the Shape protocol. 2 of them are custom shapes (essentially rounded rectangles where only 2 corners are rounded) and one of them is a Rectangle. The compiler throws an error that it is taking too long to type check the view.\\n\\n```\\n                    if options.indices.first == index {\\n                        RoundedCornerShape(corners: [.topLeft, .bottomLeft], radius: 15) \\n                            .fill(Color.cfaWhite)\\n                            .padding(1)\\n                            .opacity(isSelected ? 1 : 0.01)\\n                            .onTapGesture {\\n                                withAnimation(\\n                                    .interactiveSpring(\\n                                        response: 0.2,\\n                                        dampingFraction: 2,\\n                                        blendDuration: 0.5\\n                                    )\\n                                ) {\\n                                    selectedIndex = index\\n                                    onSelect(index)\\n                                }\\n                            }\\n                    } else if options.indices.last == index {\\n                        RoundedCornerShape(corners: [.topRight, .bottomRight], radius: 15)\\n                            .fill(Color.cfaWhite)\\n                            .padding(1)\\n                            .opacity(isSelected ? 1 : 0.01)\\n                            .onTapGesture {\\n                                withAnimation(\\n                                    .interactiveSpring(\\n                                        response: 0.2,\\n                                        dampingFraction: 2,\\n                                        blendDuration: 0.5\\n                                    )\\n                                ) {\\n                                    selectedIndex = index\\n                                    onSelect(index)\\n                                }\\n                            }\\n                    } else {\\n                        Rectangle()\\n                            .fill(Color.cfaWhite)\\n                            .padding(1)\\n                            .opacity(isSelected ? 1 : 0.01)\\n                            .onTapGesture {\\n                                withAnimation(\\n                                    .interactiveSpring(\\n                                        response: 0.2,\\n                                        dampingFraction: 2,\\n                                        blendDuration: 0.5\\n                                    )\\n                                ) {\\n                                    selectedIndex = index\\n                                    onSelect(index)\\n                                }\\n                            }\\n                    }\\n```\\n\\nI can only get the compiler to be ok with it if I structure it the way I am above but I don't like having to repeat the same modifiers for each view. My thought was that I could put them in a Group but I got the same compiler error. I've also tried creating a ViewModifier to reduce the duplication but `.fill` cannot be applied to a View.\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "f5797a14-f483-4f9c-80e1-371b19fb85c3",
          "type": "message",
          "user": "U045J8S9EU9",
          "text": "Yeah, unfortunately, large builder expressions like this can be hard for the Swift compiler to handle sometimes. I have a few suggestions that might be useful, one for this specific case, and a few others to generally help when people run into “too complex to type check” errors in other contexts:\n\nFor this specific case, I would recommend making a single modifier that applies all of the other modifiers you want. Then try making a group, and applying that modifier to the group. So something like:\n\n```extension View {\n    func applyAllMyModifiers() -\u0026gt; some View { // TODO: give this a better name 😉\n        return self.fill(Color.cfaWhite)\n            .padding(1)\n            // apply all the other modifiers here\n    }\n}```\nAnd then apply that in all the places its needed, or make a group, and apply it once.\n\nThis works because Swift typechecks things independently at function boundaries. This means that generally, factoring things out into their own functions / computed properties is a great way to help the Swift compiler.\n\nAnother good trick that can help in other places you encounter this error is breaking expressions apart into smaller sub-expressions, especially if the smaller sub-expressions are given explicit types.",
          "ts": "1666299504.917579",
          "thread_ts": "1666299496.973009",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "0yJJ",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yeah, unfortunately, large builder expressions like this can be hard for the Swift compiler to handle sometimes. I have a few suggestions that might be useful, one for this specific case, and a few others to generally help when people run into “too complex to type check” errors in other contexts:\n\nFor this specific case, I would recommend making a single modifier that applies all of the other modifiers you want. Then try making a group, and applying that modifier to the group. So something like:\n\n"
                    }
                  ]
                },
                {
                  "Type": "rich_text_preformatted",
                  "Raw": "{\"type\":\"rich_text_preformatted\",\"elements\":[{\"type\":\"text\",\"text\":\"extension View {\\n    func applyAllMyModifiers() -\u003e some View { \\/\\/ TODO: give this a better name \\ud83d\\ude09\\n        return self.fill(Color.cfaWhite)\\n            .padding(1)\\n            \\/\\/ apply all the other modifiers here\\n    }\\n}\"}],\"border\":0}"
                },
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "\nAnd then apply that in all the places its needed, or make a group, and apply it once.\n\nThis works because Swift typechecks things independently at function boundaries. This means that generally, factoring things out into their own functions / computed properties is a great way to help the Swift compiler.\n\nAnother good trick that can help in other places you encounter this error is breaking expressions apart into smaller sub-expressions, especially if the smaller sub-expressions are given explicit types."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046797427P\u003e asked\n\u0026gt; The documentation for editMode suggests the option to swap a Text view for a TextField when not in edit mode. However, such a swap between these two views with identical contents does not animate the views smoothly, because the TextField text is animated away while the identical Text view text is animated in. I'm using the alternative of just disabling the TextField, but is there a way to guide the animation in order to use the approach in the documentation? \u003chttps://developer.apple.com/documentation/swiftui/editmode|https://developer.apple.com/documentation/swiftui/editmode\u003e",
      "ts": "1666299513.343229",
      "thread_ts": "1666299513.343229",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666299641.200879",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "vcb",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046797427P"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"The documentation for editMode suggests the option to swap a Text view for a TextField when not in edit mode. However, such a swap between these two views with identical contents does not animate the views smoothly, because the TextField text is animated away while the identical Text view text is animated in. I'm using the alternative of just disabling the TextField, but is there a way to guide the animation in order to use the approach in the documentation? \"},{\"type\":\"link\",\"url\":\"https:\\/\\/developer.apple.com\\/documentation\\/swiftui\\/editmode\",\"text\":\"https:\\/\\/developer.apple.com\\/documentation\\/swiftui\\/editmode\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "fe2039db-bbc3-404a-8b0f-3946fa142091",
          "type": "message",
          "user": "U0452LR9TRB",
          "text": "Workaround: keep the `TextField` but conditionally set `disabled(true)` on an ancestor when it cannot be edited, using `disabled(false)` when it can. Please file a feedback for the original issue.",
          "ts": "1666299555.220729",
          "thread_ts": "1666299513.343229",
          "edited": {
            "user": "U0452LR9TRB",
            "ts": "1666299610.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xqj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Workaround: keep the "
                    },
                    {
                      "type": "text",
                      "text": "TextField",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " but conditionally set "
                    },
                    {
                      "type": "text",
                      "text": "disabled(true)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " on an ancestor when it cannot be edited, using "
                    },
                    {
                      "type": "text",
                      "text": "disabled(false)",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " when it can. Please file a feedback for the original issue."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "01c2d632-2ba1-493c-83ef-d1901f101bba",
          "type": "message",
          "user": "U046797427P",
          "text": "Ok, will do. Had not occurred to me to file feedback on this actually, will do.",
          "ts": "1666299641.200879",
          "thread_ts": "1666299513.343229",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "xp0X",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Ok, will do. Had not occurred to me to file feedback on this actually, will do."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U0464SKECHJ\u003e asked\n\u0026gt; I often notice that my view code gets larger not by the actual view content by .sheet modifiers, .toolbar etc. I managed to extract toolbar content separately in a function @ToolbarContentBuilder.\n\u0026gt; Similarly is there a better way to extract away a lot of the `.sheet` and `.alert` modifiers.\n\u0026gt; Questions:\n\u0026gt; 1) Is there a better way / pattern to handle such scenarios?\n\u0026gt; 2) Or is it fine?",
      "ts": "1666299582.881539",
      "thread_ts": "1666299582.881539",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666299671.144389",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "4xL",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U0464SKECHJ"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"I often notice that my view code gets larger not by the actual view content by .sheet modifiers, .toolbar etc. I managed to extract toolbar content separately in a function @ToolbarContentBuilder.\\nSimilarly is there a better way to extract away a lot of the `.sheet` and `.alert` modifiers.\\nQuestions:\\n1) Is there a better way \\/ pattern to handle such scenarios?\\n2) Or is it fine?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "aa5ba861-e45c-4c3b-bae8-5ecd9fa26935",
          "type": "message",
          "user": "U0455KK1D5G",
          "text": "You can certainly create your own custom `ViewModifier` to encapsulate some of this code. I’ll also note that the contents for sheets and alerts are `ViewBuilders`, so you can extract those out to functions or properties in a similar manner to how you did the toolbar contents.",
          "ts": "1666299604.382999",
          "thread_ts": "1666299582.881539",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "heart",
              "count": 2,
              "users": [
                "U0464SKECHJ",
                "U046PFQBNA1"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "lvdk",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "You can certainly create your own custom "
                    },
                    {
                      "type": "text",
                      "text": "ViewModifier",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " to encapsulate some of this code. I’ll also note that the contents for sheets and alerts are "
                    },
                    {
                      "type": "text",
                      "text": "ViewBuilders",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": ", so you can extract those out to functions or properties in a similar manner to how you did the toolbar contents."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "f10a0a29-3998-4260-aabc-5cd0f8ade681",
          "type": "message",
          "user": "U0464SKECHJ",
          "text": "Thanks a lot \u003c@U0455KK1D5G\u003e that's a good suggestion",
          "ts": "1666299671.144389",
          "thread_ts": "1666299582.881539",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "pray",
              "count": 1,
              "users": [
                "U0455KK1D5G"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "OPS",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks a lot "
                    },
                    {
                      "type": "user",
                      "user_id": "U0455KK1D5G"
                    },
                    {
                      "type": "text",
                      "text": " that's a good suggestion"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "832795b5-bf85-423d-9ffc-38e33d806516",
      "type": "message",
      "user": "U045J8S9EU9",
      "text": "I posted this in an answer to a question above as well but figured I’d highlight part of the answer as advice applicable to everyone as it’s useful advice for when you encounter errors like “expression is too complex to typecheck” in SwiftUI result builders:\n\n\u0026gt; Breaking things apart into smaller functions / computed properties is often helpful because Swift typechecks things independently at function boundaries. This means that generally, factoring things out into their own functions / computed properties is a great way to help the Swift compiler.\n\u0026gt; \n\u0026gt; Another good trick that can help in other places you encounter this error is breaking expressions apart into smaller sub-expressions, especially if the smaller sub-expressions are given explicit types.",
      "ts": "1666299607.529429",
      "edited": {
        "user": "U045J8S9EU9",
        "ts": "1666299630.000000"
      },
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "+1",
          "count": 6,
          "users": [
            "U0460BADXM3",
            "U0476035QKU",
            "U046LKK3L81",
            "U045ZA653NZ",
            "U0464SKECHJ",
            "U0463CGC9T7"
          ]
        },
        {
          "name": "trophy",
          "count": 4,
          "users": [
            "U045J8SG70R",
            "U0453US3GAJ",
            "U04583CAUAG",
            "U045J8S8JQZ"
          ]
        },
        {
          "name": "swift-orange",
          "count": 1,
          "users": [
            "U046FCQ7GHX"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "K==9",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "I posted this in an answer to a question above as well but figured I’d highlight part of the answer as advice applicable to everyone as it’s useful advice for when you encounter errors like “expression is too complex to typecheck” in SwiftUI result builders:\n\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Breaking things apart into smaller functions \\/ computed properties is often helpful because Swift typechecks things independently at function boundaries. This means that generally, factoring things out into their own functions \\/ computed properties is a great way to help the Swift compiler.\\n\\nAnother good trick that can help in other places you encounter this error is breaking expressions apart into smaller sub-expressions, especially if the smaller sub-expressions are given explicit types.\"}]}"
            }
          ]
        }
      ]
    },
    {
      "type": "message",
      "text": "\u003c@U046U1BQ9B2\u003e asked\n\u0026gt; Will there be an option to customize the TabView on iOS and macOS? Currently, you can change the background color, but you cannot change the font nor font size without creating a custom TabView. Will this be possible in future OS versions?",
      "ts": "1666299646.558809",
      "thread_ts": "1666299646.558809",
      "subtype": "bot_message",
      "bot_id": "B043UB9BUQG",
      "username": "Ask Apple - swiftui",
      "reply_count": 2,
      "latest_reply": "1666299919.238769",
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "cQXsW",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "user",
                  "user_id": "U046U1BQ9B2"
                },
                {
                  "type": "text",
                  "text": " asked\n"
                }
              ]
            },
            {
              "Type": "rich_text_quote",
              "Raw": "{\"type\":\"rich_text_quote\",\"elements\":[{\"type\":\"text\",\"text\":\"Will there be an option to customize the TabView on iOS and macOS? Currently, you can change the background color, but you cannot change the font nor font size without creating a custom TabView. Will this be possible in future OS versions?\"}]}"
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "1253cb2a-d086-4dd6-8c12-b61e2e180c9a",
          "type": "message",
          "user": "U045VJUAUDC",
          "text": "Might be able to do something like `UITabBar.appearance().propertyToCustomise = blah`  as a workaround",
          "ts": "1666299833.381279",
          "thread_ts": "1666299646.558809",
          "edited": {
            "user": "U045VJUAUDC",
            "ts": "1666299849.000000"
          },
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "MwW",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Might be able to do something like "
                    },
                    {
                      "type": "text",
                      "text": "UITabBar.appearance().propertyToCustomise = blah",
                      "style": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "  as a workaround"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "ca416568-8c17-4d6c-be03-3ce50fb52939",
          "type": "message",
          "user": "U046U1BQ9B2",
          "text": "Thank you!",
          "ts": "1666299919.238769",
          "thread_ts": "1666299646.558809",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "T1Ea",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "74515c93-068c-4663-8604-390e122b7591",
      "type": "message",
      "user": "U0453US3GAJ",
      "text": "Wow, that was a lot of questions! We have come to the end of our time for our Q\u0026amp;A today.\n\nSpecial thank you to our SwiftUI crew! And a thank you to everyone who asked a question. We hope everyone enjoyed this! :swift-blue: :star-struck:",
      "ts": "1666299787.247199",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "raised_hands",
          "count": 11,
          "users": [
            "U046LKK3L81",
            "U046AG9QTLL",
            "U046S4P76FJ",
            "U0460BADXM3",
            "U045WJCT7GW",
            "U0464SKECHJ",
            "U045ZA653NZ",
            "U04583CAUAG",
            "U046797427P",
            "U045J8S9EU9",
            "U046VFNJD6C"
          ]
        },
        {
          "name": "swift-blue",
          "count": 11,
          "users": [
            "U03V30M0C1K",
            "U046S4P76FJ",
            "U045WJCT7GW",
            "U046U1BQ9B2",
            "U0455GWEBLK",
            "U045WGB2MAS",
            "U046ETGSKNV",
            "U046JJACQ3H",
            "U046YKS1Q9H",
            "U045J8S9EU9",
            "U046VFNJD6C"
          ]
        },
        {
          "name": "man_dancing",
          "count": 3,
          "users": [
            "U045WJCT7GW",
            "U04635ASQAW",
            "U045J8S9EU9"
          ]
        },
        {
          "name": "pray",
          "count": 7,
          "users": [
            "U0464SKECHJ",
            "U046797427P",
            "U045QB05AVD",
            "U046ETGSKNV",
            "U045J8S9EU9",
            "U046YMT8Y58",
            "U047JR6V6AC"
          ]
        },
        {
          "name": "+1",
          "count": 1,
          "users": [
            "U046367SLLB"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "c/eFL",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "text",
                  "text": "Wow, that was a lot of questions! We have come to the end of our time for our Q\u0026A today.\n\nSpecial thank you to our SwiftUI crew! And a thank you to everyone who asked a question. We hope everyone enjoyed this! "
                },
                {
                  "type": "emoji",
                  "name": "swift-blue",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " "
                },
                {
                  "type": "emoji",
                  "name": "star-struck",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "client_msg_id": "133adba7-43ee-441d-ba33-1a347daa6ed3",
      "type": "message",
      "user": "U0453US3GAJ",
      "text": "\u003c!here\u003e\nHi, me again! :wave::skin-tone-3:\n\nOur SwiftUI team would like to thank everyone for participating at our Ask Apple sessions. We have been so proud to been able to host everyone and hope everyone loved it. :heart:\n\nWe are opening up threads for a while, please use this moment to provide us some feedback! You can also include any Feedback ID numbers you filed during any of the SwiftUI events and post them here now. Feel free to make any suggestions you would like to see moving forward, and topics that interest you? :rocket: :swift-blue:\n\nAdios folks, hope to see you all again! :partying_face:",
      "ts": "1666379027.993119",
      "thread_ts": "1666379027.993119",
      "reply_count": 13,
      "latest_reply": "1666450385.695979",
      "team": "T03U5MWB2FN",
      "reactions": [
        {
          "name": "orange_heart",
          "count": 16,
          "users": [
            "U045WJCT7GW",
            "U045QB05AVD",
            "U047JR6V6AC",
            "U045ZRTH5A9",
            "U046TCJHETH",
            "U047JNUP1MW",
            "U046068A90D",
            "U04627TA5JN",
            "U0462538BS7",
            "U04678YRK98",
            "U0460BADXM3",
            "U046KLSN137",
            "U045MLXJX71",
            "U0476A9RTNZ",
            "U0470KL5WMP",
            "U046S4P76FJ"
          ]
        },
        {
          "name": "purple_heart",
          "count": 1,
          "users": [
            "U046AD35GAK"
          ]
        },
        {
          "name": "the_horns::skin-tone-2",
          "count": 1,
          "users": [
            "U046AD35GAK"
          ]
        }
      ],
      "replace_original": false,
      "delete_original": false,
      "blocks": [
        {
          "type": "rich_text",
          "block_id": "328U",
          "elements": [
            {
              "type": "rich_text_section",
              "elements": [
                {
                  "type": "broadcast",
                  "range": "here"
                },
                {
                  "type": "text",
                  "text": "\nHi, me again! "
                },
                {
                  "type": "emoji",
                  "name": "wave",
                  "skin_tone": 3
                },
                {
                  "type": "text",
                  "text": "\n\nOur SwiftUI team would like to thank everyone for participating at our Ask Apple sessions. We have been so proud to been able to host everyone and hope everyone loved it. "
                },
                {
                  "type": "emoji",
                  "name": "heart",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": "\n\nWe are opening up threads for a while, please use this moment to provide us some feedback! You can also include any Feedback ID numbers you filed during any of the SwiftUI events and post them here now. Feel free to make any suggestions you would like to see moving forward, and topics that interest you? "
                },
                {
                  "type": "emoji",
                  "name": "rocket",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": " "
                },
                {
                  "type": "emoji",
                  "name": "swift-blue",
                  "skin_tone": 0
                },
                {
                  "type": "text",
                  "text": "\n\nAdios folks, hope to see you all again! "
                },
                {
                  "type": "emoji",
                  "name": "partying_face",
                  "skin_tone": 0
                }
              ]
            }
          ]
        }
      ],
      "slackdump_thread_replies": [
        {
          "client_msg_id": "db1f642c-bf91-47b3-ad27-89c024e7a03b",
          "type": "message",
          "user": "U04673E7B2P",
          "text": "Thank you for everything!",
          "ts": "1666379169.902319",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "H/pj",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you for everything!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "A2154EEB-B53D-4B89-8420-78B3ED8841FA",
          "type": "message",
          "user": "U045QB05AVD",
          "text": "Yeah, this was really helpful and solved my problem immediately. Thanks.",
          "ts": "1666379283.947499",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "tada",
              "count": 1,
              "users": [
                "U0441J2N9FH"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "7Hzhy",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Yeah, this was really helpful and solved my problem immediately. Thanks."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "38439e0f-b0b0-4c49-8ddc-622622b7bb33",
          "type": "message",
          "user": "U045WJCT7GW",
          "text": "Thanks for taking the time to do this! It’s invaluable to us as developers. My feedback would be: 1. More more more! 2. I’d love to see a version of these where it could just be focused on suggestions or API requests.",
          "ts": "1666379300.224509",
          "thread_ts": "1666379027.993119",
          "edited": {
            "user": "U045WJCT7GW",
            "ts": "1666379312.000000"
          },
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "reactions": [
            {
              "name": "+1",
              "count": 1,
              "users": [
                "U046KAFGASD"
              ]
            }
          ],
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "vpT",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks for taking the time to do this! It’s invaluable to us as developers. My feedback would be: 1. More more more! 2. I’d love to see a version of these where it could just be focused on suggestions or API requests."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "5ca443d5-1471-4dc3-bf33-6d24241b6c07",
          "type": "message",
          "user": "U0465NRPTPW",
          "text": ":pray: Here's a feedback from a question that didn't get addressed FB10280762.\n\nThanks for everything!",
          "ts": "1666379323.494669",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "Uz2",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "emoji",
                      "name": "pray",
                      "skin_tone": 0
                    },
                    {
                      "type": "text",
                      "text": " Here's a feedback from a question that didn't get addressed FB10280762.\n\nThanks for everything!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "6052cb2b-db5f-4353-8035-7c141b915a33",
          "type": "message",
          "user": "U046KAFGASD",
          "text": "Thanks very much. We all got lots of useful informations. :pray::skin-tone-3:\nUnfortunately, my question didn't make it \"out in the public\". :smiley:",
          "ts": "1666380302.943329",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "=Xq",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks very much. We all got lots of useful informations. "
                    },
                    {
                      "type": "emoji",
                      "name": "pray",
                      "skin_tone": 3
                    },
                    {
                      "type": "text",
                      "text": "\nUnfortunately, my question didn't make it \"out in the public\". "
                    },
                    {
                      "type": "emoji",
                      "name": "smiley",
                      "skin_tone": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "fd42057f-8128-421d-be54-1e261ff15277",
          "type": "message",
          "user": "U0471TP2PK4",
          "text": "Thanks so much for doing this. My feedback is more, more, more. Please.",
          "ts": "1666380691.654259",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "nUNR",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks so much for doing this. My feedback is more, more, more. Please."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "01486e03-8db6-478a-b8ee-40bcca7785d3",
          "type": "message",
          "user": "U045RMUH7AB",
          "text": "Thank you very much for everything!",
          "ts": "1666382376.156699",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "B7w",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you very much for everything!"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "de8db96e-23c4-40b4-ad1e-acf6c5dbc5c8",
          "type": "message",
          "user": "U046068A90D",
          "text": "Thank you so much!  Very helpful.",
          "ts": "1666386625.247459",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "jOz7",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you so much!  Very helpful."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "C7EA67B3-8775-477A-908C-2C6D7715C444",
          "type": "message",
          "user": "U04627TA5JN",
          "text": "Thank you so much! It was really great being able to do this outside of the regular WWDC cycle. This is really helpful.",
          "ts": "1666387984.315679",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "l6GUz",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you so much! It was really great being able to do this outside of the regular"
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "text",
                      "text": "WWDC cycle. This is really helpful."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "72db2a2a-35a6-4c2e-991d-278fad998409",
          "type": "message",
          "user": "U0462538BS7",
          "text": "Thank you, one question, how long will the threads be available for?",
          "ts": "1666388340.191989",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "SoO",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thank you, one question, how long will the threads be available for?"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "d716d19d-a4a4-4016-ac84-864f90f1aef4",
          "type": "message",
          "user": "U046H6QN602",
          "text": "I submitted a question at the start of the week but never heard anything in response.  Do we find out why it wasn't answered? (i.e. too many questions to be answered, stupid or unclear question,  answer unknown, etc)",
          "ts": "1666397901.106769",
          "thread_ts": "1666379027.993119",
          "edited": {
            "user": "U046H6QN602",
            "ts": "1666398008.000000"
          },
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "26t",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "I submitted a question at the start of the week but never heard anything in response.  Do we find out why it wasn't answered? (i.e. too many questions to be answered, stupid or unclear question,  answer unknown, etc)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "8cd75bbe-cdfd-47d2-9513-45a4267222a8",
          "type": "message",
          "user": "U0466VBE92Q",
          "text": "Thanks \u003c@U0453US3GAJ\u003e, here they are:\n\nFB11664293 / FB11387684 - DocumentGroup adds extra back button to all NavigationStacks/NavigationView\n\nFB11397488 - Provide SwiftUI modifier to allow a transparent navigation bar\n\nFB10848329 - TextField inside View inside Grouped Form has incorrect padding\n\nFB10429307 - Unable to react to @Environment(\\.editMode) changes\n\nFB9835030 - onPreferenceChange not called for preferenceKey changed within TabView within Settings",
          "ts": "1666422827.072599",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "hbDe",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Thanks "
                    },
                    {
                      "type": "user",
                      "user_id": "U0453US3GAJ"
                    },
                    {
                      "type": "text",
                      "text": ", here they are:\n\nFB11664293 / FB11387684 - DocumentGroup adds extra back button to all NavigationStacks/NavigationView\n\nFB11397488 - Provide SwiftUI modifier to allow a transparent navigation bar\n\nFB10848329 - TextField inside View inside Grouped Form has incorrect padding\n\nFB10429307 - Unable to react to @Environment(\\.editMode) changes\n\nFB9835030 - onPreferenceChange not called for preferenceKey changed within TabView within Settings"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "client_msg_id": "b1d6939b-107b-4ad3-8203-cd065965d5eb",
          "type": "message",
          "user": "U046S4P76FJ",
          "text": "FB11708501 about lazy containers with the Layout protocol \u0026amp; AnyLayout",
          "ts": "1666450385.695979",
          "thread_ts": "1666379027.993119",
          "parent_user_id": "U0453US3GAJ",
          "team": "T03U5MWB2FN",
          "replace_original": false,
          "delete_original": false,
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "k8NY",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "FB11708501 about lazy containers with the Layout protocol \u0026 AnyLayout"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "channel_id": "C043025CS59"
}
